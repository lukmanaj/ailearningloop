<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ailearningloop</title>
<link>https://lukmanaj.github.io/ailearningloop/</link>
<atom:link href="https://lukmanaj.github.io/ailearningloop/index.xml" rel="self" type="application/rss+xml"/>
<description>Venturing Beyond My Roots: An AI Odyssey Unfolds for This Non-Tech Trailblazer!</description>
<generator>quarto-1.4.555</generator>
<lastBuildDate>Mon, 10 Jun 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Mastering Data Structures and Algorithms: A Journey through Coursera’s Specialization by the University of Colorado Boulder</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/dsa-algorithms-cert/</link>
  <description><![CDATA[ 





<p>I am thrilled to announce that I have successfully completed the <strong>Foundations of Algorithms and Data Structures Specialization</strong> offered by the University of Colorado Boulder on Coursera. The specialization was excellently taught by Professor Sriram Sankaranarayanan and spanned five comprehensive courses. I embarked on this journey last year, and it has been an enriching experience.</p>
<section id="course-overview-and-learnings" class="level2">
<h2 class="anchored" data-anchor-id="course-overview-and-learnings">Course Overview and Learnings</h2>
<section id="algorithms-for-searching-sorting-and-indexing" class="level3">
<h3 class="anchored" data-anchor-id="algorithms-for-searching-sorting-and-indexing">1. Algorithms for Searching, Sorting, and Indexing</h3>
<p>This course laid the foundation for algorithm design and analysis. It covered: - Basics of algorithm design and analysis - Sorting arrays - Data structures such as priority queues and hash functions - Applications like Bloom filters</p>
</section>
<section id="trees-and-graphs-basics" class="level3">
<h3 class="anchored" data-anchor-id="trees-and-graphs-basics">2. Trees and Graphs: Basics</h3>
<p>This course delved into tree and graph data structures. Key topics included: - Basic algorithms on tree data structures - Binary search trees and self-balancing trees - Graph data structures and traversal algorithms - Advanced topics like kd-trees for spatial data and algorithms for spatial data</p>
</section>
<section id="dynamic-programming-and-greedy-algorithms" class="level3">
<h3 class="anchored" data-anchor-id="dynamic-programming-and-greedy-algorithms">3. Dynamic Programming and Greedy Algorithms</h3>
<p>In this course, I learned essential algorithm design techniques, including: - Divide and conquer - Dynamic programming - Greedy algorithms - Introduction to intractability (NP-completeness) - Using linear/integer programming solvers for optimization problems - Advanced topics in data structures</p>
</section>
<section id="approximate-algorithms-and-linear-programming" class="level3">
<h3 class="anchored" data-anchor-id="approximate-algorithms-and-linear-programming">4. Approximate Algorithms and Linear Programming</h3>
<p>This course focused on: - Linear and integer programming formulations for solving algorithmic problems - Applications in resource allocation, scheduling, task assignment, and the traveling salesperson problem - Algorithms for NP-hard problems with guaranteed approximation factors - Efficient algorithms providing useful bounds on optimal solutions</p>
</section>
<section id="advanced-data-structures-rsa-and-quantum-algorithms" class="level3">
<h3 class="anchored" data-anchor-id="advanced-data-structures-rsa-and-quantum-algorithms">5. Advanced Data Structures, RSA, and Quantum Algorithms</h3>
<p>The final course introduced: - Number-theory based cryptography - Basics of quantum algorithms - Advanced data structures like B-Trees and Suffix Tries</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Completing this specialization has been a significant milestone in my Data Science and Machine Learning/AI journey. I am excited to apply the knowledge and skills I have gained to future projects and challenges.</p>
<p>I highly recommend this specialization to anyone looking to deepen their understanding of algorithms and data structures. The courses are well-structured, and Professor Sriram Sankaranarayanan’s teaching is both clear and engaging.</p>
<p>I look forward to what the future holds and I am eager to continue my learning journey in the ever-evolving field of Data Science and AI.</p>


</section>

 ]]></description>
  <category>data structures</category>
  <category>algorithms</category>
  <category>data science</category>
  <category>programming</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/dsa-algorithms-cert/</guid>
  <pubDate>Mon, 10 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My Journey in Deep Learning: From TensorFlow to PyTorch and Back</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/tensorflow-dev/</link>
  <description><![CDATA[ 





<p>I recently completed the <code>DeepLearning.AI</code> TensorFlow Developer Professional Certificate, a milestone that marked a significant step in my deep learning journey. My exploration of TensorFlow began last year while taking the second course of the DeepLearning.AI Deep Learning Specialization, excellently taught by Andrew Ng.</p>
<p>Following my initial foray into TensorFlow, I delved extensively into PyTorch during the Arewa Data Science Academy’s Deep Learning with PyTorch fellowship. The allure of PyTorch, with its state-of-the-art (SOTA) models, pythonic nature and high customizability, made me somewhat hesitant to further pursue TensorFlow. However, an unexpected opportunity arose when, as a moderator in the DeepLearning.AI Forum, I was invited to test a TensorFlow course. This experience reignited my interest and ultimately led me to pursue the Professional Certificate on Coursera.</p>
<p>Contrary to my initial reservations, I found TensorFlow to be quite user-friendly. While it may offer less customization compared to PyTorch, TensorFlow’s learning curve is significantly gentler, making it accessible to a wider audience.</p>
<p>The TensorFlow Developer Professional Certificate comprises four courses, each designed to quickly get learners up to speed with TensorFlow:</p>
<ol type="1">
<li>Introduction to TensorFlow for Artificial Intelligence, Machine Learning, and Deep Learning</li>
<li>Convolutional Neural Networks in TensorFlow</li>
<li>Natural Language Processing in TensorFlow</li>
<li>Sequences, Time Series, and Prediction</li>
</ol>
<p>The certificate is excellently taught by Laurence Moroney, who leads AI Advocacy at Google. His vision is to make AI easy for developers and widen access to machine learning careers for everyone. Laurence is a prolific author, with dozens of programming books to his name, including ‘AI and ML for Coders’ at O’Reilly. He is also an active member of the Science Fiction Writers of America, having authored several sci-fi novels, comic books, and a produced screenplay.</p>
<p>Throughout the series of courses, I built on my existing TensorFlow skills, learning about regular dense layers, convolutional neural networks (CNNs), recurrent neural networks (RNNs), long short-term memory networks (LSTMs), gated recurrent units (GRUs), and more. I even explored lambda layers in TensorFlow. The culmination of the course involved applying deep learning and sequence models to time series data.</p>
<p>Completing this course has been an immensely rewarding experience. I am grateful to Coursera for providing a 90% discount, making it possible for me to embark on and complete this learning journey. The structured learning path and the expertise of the instructors have significantly enhanced my understanding and proficiency in using TensorFlow.</p>
<p>In conclusion, while my journey began with PyTorch, the experience with TensorFlow has been equally enriching. TensorFlow’s ease of use and comprehensive learning resources have made it a valuable tool in my deep learning toolkit. I am excited to apply these skills in future projects and continue exploring the evolving landscape of deep learning technologies.</p>



 ]]></description>
  <category>tensorflow</category>
  <category>ai</category>
  <category>deep learning</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/tensorflow-dev/</guid>
  <pubDate>Mon, 27 May 2024 00:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/tensorflow-dev/tensorflow-cert.png" medium="image" type="image/png" height="118" width="144"/>
</item>
<item>
  <title>PyTorch for Natural Language Processing</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/pytorch-nlp/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In the dynamic field of Natural Language Processing (NLP), the quest for more robust and scalable models has led researchers and developers towards powerful, flexible tools that can handle the complexity and size of modern datasets. One such tool that has risen to prominence is PyTorch. Developed by Facebook’s AI Research lab, PyTorch offers a compelling blend of flexibility, speed, and ease of use, making it an ideal choice for NLP tasks. Having recently completed a track on DataCamp on NLP with PyTorch, I find it useful to pen down how PyTorch changes the game.</p>
</section>
<section id="what-is-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="what-is-pytorch">What is PyTorch?</h2>
<p>PyTorch is an open-source machine learning library based on the Torch library, widely recognized for its simplicity and interface clarity. It excels in areas requiring automatic differentiation and dynamic neural networks, particularly in complex, evolving projects where versatility is as critical as performance. This is largely attributed to its use of dynamic computation graphs (called “define-by-run” schema), which allow changes to be made on-the-fly and graphs to be built during runtime.</p>
</section>
<section id="pytorchs-advantages-for-nlp" class="level2">
<h2 class="anchored" data-anchor-id="pytorchs-advantages-for-nlp">PyTorch’s Advantages for NLP</h2>
<p>The characteristics of PyTorch particularly beneficial for NLP include its intuitive design, ease of debugging, and seamless integration with the Python programming environment. Unlike static graphs, which need to define and optimize the entire model architecture before running, PyTorch’s dynamic graphs enable developers to alter their models as inputs change, which is especially useful for the varying sequence lengths in text data.</p>
<section id="flexibility-and-ease-of-use" class="level3">
<h3 class="anchored" data-anchor-id="flexibility-and-ease-of-use">Flexibility and Ease of Use</h3>
<p>For NLP, models often need to experiment with novel ideas or hybrid architectures, and PyTorch’s flexibility ensures that researchers can implement changes almost as quickly as they can think of them. It integrates seamlessly with the Python data science stack, making it easier to turn research prototypes into production-ready code.</p>
</section>
<section id="rich-prebuilt-libraries" class="level3">
<h3 class="anchored" data-anchor-id="rich-prebuilt-libraries">Rich Prebuilt Libraries</h3>
<p>PyTorch is supported by a rich ecosystem of libraries and extensions. Libraries such as torchtext simplify text processing and provide utilities for common tasks like tokenization, vocabulary creation, and sequence padding, allowing researchers to handle preprocessing efficiently and focus more on model development.</p>
</section>
<section id="torchtext-for-streamlined-text-preprocessing" class="level3">
<h3 class="anchored" data-anchor-id="torchtext-for-streamlined-text-preprocessing">torchtext for Streamlined Text Preprocessing</h3>
<p>A key component in PyTorch’s NLP capabilities is torchtext, a library designed to streamline preprocessing pipelines. torchtext offers utilities for batch processing of text, making it easier to load and handle large datasets efficiently. With functionalities such as built-in vocabularies, pre-trained word vectors, and support for common datasets, torchtext significantly reduces the boilerplate code required in text preprocessing. This allows developers to rapidly experiment with different NLP models and techniques, enhancing productivity and innovation.</p>
</section>
<section id="community-and-support" class="level3">
<h3 class="anchored" data-anchor-id="community-and-support">Community and Support</h3>
<p>The PyTorch community is a vibrant and growing ecosystem. With extensive documentation, tutorials, and forums, developers and researchers can easily find help and resources. The community not only contributes to the core library but also continuously adds to a growing repository of models and tools, which accelerates development and fosters innovation in NLP.</p>
</section>
</section>
<section id="pytorch-in-action-nlp-applications" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-in-action-nlp-applications">PyTorch in Action: NLP Applications</h2>
<p>In NLP, PyTorch has been used to achieve state-of-the-art results in several areas:</p>
<ol type="1">
<li>Text Classification: PyTorch provides a straightforward approach for developing models for sentiment analysis, topic classification, and more.</li>
<li>Machine Translation: The flexibility in sequence-to-sequence models, attention mechanisms, and memory networks has made PyTorch a popular choice for researchers working on language translation applications.</li>
<li>Language Modeling and Generation: PyTorch supports advanced models like Transformers and GPT-n series, which are crucial for tasks that require understanding context and generating text.</li>
</ol>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>PyTorch’s impact on NLP is undeniable. Its design inherently supports the rapid prototyping and iterative refinement that NLP models often require. Whether you’re a seasoned data scientist or a novice in machine learning, PyTorch provides the tools to innovate and scale NLP applications effectively. As NLP continues to evolve, PyTorch’s role in driving forward the boundaries of what machines understand about human language is likely only to grow, making it an invaluable asset in any NLP developer’s toolkit.</p>


</section>

 ]]></description>
  <category>arewads</category>
  <category>pytorch</category>
  <category>nlp</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/pytorch-nlp/</guid>
  <pubDate>Sun, 12 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My Journey to Becoming a Professional Data Scientist: A DataCamp Certification Odyssey</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/datacamp-cert/</link>
  <description><![CDATA[ 





<p>Embarking on the path to deepen my data science expertise, I was presented with an invaluable opportunity—a free premium subscription to DataCamp, courtesy of Arewa Data Science Academy. This opportunity was not just a stepping stone but a gateway to a broader horizon in data science that I eagerly embraced.</p>
<p>The journey commenced with the Associate Data Scientist with Python track. Given my foundational knowledge and previous encounter with DataCamp’s Introduction to Python course, I was not venturing into uncharted territory. This familiarity served me well, enabling me to swiftly navigate through the coursework and complete the entire track within a week.</p>
<p>But the quest for knowledge is insatiable. I ventured further into the realm of data manipulation and retrieval by tackling the revamped SQL Fundamentals track. This was followed by successfully achieving the Associate Data Scientist with SQL certification, marking another milestone in my journey.</p>
<p>Eager to delve deeper, I enrolled in the Data Scientist with Python track. This comprehensive curriculum was not just about Python; it integrated SQL courses and introduced vital skills in package writing and Git fundamentals. This holistic approach equipped me with a robust set of tools and knowledge, preparing me for the pinnacle of my journey—the Professional Data Scientist Certification.</p>
<p>The certification process was rigorous, encompassing two timed written exams that tested my theoretical understanding through multiple-choice and fill-in-the-blank questions. However, the real challenge lay in the practical data science exam, which required me to code machine learning models and present my findings via webcam. This phase tested not just my technical skills but also my ability to communicate complex results effectively.</p>
<p>Despite the pressure and the initial setback in the practical exam—stemming from difficulties in data cleaning—I remained undeterred. After a period of diligent study and review, I reattempted the practical exam. With renewed confidence and enhanced skills, I passed on my second attempt.</p>
<p>This journey was demanding, yet immensely rewarding. It culminated in earning a certificate that not only represents a testament to my skills and dedication but also empowers me with credentials recognized for two years.</p>
<p>Reflecting on this experience, I am reminded of the importance of resilience, the value of continuous learning, and the doors that can open when one is willing to push through challenges. My journey to becoming a professional data scientist was not just about acquiring a certificate; it was about growth, perseverance, and the relentless pursuit of excellence in the ever-evolving field of data science.</p>



 ]]></description>
  <category>arewads</category>
  <category>datacamp</category>
  <category>dcdonates</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/datacamp-cert/</guid>
  <pubDate>Sun, 17 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/datacamp-cert/datacamp.png" medium="image" type="image/png" height="83" width="144"/>
</item>
<item>
  <title>Harnessing the Power of R Shiny for Interactive Data Visualization</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/first-shiny/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction:</h2>
<p>In the realm of data science and statistical computing, R has long been a staple for analysts and researchers. However, the R ecosystem extends far beyond static analyses and plots, entering the dynamic world of web applications with R Shiny. This powerful framework allows users to build interactive web applications directly from R, enabling end-users to interact with their data analyses and visualizations in real-time.</p>
</section>
<section id="what-is-r-shiny" class="level2">
<h2 class="anchored" data-anchor-id="what-is-r-shiny">What is R Shiny?</h2>
<p>R Shiny is an R package that makes it straightforward to build interactive web apps straight from R. Without needing to know HTML, CSS, or JavaScript, data scientists can create applications that allow users to interact with their data, change parameters, and visualize the results instantly.</p>
</section>
<section id="key-features-of-r-shiny" class="level2">
<h2 class="anchored" data-anchor-id="key-features-of-r-shiny">Key Features of R Shiny:</h2>
<ol type="1">
<li><p>Interactivity: Users can interact with the application, altering inputs and immediately seeing the output change.</p></li>
<li><p>Accessibility: Shiny apps can be hosted on a webpage, making your R analysis accessible to anyone with internet access.</p></li>
<li><p>Customization: While Shiny makes it easy to get started with default settings, it also allows for extensive customization for more advanced users.</p></li>
</ol>
</section>
<section id="getting-started-with-r-shiny" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-r-shiny">Getting Started with R Shiny:</h2>
<p>To begin, you need to install the Shiny package from CRAN:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shiny"</span>)</span></code></pre></div>
<p>Then, you can create a simple Shiny app with just a few lines of code:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define UI for application</span></span>
<span id="cb2-4">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb2-5">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My First Shiny App"</span>),</span>
<span id="cb2-6">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarLayout</span>(</span>
<span id="cb2-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebarPanel</span>(</span>
<span id="cb2-8">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sliderInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num"</span>, </span>
<span id="cb2-9">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Choose a number:"</span>, </span>
<span id="cb2-10">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb2-11">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb2-12">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-13">      ),</span>
<span id="cb2-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mainPanel</span>(</span>
<span id="cb2-15">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"selectedNum"</span>)</span>
<span id="cb2-16">      )</span>
<span id="cb2-17">   )</span>
<span id="cb2-18">)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define server logic</span></span>
<span id="cb2-21">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output) {</span>
<span id="cb2-22">   output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>selectedNum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderText</span>({ </span>
<span id="cb2-23">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You selected"</span>, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>num)</span>
<span id="cb2-24">   })</span>
<span id="cb2-25">}</span>
<span id="cb2-26"></span>
<span id="cb2-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the application </span></span>
<span id="cb2-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> ui, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> server)</span></code></pre></div>
<p>This app creates a slider for the user to select a number and immediately displays the selected number on the screen.</p>
</section>
<section id="challenges-and-limitations" class="level2">
<h2 class="anchored" data-anchor-id="challenges-and-limitations">Challenges and Limitations:</h2>
<p>While R Shiny is an incredibly powerful tool, it does come with its challenges and limitations:</p>
<ol type="1">
<li><p>Performance: Heavy computational tasks can slow down your app, affecting user experience.</p></li>
<li><p>Scalability: Shiny apps can require significant resources for multiple users, which can be a challenge for large-scale applications.</p></li>
<li><p>Learning Curve: For those unfamiliar with web development concepts, there might be a learning curve.</p></li>
</ol>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion:</h2>
<p>R Shiny offers a bridge between data analysis in R and interactive web applications, empowering data scientists to share their insights in a more dynamic and accessible way. Despite its challenges, the benefits of creating interactive and user-friendly applications make R Shiny a valuable tool in the data scientist’s toolkit.</p>


</section>

 ]]></description>
  <category>arewads</category>
  <category>shiny</category>
  <category>rprogramming</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/first-shiny/</guid>
  <pubDate>Sun, 10 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Object Oriented Programming: Python vs R</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/oop/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Object-Oriented Programming (OOP) is a programming paradigm that uses “objects” to design applications and computer programs. It utilizes several techniques from previously established paradigms, including modularity, polymorphism, and encapsulation. Today, we’ll explore how OOP concepts manifest in two popular programming languages: Python and R, particularly focusing on inheritance, using the context of a microwave oven as an example.</p>
</section>
<section id="oop-in-python" class="level2">
<h2 class="anchored" data-anchor-id="oop-in-python">OOP in Python</h2>
<p>In Python, OOP is central to the language. This can be seen in the way classes are defined and used. Python supports inheritance, allowing new classes to inherit attributes and methods from existing classes. This feature facilitates code reusability and the hierarchical organization of classes. For example, if you were modeling microwave ovens, you could start with a basic microwave class and then create a subclass for a fancier microwave with additional features:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MicrowaveOven:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, power_rating):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.power_rating <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> power_rating</span>
<span id="cb1-4"></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cook(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, time_seconds):</span>
<span id="cb1-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your food is cooked!"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FancyMicrowaveOven(MicrowaveOven):</span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cook_baked_potato(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cook(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enjoy your baked potato!"</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">a_fancy_microwave <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FancyMicrowaveOven(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-14">a_fancy_microwave.cook_baked_potato()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Your food is cooked!
Enjoy your baked potato!</code></pre>
</div>
</div>
<p>In this Python example, FancyMicrowaveOven inherits from MicrowaveOven, meaning it can use the cook method defined in the parent class and add its methods like cook_baked_potato.</p>
</section>
<section id="oop-in-r" class="level2">
<h2 class="anchored" data-anchor-id="oop-in-r">OOP in R</h2>
<p>In contrast, R, traditionally seen as a statistical programming language, has incorporated OOP features more gradually. The R6 package in R allows for a more classical approach to OOP, supporting encapsulation and inheritance but in a somewhat different manner than Python. The R6 framework allows R developers to create classes with reference semantics, which can be somewhat akin to how Python’s classes operate.</p>
<p>Here’s how you might define a similar set of microwave classes in R using the R6 package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(R6)</span>
<span id="cb3-2">microwave_oven_factory <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb3-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MicrowaveOven"</span>,</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">private =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">power_rating_watts =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>),</span>
<span id="cb3-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb3-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cook =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(time_seconds) {</span>
<span id="cb3-7">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(time_seconds)</span>
<span id="cb3-8">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your food is cooked!"</span>)</span>
<span id="cb3-9">        }</span>
<span id="cb3-10">    )</span>
<span id="cb3-11">)</span>
<span id="cb3-12"></span>
<span id="cb3-13">fancy_microwave_oven_factory <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FancyMicrowaveOven"</span>,</span>
<span id="cb3-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit =</span> microwave_oven_factory,</span>
<span id="cb3-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb3-17">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cook_baked_potato =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb3-18">            self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cook</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-19">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enjoy your baked potato!"</span>)</span>
<span id="cb3-20">        }</span>
<span id="cb3-21">    )</span>
<span id="cb3-22">)</span>
<span id="cb3-23"></span>
<span id="cb3-24">a_fancy_microwave <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fancy_microwave_oven_factory<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb3-25">a_fancy_microwave<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cook_baked_potato</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Your food is cooked!"
[1] "Enjoy your baked potato!"</code></pre>
</div>
</div>
<p>In the R example, FancyMicrowaveOven is defined with inherit = microwave_oven_factory, which establishes an inheritance relationship with MicrowaveOven. This setup allows the fancy microwave to use the cook method from its parent class while adding a new method cook_baked_potato.</p>
</section>
<section id="differences" class="level2">
<h2 class="anchored" data-anchor-id="differences">Differences</h2>
<p>A key difference in the OOP implementation between Python and R is the syntax and the explicit use of self and super. In Python, self refers to the instance itself and is used to access class attributes and methods from within. super(), on the other hand, is used to call methods from a superclass in the context of inheritance.</p>
<p>In R’s R6, self serves a similar purpose as in Python, referring to the current object. However, R6 does not have a direct counterpart to Python’s super; instead, method overriding involves calling the superclass method directly through super$method_name(). Inheritance in R6 is established through the inherit parameter in the class definition, allowing the new class to access the public methods and properties of the parent class.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In summary, while Python’s OOP features have been integral to the language from its conception, R has adopted OOP paradigms over time, with packages like R6 introducing class-based programming that includes inheritance. Both languages offer robust capabilities for OOP, facilitating complex and modular program design. In practice, choosing between Python and R for OOP depends on the specific requirements of your project and your personal or team’s familiarity with each language.</p>


</section>

 ]]></description>
  <category>oop</category>
  <category>python</category>
  <category>rprogramming</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/oop/</guid>
  <pubDate>Wed, 06 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Celebrating a Milestone in Statistics: A Journey through DataCamp’s ‘Statistics Fundamentals with R’ Track</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/statistics-in-r/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>It’s a moment of pride and immense satisfaction as I share the completion of the “Statistics Fundamentals with R” track offered by DataCamp, an educational journey made possible through the generous donations of DataCamp to Arewa Data Science Academy. This accomplishment is not just a testament to my dedication but also highlights the empowering vision of Arewa Data Science Academy and DataCamp in fostering data literacy and analytical skills among learners.</p>
</section>
<section id="the-pathway-to-mastery-delving-deep-into-statistical-analysis" class="level2">
<h2 class="anchored" data-anchor-id="the-pathway-to-mastery-delving-deep-into-statistical-analysis">The Pathway to Mastery: Delving Deep into Statistical Analysis</h2>
<p>The track was meticulously designed to guide learners through the foundational to advanced concepts of statistics applied in the versatile R programming environment. It commenced with the “Introduction to Statistics in R”, a course that laid the groundwork by introducing statistical concepts and how they are implemented in R. This initial phase was crucial as it set the tone for the rigorous analytical skills I was about to develop.</p>
<p>Transitioning from basics to more complex analyses, the “Introduction to Regression in R” and “Intermediate Regression in R” courses elevated my understanding of relationships between variables and how these relationships can be quantified and tested. Through these courses, I gained proficiency in building, diagnosing, and interpreting linear regression models, an indispensable skill in any data scientist’s toolkit.</p>
<p>The learning curve then ascended to “Sampling in R” and “Hypothesis Testing in R”, courses that are fundamental in statistical inference. These courses taught me the importance of sample design, the intricacies of drawing conclusions from data, and the procedures for testing hypotheses with confidence. The practical applications and real-world examples reinforced my understanding and applicability of these statistical methods.</p>
</section>
<section id="solidifying-knowledge-and-practical-application" class="level2">
<h2 class="anchored" data-anchor-id="solidifying-knowledge-and-practical-application">Solidifying Knowledge and Practical Application</h2>
<p>The culmination of the coursework was not merely theoretical; it demanded practical application of all the learned concepts. The project “Hypothesis Testing with Men’s and Women’s Soccer Matches” was a challenging yet thrilling part of the track. It tasked me with performing a hypothesis test to determine if there were differences in goals scored between women’s and men’s soccer matches. This project was not just an academic exercise but a real-world application that honed my analytical and critical thinking skills.</p>
</section>
<section id="benchmarking-skills-and-achieving-excellence" class="level2">
<h2 class="anchored" data-anchor-id="benchmarking-skills-and-achieving-excellence">Benchmarking Skills and Achieving Excellence</h2>
<p>The journey concluded with a skill assessment that tested the breadth and depth of my statistical knowledge and R programming skills. Achieving a rank in the 98th percentile was a moment of great pride and a testament to the quality of learning and understanding I had gained throughout the track.</p>
</section>
<section id="a-journey-of-empowerment-and-future-aspirations" class="level2">
<h2 class="anchored" data-anchor-id="a-journey-of-empowerment-and-future-aspirations">A Journey of Empowerment and Future Aspirations</h2>
<p>Completing the “Statistics Fundamentals with R” track is more than just an academic achievement; it’s an empowering journey that has equipped me with the skills to make data-driven decisions and insights. It has instilled in me a profound respect for data and its potential to influence real-world outcomes.</p>
<p>I am immensely grateful to Arewa Data Science Academy and DataCamp for providing this incredible learning opportunity. This experience has not only enhanced my statistical analysis and R programming skills but has also inspired me to pursue further studies in data science and contribute to the field.</p>
<p>As I reflect on this journey, I am filled with gratitude and motivation to apply these skills in real-world scenarios, continue learning, and contribute to the growing field of data science. Here’s to a future where data and analytics lead the way to innovation and informed decision-making.</p>


</section>

 ]]></description>
  <category>arewads</category>
  <category>datacamp</category>
  <category>rstats</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/statistics-in-r/</guid>
  <pubDate>Sun, 03 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/statistics-in-r/stats.png" medium="image" type="image/png" height="83" width="144"/>
</item>
<item>
  <title>Becoming a Mentor at Arewa Data Science Academy: A Journey of Growth and Contribution</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/arewads-mentorship/</link>
  <description><![CDATA[ 





<p>I am thrilled to announce my recent role as a mentor for the second cohort of machine learning fellows at the Arewa Data Science Academy, guiding them through the Python programming phase of their fellowship. Reflecting on this experience brings a mix of emotions; it’s hard to believe that just a year ago, I was in their shoes, diligently learning Python myself. This journey has been a testament to how far I’ve come.</p>
<p>One of the most rewarding aspects of this role is the reciprocal nature of learning and teaching. As I share my knowledge and experience with the fellows, I find my own skills sharpening. The process of mentoring not only benefits the learners but also enhances my understanding and proficiency in data science.</p>
<p>Currently, I’m engaged in mentoring these bright individuals in the data science phase of their fellowship. The academy has graciously recognized my contributions and efforts by awarding me a certificate, which I proudly share with immense gratitude.</p>
<p>This past year has been a remarkable period of personal and professional growth for me. The journey with Arewa Data Science Academy has been incredibly fulfilling, offering me the chance to both impart knowledge and continuously learn. As I navigate this path of ongoing exploration and adaptation, I deeply appreciate the opportunity given to me by the Academy. It’s a privilege to contribute to the growth of others while simultaneously enriching my own experience.</p>
<p>I am grateful for this journey and look forward to what the future holds. May Allah guide us all on our path to success.</p>



 ]]></description>
  <category>arewads</category>
  <category>mentorship</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/arewads-mentorship/</guid>
  <pubDate>Sun, 28 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/arewads-mentorship/mentor.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Advanced Optimization Techniques in Deep Learning: Mastering PyTorch</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/optimization/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In the journey of training deep learning models, choosing the right optimization algorithm is crucial to achieve faster convergence and better final results. While Gradient Descent has been the go-to method, there are more advanced techniques that can significantly improve model performance. In this article, we will explore these advanced optimization methods, including Stochastic Gradient Descent (SGD), Momentum, RMSProp, and Adam, and how they can be applied effectively in PyTorch.</p>
</section>
<section id="understanding-optimization-in-deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="understanding-optimization-in-deep-learning">Understanding Optimization in Deep Learning</h2>
<p>Optimization in deep learning is about finding the best parameters (weights and biases) of a neural network. It involves minimizing a cost function, analogous to finding the lowest point in a hilly landscape. This process is iterative and requires updating the model’s parameters in a certain direction at each training step.</p>
<ol type="1">
<li><p><strong>Stochastic Gradient Descent (SGD)</strong>: SGD is a variation of the gradient descent algorithm. It updates the model’s parameters using only a single training example at a time. This makes the updates faster but causes the parameter path to oscillate, taking a bit longer to converge.</p></li>
<li><p><strong>Mini-Batch Gradient Descent</strong>: This method strikes a balance by using a subset of the training set to perform each update. It’s faster than batch gradient descent and more stable than SGD. The mini-batches are randomly selected, ensuring that the model doesn’t see the same examples in each iteration.</p></li>
<li><p><strong>Momentum</strong>: Momentum optimization is like pushing a ball down a hill; it accumulates velocity as it rolls downhill, becoming faster and more powerful. This method helps accelerate SGD by navigating along relevant directions and dampening oscillations. It achieves this by taking into account the past gradients to update the weights. Essentially, it adds a fraction (denoted as the momentum term) of the update vector of the past step to the current update vector.</p></li>
<li><p><strong>RMSProp</strong>: Root Mean Square Propagation (RMSProp) is an adaptive learning rate method. It divides the learning rate for a weight by a running average of the magnitudes of recent gradients for that weight. This means that the learning rate gets adjusted automatically and is different for each parameter. RMSProp performs well in situations where the optimization landscape is very uneven, as it can adapt to the changing landscape accelerating the training process.</p></li>
<li><p><strong>Adam</strong>: Adaptive Moment Estimation (Adam) combines the ideas from RMSProp and Momentum. It keeps track of an exponentially decaying average of past gradients (like Momentum) and an exponentially decaying average of past squared gradients (like RMSProp). Adam calculates the adaptive learning rates for each parameter. This method is often recommended as the default optimizer due to its effectiveness in handling sparse gradients on noisy problems.</p></li>
</ol>
</section>
<section id="implementing-optimization-methods-in-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="implementing-optimization-methods-in-pytorch">Implementing Optimization Methods in PyTorch</h2>
<p>In PyTorch, these optimization methods are readily available and can be easily implemented. Here’s a brief guide on how to use them:</p>
<p><strong>Gradient Descent</strong>: Use torch.optim.SGD with a learning rate parameter.</p>
<p><strong>Momentum</strong>: Add the momentum parameter to the torch.optim.SGD optimizer.</p>
<p><strong>RMSProp</strong>: Use torch.optim.RMSprop, providing parameters such as learning rate and decay rate.</p>
<p><strong>Adam</strong>: Simply use torch.optim.Adam, which requires minimal tuning.</p>
</section>
<section id="learning-rate-decay-and-scheduling" class="level2">
<h2 class="anchored" data-anchor-id="learning-rate-decay-and-scheduling">Learning Rate Decay and Scheduling</h2>
<p>Over time, reducing the learning rate can help the model converge by taking smaller steps. This is particularly important in the later stages of training. PyTorch provides scheduling utilities (e.g., torch.optim.lr_scheduler) to adjust the learning rate during training. By combining these schedulers with the optimization methods, you can achieve more robust and faster convergence.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Selecting the right optimizer and learning rate schedule can drastically improve the performance of your deep learning models. While Adam is a safe and effective default choice, exploring other optimizers like Momentum and RMSProp can provide better insights into the model’s learning dynamics. Always remember, the choice of optimizer might depend on the specific characteristics of your neural network and the nature of your problem. Experimenting with different optimizers and learning rate schedules is key to finding the most efficient path to training successful deep learning models. Stay tuned for more insights and tutorials on deep learning with PyTorch.</p>
<p>Our journey into mastering deep learning is well underway as we continue to participate in the Deep Learning with PyTorch fellowship with the Arewa Data Science Academy!</p>


</section>

 ]]></description>
  <category>deep learning</category>
  <category>pytorch</category>
  <category>optimization</category>
  <category>arewads</category>
  <category>fellowship</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/optimization/</guid>
  <pubDate>Wed, 17 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A Beginner’s Comprehensive Guide to PyTorch</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/pytorch-intro/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to the world of PyTorch, a dynamic and powerful machine learning framework that’s revolutionizing the way we approach deep learning. At the core of PyTorch are tensors, versatile structures that extend beyond simple matrices, allowing for more complex and efficient data representations. For instance, a color image with dimensions 64x64 pixels, represented in three color channels (red, green, and blue), is effectively a tensor in PyTorch.</p>
</section>
<section id="getting-started-with-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-pytorch">Getting Started with PyTorch</h2>
<p>To dive into PyTorch, start by importing it in your Python code with import torch, along with your other dependencies. This guide will serve as an introduction to PyTorch’s capabilities. Don’t worry about memorizing everything.</p>
<div id="6ddd375b" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing PyTorch</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># how to import the nn module</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span></code></pre></div>
</div>
</section>
<section id="why-choose-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="why-choose-pytorch">Why Choose PyTorch?</h2>
<p>A detailed analysis by the Gradient explains it well: PyTorch offers a more Pythonic experience, is easier to debug, and remains the leading choice in machine learning research. Despite TensorFlow’s efforts to integrate similar features, PyTorch’s intuitive design and growing dominance in both research and industry make it an optimal choice for education and forward-thinking development.</p>
</section>
<section id="exploring-tensor-properties" class="level2">
<h2 class="anchored" data-anchor-id="exploring-tensor-properties">Exploring Tensor Properties</h2>
<p>Creating tensors in PyTorch is straightforward. For instance, you can initiate a tensor using torch.Tensor. A simple example is:</p>
<div id="4a66caf3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">example_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([</span>
<span id="cb2-2">                                [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]],</span>
<span id="cb2-3">                                [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]],</span>
<span id="cb2-4">                                [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb2-5">                             ])</span>
<span id="cb2-6">example_tensor</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>tensor([[[1., 2.],
         [3., 4.]],

        [[5., 6.],
         [7., 8.]],

        [[9., 0.],
         [1., 2.]]])</code></pre>
</div>
</div>
<p>Understanding a tensor’s properties, such as its device (CPU or GPU) and shape, is crucial. You can explore these properties using methods like example_tensor.device and example_tensor.shape. These properties give insights into where the tensor resides (CPU or GPU) and its dimensional structure. For example, torch.Size([3, 2, 2]) indicates a tensor of rank 3 with specific dimensions.</p>
<div id="bf0928bd" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"tensor_shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"tensor device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example_tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor_shape: torch.Size([3, 2, 2])
tensor device: cpu</code></pre>
</div>
</div>
</section>
<section id="indexing-and-initializing-tensors" class="level2">
<h2 class="anchored" data-anchor-id="indexing-and-initializing-tensors">Indexing and Initializing Tensors</h2>
<p>Manipulating tensors in PyTorch is akin to handling NumPy arrays. You can access elements or slices of tensors using standard Python indexing. Moreover, initializing tensors is versatile in PyTorch. Functions like torch.ones_like and torch.zeros_like help create tensors filled with ones or zeros, mimicking the shape and device of a reference tensor.</p>
</section>
<section id="pytorchs-neural-network-module-torch.nn" class="level2">
<h2 class="anchored" data-anchor-id="pytorchs-neural-network-module-torch.nn">PyTorch’s Neural Network Module (torch.nn)</h2>
<p>PyTorch’s torch.nn module is a treasure trove for neural network enthusiasts. It offers a plethora of classes to build and transform tensors efficiently. For example, nn.Linear for linear transformations, nn.ReLU for applying the ReLU activation function, and nn.BatchNorm1d for batch normalization in one-dimensional data.</p>
</section>
<section id="optimization-techniques" class="level2">
<h2 class="anchored" data-anchor-id="optimization-techniques">Optimization Techniques</h2>
<p>One of PyTorch’s strengths is its optimization capabilities, crucial in machine learning. The torch.optim module provides various optimizers like Adam, essential for updating model parameters during training. A typical training loop in PyTorch involves setting gradients to zero, computing loss, backpropagating to calculate gradients, and then updating the parameters.</p>
</section>
<section id="extending-with-custom-nn-modules" class="level2">
<h2 class="anchored" data-anchor-id="extending-with-custom-nn-modules">Extending with Custom nn Modules</h2>
<p>PyTorch allows for the creation of custom classes extending the nn module. This feature lets you define unique model architectures suited to your specific problems. You can define the structure in the <strong>init</strong> method and specify the computation in the forward method.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>PyTorch is not just a tool but a playground for machine learning enthusiasts and researchers. Its intuitive design, Pythonic nature, and robust features make it a top choice for learning and developing cutting-edge machine learning models. As you embark on this journey, PyTorch will undoubtedly be a valuable ally in turning your machine learning aspirations into reality. Subsequent articles will put all these concepts into practice as we delve deeper into the world of PyTorch.</p>


</section>

 ]]></description>
  <category>deep learning</category>
  <category>pytorch</category>
  <category>arewads</category>
  <category>fellowship</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/pytorch-intro/</guid>
  <pubDate>Tue, 16 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Embarking on a Deep Learning Journey with Arewa Data Science Academy’s Deep Learning with PyTorch Fellowship</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/pytorch-fellowship/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>This December marked the exciting kickoff of the “Deep Learning with PyTorch” fellowship, hosted by Arewa Data Science Academy. I’m thrilled to share my journey and insights as we delve into the fascinating world of deep learning.</p>
</section>
<section id="the-fellowship-begins" class="level2">
<h2 class="anchored" data-anchor-id="the-fellowship-begins">The Fellowship Begins</h2>
<p>The fellowship’s curriculum is centered around the comprehensive PyTorch deep learning book, a resource that’s freely available and highly recommended for enthusiasts in the field (find it here: <a href="https://github.com/mrdbourke/pytorch-deep-learning">PyTorch Deep Learning by Daniel Bourke</a>).</p>
</section>
<section id="inspirational-instruction" class="level2">
<h2 class="anchored" data-anchor-id="inspirational-instruction">Inspirational Instruction</h2>
<p>A key highlight of this program is our instructor, Mustapha Abdullahi. Fresh from his commendable achievement of completing his master’s with honors from Queen Mary University, UK, Mustapha brings a blend of youthful vigor and profound knowledge to our virtual classroom. His ability to break down complex concepts into digestible bits has been nothing short of remarkable.</p>
</section>
<section id="progress-and-personalization" class="level2">
<h2 class="anchored" data-anchor-id="progress-and-personalization">Progress and Personalization</h2>
<p>Over the past three weeks, we’ve journeyed through the initial three lectures of the course material, each session bringing new insights and challenges. The structure of the program encourages continuous learning and application, with weekly assignments that are meticulously reviewed by Mustapha. His personalized feedback has been instrumental in enhancing our understanding and skills.</p>
</section>
<section id="a-community-of-learners" class="level2">
<h2 class="anchored" data-anchor-id="a-community-of-learners">A Community of Learners</h2>
<p>What makes this fellowship stand out is the sense of community and collective learning. Each of us brings a unique perspective to the table, enriching discussions and collaborations. It’s been a privilege to be part of such a vibrant and passionate group of learners.</p>
</section>
<section id="looking-ahead" class="level2">
<h2 class="anchored" data-anchor-id="looking-ahead">Looking Ahead</h2>
<p>As we progress through the program, I plan to document and share my experiences and learnings in this blog. Whether it’s tackling a challenging concept, celebrating a breakthrough, or sharing useful resources, I hope to provide a window into the dynamic and ever-evolving world of deep learning with PyTorch.</p>
</section>
<section id="stay-connected" class="level2">
<h2 class="anchored" data-anchor-id="stay-connected">Stay Connected</h2>
<p>For those interested in following this journey, stay tuned to this blog. Your comments, questions, and insights are always welcome as we explore the frontiers of deep learning together.</p>


</section>

 ]]></description>
  <category>deep learning</category>
  <category>pytorch</category>
  <category>arewads</category>
  <category>fellowship</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/pytorch-fellowship/</guid>
  <pubDate>Mon, 15 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Speed and Elegance: How Python’s List Comprehensions Outshine Traditional Loops</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/list-comprehensions/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Python is celebrated for its elegant syntax and the ability to express complex ideas in a few lines of code, with list comprehensions being a shining example. These powerful expressions streamline the process of creating new lists by transforming and filtering data seamlessly. While the trusty <code>for</code> loop has its merits, list comprehensions bring efficiency and clarity to the forefront of Python programming. Join me as we delve into the reasons that elevate list comprehensions above traditional loops, showcasing why they’re not just a tool but an essential Python idiom for any coder’s toolkit.</p>
</section>
<section id="readability-and-conciseness" class="level2">
<h2 class="anchored" data-anchor-id="readability-and-conciseness">Readability and Conciseness</h2>
<p>One of the main advantages of list comprehensions is their readability and conciseness. A list comprehension allows you to write a loop in a single line of code. For example, the code example below uses a list comprehension to square each number. To begin, let’s define a list of numbers.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">main_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000000</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">opt_squared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> main_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num]</span>
<span id="cb2-2">opt_squared[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>[99999900000025,
 99999920000016,
 99999940000009,
 99999960000004,
 99999980000001]</code></pre>
</div>
</div>
<p>This is not only more readable but also reduces the chance of coding errors because it’s all in one compact line.</p>
<p>On the other hand, the traditional <code>for</code> loop is more verbose:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">squared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(main_list)):</span>
<span id="cb4-3">    main_list_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> main_list[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-4">    squared.append(main_list_i)</span>
<span id="cb4-5">squared[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>[99999900000025,
 99999920000016,
 99999940000009,
 99999960000004,
 99999980000001]</code></pre>
</div>
</div>
<p>The answer gotten is the same in both methods. However, more lines are involved in the traditional <code>for</code> loop, which increases the complexity and the potential for bugs.</p>
</section>
<section id="performance" class="level2">
<h2 class="anchored" data-anchor-id="performance">Performance</h2>
<p>When evaluating algorithms, performance is often equated with speed—how swiftly can the algorithm accomplish its task? To quantitatively assess this aspect, we turn to the <code>timeit</code> module, a robust Python tool that meticulously measures the execution time of small code snippets. This approach allows us to compare the speed of list comprehensions with traditional loops under a precise and controlled benchmark.</p>
<p><code>List comprehension performance</code></p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb6-2">opt_squared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> main_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num]</span>
<span id="cb6-3">opt_squared[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.41 s ± 431 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p><code>Traditional loop performance</code></p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb8-2">squared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(main_list)):</span>
<span id="cb8-4">    main_list_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> main_list[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-5">    squared.append(main_list_i)</span>
<span id="cb8-6">squared[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.66 s ± 72.3 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>List comprehensions are generally faster than traditional <code>for</code> loops because they are optimized by Python’s internal C-based engine. This optimization leads to better performance, particularly noticeable when dealing with large datasets, as seen above.</p>
<p>The timeit results indicate that the list comprehension approach is faster than the traditional <code>for</code> loop. While the difference in this case might seems small, it becomes significant as the complexity and size of the data grow.</p>
</section>
<section id="memory-efficiency" class="level2">
<h2 class="anchored" data-anchor-id="memory-efficiency">Memory Efficiency</h2>
<p>List comprehensions can be more memory-efficient than traditional loops. They generate the required list in a single expression, which allows Python’s memory allocator to optimize its strategy. This advantage can lead to better performance in memory usage, which is critical in large-scale applications.</p>
</section>
<section id="expressiveness-and-flexibility" class="level2">
<h2 class="anchored" data-anchor-id="expressiveness-and-flexibility">Expressiveness and Flexibility</h2>
<p>List comprehensions can incorporate complex expressions and multiple conditions in a single line. The inclusion of an if statement in the list comprehension above is an excellent example of this expressiveness:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb10-1">opt_squared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> main_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num]</span></code></pre></div>
<p>Here, the <code>if num</code> serves as a filter to exclude falsy values (like 0) before the squaring operation. To achieve the same with a traditional loop, additional lines and conditions would be necessary.</p>
</section>
<section id="pythonic-idiom" class="level2">
<h2 class="anchored" data-anchor-id="pythonic-idiom">Pythonic Idiom</h2>
<p>Using list comprehensions is considered more “Pythonic,” a term that refers to the idiomatic use of Python. Python’s philosophy emphasizes simplicity and the importance of writing clear, readable, and concise code as specified in the <code>Zen of Python</code>. List comprehensions align perfectly with this philosophy, encouraging clean and maintainable code.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>While traditional <code>for</code> loops have their place and are sometimes necessary, list comprehensions offer a more elegant and efficient way to create lists based on existing iterables. They provide better performance, improved readability, and a more Pythonic approach to coding. The code example given is a practical demonstration of how a seemingly small change in syntax and approach can lead to better code performance and maintainability, which is why list comprehensions are generally preferred in Python development.</p>


</section>

 ]]></description>
  <category>programming</category>
  <category>python</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/list-comprehensions/</guid>
  <pubDate>Wed, 13 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Juggling Code and Career: My Arewa Data Science 30 Days Of Python Learning Journey Amidst a Full Schedule</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/learning-motivation/</link>
  <description><![CDATA[ 





<p>As part of the first cohort of the Arewa Data Science Academy Data Science and Machine Learning fellowship, embarking on the thirty days of Python challenge, I found myself navigating through the demanding waters of 12-hour work shifts. Despite these professional commitments, I remained steadfast in my participation in the weekend sessions, often balancing work and learning simultaneously. My thirst for knowledge wasn’t confined to my job; it extended to personal interests like improving my French and Arabic, a testament to my multifaceted curiosity. This same drive propelled me towards learning Python, a field I ventured into without any formal background in computer science.</p>
<p>It’s enlightening to realize that, despite our hectic schedules, we often find pockets of time for activities like browsing social media. This observation led me to a pivotal conclusion: if we can dedicate time to scrolling through feeds, we can surely allocate moments for self-improvement and learning. My approach was methodical yet flexible - committing to consistent, daily progress, and embracing a journey of gradual improvement rather than seeking instant perfection. I wasn’t fixated on getting everything right on my first attempt. Rather, I aimed to complete each day’s exercises, occasionally revisiting previous tasks, to solidify my understanding. This consistent effort was a clear signal of my commitment and eagerness to learn, something that I hoped would be apparent to my mentors. I have since completed the python challenge and eventually the data science fellowship, but the lessons and experiences remain.</p>
<p>In sharing this experience, my aim is to offer a piece of advice to fellow learners, especially those balancing their professional lives with personal development goals. It’s crucial to assess the role of learning in your life and to find ways to integrate it into your daily routine. The journey of learning programming, particularly a versatile language like Python, is not only about acquiring technical skills. It significantly enhances cognitive abilities, problem-solving skills, and overall mental agility. The impact of this commitment is profound, stretching beyond immediate learning outcomes to influence your professional trajectory and personal growth.</p>
<p>While we are fortunate to have mentors to guide us, the crux of learning lies in our own hands. It’s about taking responsibility for our growth, proactively seeking help when needed, and not shying away from the challenges that come with stepping out of our comfort zones. This journey has been a rewarding one, filled with lessons that transcend the realm of programming, offering insights into persistence, time management, and the power of small, consistent steps towards a larger goal.</p>
<p>In conclusion, as you embark on your own learning adventures, remember that the path may not always be easy, but the rewards, both tangible and intangible, are truly worth the effort. Embrace the challenge, cherish the progress, and always keep the flame of curiosity burning bright.</p>



 ]]></description>
  <category>learning</category>
  <category>motivation</category>
  <category>programming</category>
  <category>python</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/learning-motivation/</guid>
  <pubDate>Fri, 08 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Deep Learning Frameworks: FizzBuzz with PyTorch, TensorFlow, and Keras</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/tensorflow-pytorch-fizzbuzz/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction:</h2>
<p>The world of deep learning is dominated by a few key frameworks, each with its unique strengths and idiosyncrasies. PyTorch and TensorFlow are two of the most popular tools in this space, widely used by researchers and industry professionals alike. In this article, we’ll explore the differences between these frameworks by implementing the classic FizzBuzz problem in both PyTorch and TensorFlow. Additionally, we’ll touch upon Keras, a high-level API for TensorFlow, towards the end.</p>
</section>
<section id="fizzbuzz-in-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="fizzbuzz-in-pytorch">FizzBuzz in PyTorch:</h2>
<p>PyTorch, developed by Facebook’s AI Research lab, is known for its simplicity, ease of use, and dynamic computational graph.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fizzbuzz_pytorch(max_num):</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-5">        num_torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(num)</span>
<span id="cb1-6">        fizz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.eq(num_torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-7">        buzz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.eq(num_torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-8">        fizzbuzz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.logical_and(fizz, buzz)</span>
<span id="cb1-9"></span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> fizzbuzz.item():</span>
<span id="cb1-11">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> fizz.item():</span>
<span id="cb1-13">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> buzz.item():</span>
<span id="cb1-15">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)</span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-17">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(num)</span>
<span id="cb1-18"></span>
<span id="cb1-19">fizzbuzz_pytorch(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz</code></pre>
</div>
</div>
<section id="key-points" class="level3">
<h3 class="anchored" data-anchor-id="key-points">Key Points:</h3>
<ul>
<li>Dynamic Graphs: PyTorch uses dynamic computational graphs (also known as define-by-run graphs). This means that the graph is built on the fly as operations are executed. This is evident in the way PyTorch handles the FizzBuzz logic, providing a more intuitive Pythonic feel.</li>
<li>Ease of Debugging: Thanks to its dynamic nature, debugging in PyTorch can be more straightforward using standard Python debugging tools.</li>
</ul>
</section>
</section>
<section id="fizzbuzz-in-tensorflow" class="level2">
<h2 class="anchored" data-anchor-id="fizzbuzz-in-tensorflow">FizzBuzz in TensorFlow:</h2>
<p>TensorFlow, developed by the Google Brain team, is renowned for its powerful, scalable, and production-ready features.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fizzbuzz_tensorflow(max_num):</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-5">        num_tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(num)</span>
<span id="cb3-6">        fizz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.equal(tf.math.mod(num_tf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-7">        buzz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.equal(tf.math.mod(num_tf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-8">        fizzbuzz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.logical_and(fizz, buzz)</span>
<span id="cb3-9"></span>
<span id="cb3-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tf.switch_case(tf.cast(fizzbuzz, tf.int32) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tf.cast(fizz, tf.int32) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tf.cast(buzz, tf.int32),</span>
<span id="cb3-11">                             branch_fns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb3-12">                                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: num_tf.numpy(),</span>
<span id="cb3-13">                                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: tf.constant(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>).numpy().decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>),</span>
<span id="cb3-14">                                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: tf.constant(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>).numpy().decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>),</span>
<span id="cb3-15">                                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: tf.constant(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>).numpy().decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>)</span>
<span id="cb3-16">                             }))</span>
<span id="cb3-17"></span>
<span id="cb3-18">fizzbuzz_tensorflow(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2023-11-07 21:59:05.053558: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: SSE4.1 SSE4.2 AVX AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-11-07 21:59:35.805842: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz</code></pre>
</div>
</div>
<section id="key-points-1" class="level3">
<h3 class="anchored" data-anchor-id="key-points-1">Key Points:</h3>
<ul>
<li>Static Graphs: TensorFlow traditionally used static computational graphs, where the graph is defined before it is executed. TensorFlow 2.x, however, introduced eager execution, which allows a more dynamic approach, similar to PyTorch.</li>
<li>Scalability and Deployment: TensorFlow shines in scalability and deployment, especially in distributed settings and production environments.</li>
</ul>
</section>
</section>
<section id="understanding-the-differences" class="level2">
<h2 class="anchored" data-anchor-id="understanding-the-differences">Understanding the Differences:</h2>
<p>While both implementations achieve the same goal, they highlight some fundamental differences between the two frameworks:</p>
<ul>
<li>Graph Building: In TensorFlow, you often define placeholders and sessions (though less so with eager execution), whereas PyTorch adopts a more straightforward approach using regular Python variables and loops.</li>
<li>Tensors: Both frameworks use tensors as their fundamental data structure, but the way they handle these tensors varies, reflecting their different approaches to graph computation.</li>
</ul>
</section>
<section id="a-note-on-keras" class="level2">
<h2 class="anchored" data-anchor-id="a-note-on-keras">A Note on Keras:</h2>
<p>Keras, now fully integrated into TensorFlow as tf.keras, offers a high-level, user-friendly API. It abstracts many details of TensorFlow, making it accessible for beginners. While Keras might not be the first choice for implementing a simple program like FizzBuzz, it’s an invaluable tool for more complex deep learning models, offering pre-built layers, models, and a wealth of utilities.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion:</h2>
<p>In conclusion, both PyTorch and TensorFlow have their distinct advantages, with PyTorch often being praised for its user-friendly approach and TensorFlow for its scalability and robust deployment capabilities. Keras, as part of TensorFlow, further simplifies the deep learning process, allowing developers to build complex models with ease. Understanding these differences and strengths is crucial for any aspiring or practicing data scientist or AI engineer, helping them choose the right tool for their specific needs and projects.</p>


</section>

 ]]></description>
  <category>ai</category>
  <category>pytorch</category>
  <category>tensorflow</category>
  <category>programming</category>
  <category>python</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/tensorflow-pytorch-fizzbuzz/</guid>
  <pubDate>Mon, 06 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Computation Graphs, Eager Execution and Flow Control in TensorFlow</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/tensorflow-fizzbuzz/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction:</h2>
<p>TensorFlow is a popular deep learning framework that provides a robust platform for the creation and execution of computational graphs. Understanding how TensorFlow handles computation through graphs, eager execution, and flow control is pivotal for effectively deploying machine learning/deep learning models.</p>
<p><strong><em>1. Computation Graphs in TensorFlow:</em></strong></p>
<p>A computation graph is a series of TensorFlow operations arranged into a graph of nodes. Each node represents an operation, while the edges represent the data consumed or produced by an operation. This structure allows TensorFlow to optimize the computation, especially in deep learning models.</p>
<p><strong>Benefits of Computation Graphs:</strong></p>
<ul>
<li>Efficiency: Operations can be parallelized across different processors (CPUs, GPUs).</li>
<li>Portability: The graph can be executed on different devices and platforms.</li>
</ul>
<p><strong><em>2. Eager Execution in TensorFlow:</em></strong></p>
<p>Eager execution is an imperative programming environment that evaluates operations immediately. It contrasts with graph execution in that it doesn’t require a computational graph to be defined before running operations.</p>
<p><strong>Advantages of Eager Execution:</strong></p>
<ul>
<li>Interactive Debugging: Operations are executed as they are defined, facilitating easy debugging.</li>
<li>Intuitive Interface: It aligns with the way programmers are used to thinking about their programs.</li>
</ul>
<ol start="3" type="1">
<li>Flow Control in TensorFlow:</li>
</ol>
<p>TensorFlow provides various tools for flow control, enabling the creation of dynamic models. This includes conditionals and loops, which are essential in many machine learning algorithms.</p>
<section id="tensorflow-functions-for-flow-control" class="level3">
<h3 class="anchored" data-anchor-id="tensorflow-functions-for-flow-control">TensorFlow Functions for Flow Control:</h3>
<ul>
<li>tf.cond: Provides a way to perform conditional execution.</li>
<li>tf.while_loop: Allows for the creation of dynamic loops in the graph.</li>
<li>tf.switch_case: Used for creating conditional branching.</li>
</ul>
<section id="demonstrating-flow-control-using-fizzbuzz-in-tensorflow" class="level4">
<h4 class="anchored" data-anchor-id="demonstrating-flow-control-using-fizzbuzz-in-tensorflow">Demonstrating Flow Control using FizzBuzz in Tensorflow</h4>
<p>In a few lines of code, I try to demonstate some tensorflow functionalities using the popular FizzBuzz.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fizzbuzz(max_num):</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-5">        num_tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(num)</span>
<span id="cb1-6">        fizz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.equal(tf.math.mod(num_tf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-7">        buzz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.equal(tf.math.mod(num_tf, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-8">        fizzbuzz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.logical_and(fizz, buzz)</span>
<span id="cb1-9"></span>
<span id="cb1-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tf.switch_case(tf.cast(fizzbuzz, tf.int32) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tf.cast(fizz, tf.int32) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tf.cast(buzz, tf.int32),</span>
<span id="cb1-11">                             branch_fns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb1-12">                                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: num_tf.numpy(),</span>
<span id="cb1-13">                                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: tf.constant(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>).numpy().decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>),</span>
<span id="cb1-14">                                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: tf.constant(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>).numpy().decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>),</span>
<span id="cb1-15">                                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: tf.constant(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>).numpy().decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>)</span>
<span id="cb1-16">                             }))</span>
<span id="cb1-17"></span>
<span id="cb1-18">fizzbuzz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2023-11-05 21:07:15.366672: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: SSE4.1 SSE4.2 AVX AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-11-05 21:07:22.171045: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion:</h2>
<p>The versatility of TensorFlow lies in its ability to seamlessly switch between a static computation graph and eager execution, providing both efficiency and flexibility. Understanding these concepts is essential for any machine learning practitioner working with TensorFlow. Whether you’re implementing simple programs like FizzBuzz or developing complex neural networks, mastering these aspects of TensorFlow will greatly enhance your ability to develop and optimize machine learning models.</p>
<p>On a final note, readers should remember that TensorFlow is an evolving platform and therefore try to refer to the latest documentation for up-to-date practices and API usage.</p>


</section>

 ]]></description>
  <category>ai</category>
  <category>tensorflow</category>
  <category>programming</category>
  <category>python</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/tensorflow-fizzbuzz/</guid>
  <pubDate>Sun, 05 Nov 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/tensorflow-fizzbuzz/ibm.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Preparing for the Future of AI: My Journey with IBM’s AI Engineering Professional Certificate</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/ibm-ai-eng/</link>
  <description><![CDATA[ 





<p>As I continue to navigate through the rich and complex landscape of artificial intelligence, I had the pleasure of completing IBM’s esteemed AI Engineering Professional Certificate program, hosted on Coursera. This immersive experience, spanning six comprehensive courses, was a deep dive into the intricacies of machine learning algorithms, TensorFlow, PyTorch, Keras, and the fascinating world of computer vision.</p>
<p>My journey was particularly steeped in the latter, culminating in a capstone project that put my newfound expertise to the test. I take immense pride in weaving another layer of accomplishment into my burgeoning portfolio of certifications, each course further endorsed by distinct skill badges, with a special one recognizing the entire professional certificate achievement.</p>
<p>This program marks my second venture with IBM, building upon the foundational knowledge I acquired in their Data Science certificate. The initial course, “Machine Learning for Python,” served as a welcome refresher, reinforcing concepts I had previously encountered.</p>
<p>As the curriculum progressed, it transitioned into the realm of deep learning, commencing with neural networks and employing the Keras framework. The choice of Keras was deliberate; its simplicity and beginner-friendly nature are perfect for those keen on rapid development and prototyping.</p>
<p>Subsequent courses whisked me through the mechanics of Computer Vision and image processing. The revelation of how to deftly manipulate images using PIL and OpenCV libraries was nothing short of revelatory.</p>
<p>My skill set expanded further as I delved into constructing sophisticated deep neural networks, courtesy of PyTorch and TensorFlow. The program’s thoughtful design ensured that by the finale—a challenging capstone project—I had amassed a trove of knowledge, a nuanced understanding of frameworks like Keras, TensorFlow, and PyTorch, as well as a portfolio of mini-projects and skill badges to showcase my competencies.</p>
<p>The experience was immensely rewarding, with each course’s Jupyter notebooks serving as a solid foundation that will underpin my future endeavors in AI. For enthusiasts and aspiring professionals, I wholeheartedly endorse this professional certification. While the material might hail from an earlier era in this fast-evolving field, a commitment to refreshing the codes and staying abreast of the latest trends will ground you firmly in the essential principles of AI.</p>
<p>Embark on this journey, and you too can unlock the transformative power of AI, paving the way for a future rich with possibility.</p>



 ]]></description>
  <category>ai</category>
  <category>pytorch</category>
  <category>keras</category>
  <category>tensorflow</category>
  <category>computer vision</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/ibm-ai-eng/</guid>
  <pubDate>Sat, 04 Nov 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/ibm-ai-eng/ibm.png" medium="image" type="image/png" height="111" width="144"/>
</item>
<item>
  <title>Data Visualization with R using ggplot2</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/ggplot/</link>
  <description><![CDATA[ 





<p>In this article, I attempt to briefly display the ease of data visualization using the ggplot2 library in R. As always, the first thing is to import the library using the <code>library</code> syntax. Here, I import tidyverse which includes ggplot2 as a core member of the tidyverse. I also import <code>palmerpenguins</code> as it contains the penguins dataset I will like to use.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.2     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.2     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span></code></pre></div>
</div>
<p>Looking closely at the <code>mpg</code> dataset to see what variables it contains.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(mpg)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 234
Columns: 11
$ manufacturer &lt;chr&gt; "audi", "audi", "audi", "audi", "audi", "audi", "audi", "…
$ model        &lt;chr&gt; "a4", "a4", "a4", "a4", "a4", "a4", "a4", "a4 quattro", "…
$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…
$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…
$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …
$ trans        &lt;chr&gt; "auto(l5)", "manual(m5)", "manual(m6)", "auto(av)", "auto…
$ drv          &lt;chr&gt; "f", "f", "f", "f", "f", "f", "f", "4", "4", "4", "4", "4…
$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…
$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…
$ fl           &lt;chr&gt; "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p…
$ class        &lt;chr&gt; "compact", "compact", "compact", "compact", "compact", "c…</code></pre>
</div>
</div>
<p>Checking out the <code>palmer penguins</code> dataset too.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(penguins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 344
Columns: 8
$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…
$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…
$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …
$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …
$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…
$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …
$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…
$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…</code></pre>
</div>
</div>
<p>Now, I use the easy to follow ggplot syntax to plot mpg dataset, <code>displ</code> against <code>hwy</code>. I also introduce a smooth line to accurately see the way the variables relate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>mpg,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span> hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y=</span> displ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/ggplot/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Second plot is on the penguins data. I compare the bill length and bill depth and see how species affect the relationship.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins,</span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> bill_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bill_depth_mm, </span>
<span id="cb10-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> species</span>
<span id="cb10-6">  )</span>
<span id="cb10-7">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(</span>
<span id="cb10-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>))</span>
<span id="cb10-12">  )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 2 rows containing missing values (`geom_point()`).</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/ggplot/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>The ggplot2 library offers an easy way to do data visualization in R. However, it is important to note that mastering visualization requires a lot of practice and a single article is not enough. Let’s all keep learning friends.</p>


</section>

 ]]></description>
  <category>data science</category>
  <category>r programming</category>
  <category>data visualization</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/ggplot/</guid>
  <pubDate>Sat, 07 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Science: Foundations using R Specialization</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/rprogramming/</link>
  <description><![CDATA[ 





<p>I recently wrapped up the Data Science: Foundations using R specialization on Coursera, a comprehensive program offered by John Hopkins University and led by Professors Roger Peng and Jeff Leek. Comprising five enriching courses, this specialization serves as the initial segment of the highly popular Data Science Specialization. Let’s delve into the key components of this journey:</p>
<ol type="1">
<li><p>The Data Scientist’s Toolbox: Inaugurating the specialization, the first course, “The Data Scientist’s Toolbox,” provides a solid foundation. Here, we explore the essential tools and resources essential for data scientists. We delve into the world of data science, defining its scope and importance. Additionally, we get hands-on experience with version control, particularly Git. The course also introduces us to R and RStudio, offering guidance on seamlessly integrating version control within RStudio. Moreover, it acquaints us with RMarkdown, a powerful tool for effective communication in data science.</p></li>
<li><p>R Programming: The second course, “R Programming,” is a deep dive into the R programming language. We learn the fundamentals of R as a programming language, with practical insights gained through the use of swirl courses.</p></li>
<li><p>Getting and Cleaning Data: Courses three and four further solidify the concepts introduced in the second course. These courses intensify our learning through interactive swirl lessons and real-world examples. “Getting and Cleaning Data” equips us with the skills necessary for data cleaning, a crucial step in any data science project.</p></li>
<li><p>Exploratory Data Analysis: In the fourth course, “Exploratory Data Analysis,” we build on our knowledge to perform insightful exploratory data analysis. The course guides us through specific examples, providing a hands-on approach to this critical aspect of data science.</p></li>
<li><p>Reproducible Research: The final course, “Reproducible Research,” emphasizes the importance of clear research communication. It equips us with the tools and techniques needed to ensure our research is not only transparent but also reproducible. RMarkdown plays a central role in this course, enabling us to effectively communicate our findings.</p></li>
</ol>
<p>One noteworthy aspect of this specialization is the peer review assignments, with at least one per course. These assignments not only reinforce the concepts we’ve learned but also offer a platform for applying them in real-world scenarios. They are an invaluable part of the learning experience.</p>
<p>In conclusion, the Data Science: Foundations using R specialization is a rewarding journey that equips students with essential data science skills. I am immensely grateful to Professors Roger Peng and Jeff Leek for their guidance throughout this program. As someone in the field of medical sciences, I firmly believe that learning R programming is a crucial step for anyone serious about research, and this specialization has been an enlightening and enriching experience.</p>



 ]]></description>
  <category>data science</category>
  <category>r programming</category>
  <category>coursera</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/rprogramming/</guid>
  <pubDate>Tue, 03 Oct 2023 00:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/rprogramming/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Reproducible Research Final Project</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/project/</link>
  <description><![CDATA[ 





<p>This article is the final project of the Reproducible Research course on Coursera offered by John Hopkins University. I make an attempt to look at the U.S. National Oceanic and Atmospheric Administration’s (NOAA) storm database and make deductions about the impact of these events on health and economy.</p>
<section id="data-loading" class="level2">
<h2 class="anchored" data-anchor-id="data-loading">Data Loading</h2>
<p>First step is load the data. I used the read_csv from readr (tidyverse) and it was able to read the file even in the compressed state.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.2     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.2     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">storm_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repdata_data_StormData.csv.bz2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 902297 Columns: 37
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (18): BGN_DATE, BGN_TIME, TIME_ZONE, COUNTYNAME, STATE, EVTYPE, BGN_AZI,...
dbl (18): STATE__, COUNTY, BGN_RANGE, COUNTY_END, END_RANGE, LENGTH, WIDTH, ...
lgl  (1): COUNTYENDN

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
</section>
<section id="data-cleaning-and-transformation" class="level2">
<h2 class="anchored" data-anchor-id="data-cleaning-and-transformation">Data Cleaning and Transformation</h2>
<p>To understand how the data look and the variables contained, use was made of the glimpse function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explore the data</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(storm_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 902,297
Columns: 37
$ STATE__    &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…
$ BGN_DATE   &lt;chr&gt; "4/18/1950 0:00:00", "4/18/1950 0:00:00", "2/20/1951 0:00:0…
$ BGN_TIME   &lt;chr&gt; "0130", "0145", "1600", "0900", "1500", "2000", "0100", "09…
$ TIME_ZONE  &lt;chr&gt; "CST", "CST", "CST", "CST", "CST", "CST", "CST", "CST", "CS…
$ COUNTY     &lt;dbl&gt; 97, 3, 57, 89, 43, 77, 9, 123, 125, 57, 43, 9, 73, 49, 107,…
$ COUNTYNAME &lt;chr&gt; "MOBILE", "BALDWIN", "FAYETTE", "MADISON", "CULLMAN", "LAUD…
$ STATE      &lt;chr&gt; "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL",…
$ EVTYPE     &lt;chr&gt; "TORNADO", "TORNADO", "TORNADO", "TORNADO", "TORNADO", "TOR…
$ BGN_RANGE  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…
$ BGN_AZI    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ BGN_LOCATI &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ END_DATE   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ END_TIME   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ COUNTY_END &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…
$ COUNTYENDN &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ END_RANGE  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…
$ END_AZI    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ END_LOCATI &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ LENGTH     &lt;dbl&gt; 14.0, 2.0, 0.1, 0.0, 0.0, 1.5, 1.5, 0.0, 3.3, 2.3, 1.3, 4.7…
$ WIDTH      &lt;dbl&gt; 100, 150, 123, 100, 150, 177, 33, 33, 100, 100, 400, 400, 2…
$ F          &lt;dbl&gt; 3, 2, 2, 2, 2, 2, 2, 1, 3, 3, 1, 1, 3, 3, 3, 4, 1, 1, 1, 1,…
$ MAG        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…
$ FATALITIES &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0,…
$ INJURIES   &lt;dbl&gt; 15, 0, 2, 2, 2, 6, 1, 0, 14, 0, 3, 3, 26, 12, 6, 50, 2, 0, …
$ PROPDMG    &lt;dbl&gt; 25.0, 2.5, 25.0, 2.5, 2.5, 2.5, 2.5, 2.5, 25.0, 25.0, 2.5, …
$ PROPDMGEXP &lt;chr&gt; "K", "K", "K", "K", "K", "K", "K", "K", "K", "K", "M", "M",…
$ CROPDMG    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…
$ CROPDMGEXP &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ WFO        &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ STATEOFFIC &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ ZONENAMES  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ LATITUDE   &lt;dbl&gt; 3040, 3042, 3340, 3458, 3412, 3450, 3405, 3255, 3334, 3336,…
$ LONGITUDE  &lt;dbl&gt; 8812, 8755, 8742, 8626, 8642, 8748, 8631, 8558, 8740, 8738,…
$ LATITUDE_E &lt;dbl&gt; 3051, 0, 0, 0, 0, 0, 0, 0, 3336, 3337, 3402, 3404, 0, 3432,…
$ LONGITUDE_ &lt;dbl&gt; 8806, 0, 0, 0, 0, 0, 0, 0, 8738, 8737, 8644, 8640, 0, 8540,…
$ REMARKS    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ REFNUM     &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …</code></pre>
</div>
</div>
<p>Next, since the most important variable in this analysis is the <code>EVTYPE</code> variable, there’s a need to ensure that there are no missing values. I may plot or do summary statistics and missing values could cause problems in either of these activities.</p>
<p>I also got the sum of fatalities, injuries and property damage as these are important in determining health and economic impact of the events.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data Cleaning</span></span>
<span id="cb7-2">cleaned_storm_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> storm_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(EVTYPE)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PROPDMG =</span> PROPDMG <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(PROPDMGEXP <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"K"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb7-5"></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Summary Statistics</span></span>
<span id="cb7-8">summary_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cleaned_storm_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb7-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_fatalities =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(FATALITIES),</span>
<span id="cb7-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_injuries =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(INJURIES),</span>
<span id="cb7-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_damage =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(PROPDMG)</span>
<span id="cb7-13">  )</span>
<span id="cb7-14">summary_stats</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  total_fatalities total_injuries total_damage
             &lt;dbl&gt;          &lt;dbl&gt;        &lt;dbl&gt;
1            15145         140528 10875995063.</code></pre>
</div>
</div>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<section id="population-health-impact" class="level3">
<h3 class="anchored" data-anchor-id="population-health-impact">Population Health Impact</h3>
<p>Next, to properly look at the population health impact, the dataset is grouped by event type and sum of the fatalities and injuries are compared in a variable called event_harm. This variable is then plotted, taking a look at the top 10.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">event_harm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cleaned_storm_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(EVTYPE) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_harm =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(FATALITIES <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> INJURIES)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(total_harm))</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualization</span></span>
<span id="cb9-6">event_harm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_n</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, total_harm) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(EVTYPE, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>total_harm), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> total_harm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identity"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb9-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 Events with Highest Population Health Impact"</span>,</span>
<span id="cb9-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Event Type"</span>,</span>
<span id="cb9-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total Harm"</span></span>
<span id="cb9-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/project/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="economic-consequences" class="level3">
<h3 class="anchored" data-anchor-id="economic-consequences">Economic Consequences</h3>
<p>The final aspect is to analyse and check the economic consequences. Naturally, property damage is one of the metrics for measuring economic consequences of events like these. The data is grouped by event type and the property damage associated with each event is calculated. This is stored in a variable called event_damage that is then visualized.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">event_damage <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cleaned_storm_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(EVTYPE) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_damage =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(PROPDMG)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(total_damage))</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualization</span></span>
<span id="cb10-7">event_damage <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_n</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, total_damage) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(EVTYPE, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>total_damage), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> total_damage)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identity"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb10-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 Events with Greatest Economic Consequences"</span>,</span>
<span id="cb10-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Event Type"</span>,</span>
<span id="cb10-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total Damage"</span></span>
<span id="cb10-15">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/project/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Looking at population health impact, tornadoes are the most harmful. Also, on economic impact, tornadoes are still the most damaging event followed in order by flash floods, TSTM wind, flood, thunderstorm wind, hail,lightning, thunderstorm winds, high wind and winterstorm as the top ten events that cause the most economic damage.</p>


</section>

 ]]></description>
  <category>r programming</category>
  <category>project</category>
  <category>rpubs</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/project/</guid>
  <pubDate>Mon, 02 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My Adventure with Generative Adversarial Networks (GANs)</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/gans/</link>
  <description><![CDATA[ 





<p>Have you ever watched two kids play a game of “make-believe”? One creates a story, and the other tries to catch any flaws in it. If this game was a computer program, it would be called a Generative Adversarial Network or GAN for short. I’ve recently taken a deep dive into GANs with DeepLearning.ai, and here’s my take on it.</p>
<p>In a GAN, there are two parts: the Generator and the Discriminator. Imagine the Generator as a kid trying to make up stories, and the Discriminator as the friend who points out when something doesn’t make sense. The Generator then takes this feedback and tries to come up with better stories.</p>
<p>This back-and-forth game helps in creating very real-looking images, music, and more. It’s like teaching a computer to dream and imagine.</p>
<p>Now, for those who’ve gone a bit deeper into GANs, you’d know that making these two parts play nicely isn’t always simple. This is where things like dice loss and Wasserstein loss (W-loss) come in.</p>
<ul>
<li><p>Dice Loss: Without diving too deep, dice loss is a way to measure how similar two samples are. In the world of GANs, it helps in understanding how close the Generator’s “made-up” data is to real data. It’s like comparing two drawings to see how alike they are.</p></li>
<li><p>Wasserstein Loss (W-loss): This is another tool to make our GAN game more effective. Think of W-loss as a fancy ruler that measures the difference between the real deal and the computer’s creations. It’s super useful because it provides clearer feedback to the Generator, helping it improve faster.</p></li>
</ul>
<p>What’s cool about GANs is how they can be used in so many ways. They can make pictures clearer, create fun video game scenes, or even invent new music. But, like all powerful tools, there are challenges. GANs can be used to create “fake” videos that look real, which can be misleading.</p>
<p>After finishing my course, I feel like I’ve unlocked a new level in the world of technology. GANs are powerful and exciting, and as they keep getting better, I can’t wait to see where we’ll go next. Remember, it’s not just about tech; it’s about how we use it to make our world more interesting and fun!</p>



 ]]></description>
  <category>GANs</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/gans/</guid>
  <pubDate>Fri, 22 Sep 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
