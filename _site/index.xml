<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ailearningloop</title>
<link>https://lukmanaj.github.io/ailearningloop/index.html</link>
<atom:link href="https://lukmanaj.github.io/ailearningloop/index.xml" rel="self" type="application/rss+xml"/>
<description>Venturing Beyond My Roots: An AI Odyssey Unfolds for This Non-Tech Trailblazer!</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Fri, 18 Aug 2023 23:00:00 GMT</lastBuildDate>
<item>
  <title>A Study on the Impact of Data Augmentation for Training Convolutional Neural Networks in the Presence of Noisy Labels - Paper Summary</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/paper-summary/index.html</link>
  <description><![CDATA[ 




<section id="a-study-on-the-impact-of-data-augmentation-for-training-convolutional-neural-networks-in-the-presence-of-noisy-labels---paper-summary" class="level2">
<h2 class="anchored" data-anchor-id="a-study-on-the-impact-of-data-augmentation-for-training-convolutional-neural-networks-in-the-presence-of-noisy-labels---paper-summary">“A Study on the Impact of Data Augmentation for Training Convolutional Neural Networks in the Presence of Noisy Labels” - Paper Summary</h2>
<p>Emeson Santana, Gustavo Carneiro, and Filipe R. Cordeiro. A Study on the Impact of Data Augmentation for Training Convolutional Neural Networks in the Presence of Noisy Labels.SIBGRAPI - Conference on Graphics, Patterns and Images (2022)</p>
<p>The paper can be accessed <a href="https://arxiv.org/pdf/2208.11176">here</a>.</p>
<p>This paper focuses on the impact of data augmentation on the training of deep convolutional neural networks in the presence of label noise, which is common in real-world datasets. The authors analyze the robustness of different data augmentation methods and evaluate their effectiveness in improving model performance with noisy labels. They conduct experiments on various datasets - MNIST, CIFAR-10, CIFAR-100, and Clothing1M, using both classical and state-of-the-art data augmentation strategies.</p>
<p>The main contributions and findings of the paper are as follows:</p>
<ol type="1">
<li><p>Problem Definition: The paper defines the label noise problem in the context of image classification, where noisy labels are common due to factors like human error or data quality issues. They consider symmetric, asymmetric, and semantic noise scenarios.</p></li>
<li><p>Data Augmentations: The authors evaluate 13 classical and 6 state-of-the-art data augmentation methods. The basic augmentations include random crop, horizontal flip, rotation, translation, and others, while the SOTA methods include Mixup, CutMix, AutoAug, RandAug, and more.</p></li>
<li><p>Experimental Results: The experiments show that the appropriate selection of data augmentation significantly improves model robustness to label noise. The combination of classical and SOTA augmentations outperforms individual augmentations. For example, the use of random crop along with certain SOTA methods showed the best results in some scenarios.</p></li>
<li><p>Dataset Impact: The authors highlight that the choice of data augmentation is dataset-dependent, meaning that the best augmentation strategy may vary depending on the specific dataset.</p></li>
</ol>
<section id="observation" class="level3">
<h3 class="anchored" data-anchor-id="observation">Observation</h3>
<p>Upon careful reflection upon the content of the paper and its associated implications, one is prompted to engage in contemplation concerning the metric utilized for the quantification of impact. While accuracy remains a commonly adopted metric, its capacity to comprehensively encapsulate the genuine effects, particularly in the presence of extraneous variables, may be somewhat limited. As a suggestive alternative, it is worth considering metrics such as precision and recall, which offer a more encompassing representation. By doing so, one can gain valuable insights into both positive and negative instances, thereby affording a more nuanced and comprehensive assessment of impact.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In conclusion, the paper emphasizes the importance of data augmentation as a design choice for training deep convolutional neural networks with noisy labels. The experiments demonstrate that selecting appropriate data augmentation methods can lead to significant improvements in model performance when dealing with label noise. The authors suggest that further research could explore the benefits of using weak and strong augmentations at different stages of training and investigate new data augmentation strategies.</p>


</section>

 ]]></description>
  <category>cnn</category>
  <category>research</category>
  <category>paper summary</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/paper-summary/index.html</guid>
  <pubDate>Fri, 18 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Matrix Multiplication: Deep Learning Insights, Implementation, and Performance in Python and R</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/matrix/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction:</h2>
<p>Matrix multiplication is a fundamental mathematical operation with wide-ranging applications in various fields, including linear algebra, computer graphics, and machine learning. In the realm of deep learning, matrix multiplication takes on a central role, serving as the backbone for critical computations within neural networks. This article explores the significance of matrix multiplication in deep learning, its intrinsic connection to neural networks, and provides comprehensive implementations using both the R and Python programming languages.</p>
</section>
<section id="matrix-multiplication-and-its-deep-learning-role" class="level2">
<h2 class="anchored" data-anchor-id="matrix-multiplication-and-its-deep-learning-role">Matrix Multiplication and Its Deep Learning Role:</h2>
<p>Matrix multiplication forms the core of many deep learning operations by efficiently transforming data. In neural networks, each layer involves a matrix of weights that is multiplied with input data, followed by activation functions. The resulting weight updates facilitate the network’s ability to discern patterns and features, underscoring the essential role of matrix multiplication in the efficiency and effectiveness of deep learning algorithms.</p>
</section>
<section id="r-implementation" class="level2">
<h2 class="anchored" data-anchor-id="r-implementation">R Implementation:</h2>
<p>The presented R implementation of matrix multiplication offers an intuitive insight into the concept. However, its nested loop structure can be computationally inefficient for larger matrices. This implementation serves as an educational example illustrating the mechanics of matrix multiplication:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">rmatmul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a,b){</span>
<span id="cb1-2">    rows_mat1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(a)</span>
<span id="cb1-3">    cols_mat1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(a)</span>
<span id="cb1-4">    cols_mat2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(b)</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize result matrix</span></span>
<span id="cb1-6">    c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span>rows_mat1,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> cols_mat2)</span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># perform the matrix multiplication using nested loops</span></span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>rows_mat1){</span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>cols_mat2){</span>
<span id="cb1-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (k <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>cols_mat1){</span>
<span id="cb1-11">                c[i,j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> c[i,j] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a[i,k] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[k,j]</span>
<span id="cb1-12">            }</span>
<span id="cb1-13">        }</span>
<span id="cb1-14">    }</span>
<span id="cb1-15"> c</span>
<span id="cb1-16">}</span></code></pre></div>
</div>
<p>We can now test out our new matmul function by multiplying a simple matrix with itself.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-2">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmatmul</span>(a,a)</span>
<span id="cb2-3">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    7   15
[2,]   10   22</code></pre>
</div>
</div>
<p>Now we perform R regular matrix multiplication to test out the accuracy of the function</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    7   15
[2,]   10   22</code></pre>
</div>
</div>
<p>And the results are the same</p>
</section>
<section id="python-implementation-using-numpy" class="level2">
<h2 class="anchored" data-anchor-id="python-implementation-using-numpy">Python Implementation using NumPy:</h2>
<p>In the Python ecosystem, the NumPy library provides a powerful toolset for optimized matrix operations. The Python implementation showcases the usage of NumPy for efficient matrix multiplication:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> npmatmul(a,b):</span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the dimensions of the matrices</span></span>
<span id="cb6-4">    rows1, cols1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.shape</span>
<span id="cb6-5">    rows2,cols2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.shape</span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if matrix multiplication is possible</span></span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cols1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> rows2:</span>
<span id="cb6-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Matrix multiplication is not possible"</span>)</span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: </span>
<span id="cb6-10"></span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define a matrix for the multiplication product</span></span>
<span id="cb6-12">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((rows1,cols2))</span>
<span id="cb6-13"></span>
<span id="cb6-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(rows1):</span>
<span id="cb6-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cols2):</span>
<span id="cb6-16">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cols1):</span>
<span id="cb6-17">                    c[i,j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a[i,k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[k,j]</span>
<span id="cb6-18">        </span>
<span id="cb6-19">    </span>
<span id="cb6-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span></code></pre></div>
</div>
<p>Now it’s time to test out the numpy matmul function alongside the regular numpy matrix multiplication function, <code>np.matmul()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  New matrix</span></span>
<span id="cb7-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]])</span>
<span id="cb7-3">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> npmatmul(a,a)</span>
<span id="cb7-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, c)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 [[ 7. 10.]
 [15. 22.]]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">np.matmul(a,a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>array([[ 7, 10],
       [15, 22]])</code></pre>
</div>
</div>
</section>
<section id="comparing-implementations" class="level2">
<h2 class="anchored" data-anchor-id="comparing-implementations">Comparing Implementations:</h2>
<section id="ease-of-use" class="level3">
<h3 class="anchored" data-anchor-id="ease-of-use">Ease of Use:</h3>
<p>Both R and Python implementations are clear and readable. However, Python’s concise syntax and libraries like NumPy make it more user-friendly.</p>
</section>
<section id="optimization-and-performance" class="level3">
<h3 class="anchored" data-anchor-id="optimization-and-performance">Optimization and Performance:</h3>
<p>NumPy’s implementation in Python is highly optimized, leveraging efficient low-level operations for faster computation compared to the nested loops in R.</p>
</section>
<section id="conciseness" class="level3">
<h3 class="anchored" data-anchor-id="conciseness">Conciseness:</h3>
<p>Python’s NumPy implementation is more concise due to its vectorized operations, enabling shorter and more expressive code.</p>
</section>
<section id="error-handling" class="level3">
<h3 class="anchored" data-anchor-id="error-handling">Error Handling:</h3>
<p>Python’s implementation includes error handling to check if matrix multiplication is feasible, offering better user feedback.</p>
</section>
</section>
<section id="performance-comparison" class="level2">
<h2 class="anchored" data-anchor-id="performance-comparison">Performance Comparison:</h2>
<p>For a performance comparison, let’s consider matrix multiplication of larger matrices (e.g., 1000x1000) using both native operations and the respective libraries.</p>
<section id="r-performance" class="level3">
<h3 class="anchored" data-anchor-id="r-performance">R Performance:</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating large matrices</span></span>
<span id="cb11-2">large_a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb11-3">large_b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Timing the R native matrix multiplication</span></span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(large_result_r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> large_a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> large_b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  0.766   0.010   0.775 </code></pre>
</div>
</div>
</section>
<section id="python-performance" class="level3">
<h3 class="anchored" data-anchor-id="python-performance">Python Performance:</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating large matrices</span></span>
<span id="cb13-2">large_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000001</span>).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb13-3">large_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Timing the NumPy matrix multiplication</span></span>
<span id="cb13-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb13-7">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb13-8">large_result_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.matmul(large_a, large_b)</span>
<span id="cb13-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time taken for NumPy matrix multiplication:"</span>, time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time taken for NumPy matrix multiplication: 3.2793290615081787</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion:</h2>
<p>Matrix multiplication is pivotal across diverse fields, with deep learning embracing it as a fundamental building block. While both R and Python offer matrix multiplication implementations, Python’s NumPy library stands out due to its performance optimization and user-friendly interface. The nested loop approach in R is instructive but less efficient for real-world applications. Embracing optimized libraries such as NumPy in Python is crucial for achieving efficient and scalable matrix multiplication, particularly in contexts like deep learning. This article underscores the intersection of matrix multiplication, deep learning, and programming, shedding light on their interconnectedness and significance.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>r</category>
  <category>matrices</category>
  <category>mathematics</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/matrix/index.html</guid>
  <pubDate>Tue, 15 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to Symbolic Computation with SymPy</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/sympy/index.html</link>
  <description><![CDATA[ 




<p>Symbolic computation is a powerful approach in mathematics and computer science that deals with manipulating expressions and equations in their symbolic form. Unlike numerical computation, where values are approximated and manipulated, symbolic computation focuses on maintaining expressions with variables, allowing for precise mathematical manipulation. In this article, we will delve into symbolic differentiation using the popular SymPy library in Python.</p>
<section id="basic-numeric-approximation" class="level2">
<h2 class="anchored" data-anchor-id="basic-numeric-approximation">Basic Numeric Approximation</h2>
<p>When approximating the square root of 18, you might typically use the math module in Python:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-2"></span>
<span id="cb1-3">math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>4.242640687119285</code></pre>
</div>
</div>
<p>However, this result is an approximation. To work symbolically, we turn to SymPy:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sympy</span>
<span id="cb3-2"></span>
<span id="cb3-3">sqrt_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sympy.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)</span>
<span id="cb3-4">sqrt_expr</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%203%20%5Csqrt%7B2%7D"></p>
</div>
</div>
<p>SymPy provides an exact symbolic representation of the square root of 18. You can also evaluate this expression numerically to a specified number of decimal places:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">approx_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sympy.N(sqrt_expr, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb4-2">approx_val</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%204.2426407"></p>
</div>
</div>
</section>
<section id="symbolic-manipulation" class="level2">
<h2 class="anchored" data-anchor-id="symbolic-manipulation">Symbolic Manipulation</h2>
<p>In SymPy, expressions are built using symbols. Here’s an example of creating a symbolic expression corresponding to the mathematical expression <img src="https://latex.codecogs.com/png.latex?2x%5E%7B2%7D-xy"> :</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sympy.symbols(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x y'</span>)</span>
<span id="cb5-2">expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y</span>
<span id="cb5-3">expr</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%202%20x%5E%7B2%7D%20-%20x%20y"></p>
</div>
</div>
<p>With symbolic expressions, you can perform various manipulations, such as addition, subtraction, and multiplication:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">expr_manip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb6-2">expr_manip</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20x%20%5Cleft(x%5E%7B3%7D%20+%202%20x%5E%7B2%7D%5Cright)"></p>
</div>
</div>
<p>Expressions can also be expanded and factored using the expand and factor functions, respectively.</p>
<section id="substitution-and-evaluation" class="level3">
<h3 class="anchored" data-anchor-id="substitution-and-evaluation">Substitution and Evaluation</h3>
<p>You can substitute specific values into expressions using the evalf method:</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr.evalf(subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{x: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>})</span>
<span id="cb7-2">val</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%204.0"></p>
</div>
</div>
<p>This allows you to evaluate expressions as functions:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">f_symb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-2">f_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f_symb.evalf(subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>})</span>
<span id="cb8-3">f_val </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%209.0"></p>
</div>
</div>
</section>
</section>
<section id="numeric-operations-on-symbolic-functions" class="level2">
<h2 class="anchored" data-anchor-id="numeric-operations-on-symbolic-functions">Numeric Operations on Symbolic Functions</h2>
<p>To evaluate a symbolic function for each element of an array, you need to make it NumPy-compatible:</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sympy.utilities.lambdify <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lambdify</span>
<span id="cb9-3"></span>
<span id="cb9-4">x_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb9-5">f_symb_numpy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lambdify(x, f_symb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'numpy'</span>)</span>
<span id="cb9-6"></span>
<span id="cb9-7">result_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f_symb_numpy(x_array)</span>
<span id="cb9-8">result_array</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>array([1, 4, 9])</code></pre>
</div>
</div>
</section>
<section id="symbolic-differentiation-with-sympy" class="level2">
<h2 class="anchored" data-anchor-id="symbolic-differentiation-with-sympy">Symbolic Differentiation with SymPy</h2>
<p>SymPy excels in symbolic differentiation. Finding derivatives is straightforward:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">diff_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sympy.diff(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, x)</span>
<span id="cb11-2">diff_result</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%203%20x%5E%7B2%7D"></p>
</div>
</div>
<p>SymPy handles standard functions and applies necessary rules for differentiation:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">dfdx_composed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sympy.diff(sympy.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sympy.sin(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x), x)</span>
<span id="cb12-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dfdx_composed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>9*cos(3*x) - 2*exp(-2*x)</code></pre>
</div>
</div>
<p>You can even differentiate the symbolic expression from before and make it NumPy-friendly:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">dfdx_symb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sympy.diff(expr, x)</span>
<span id="cb14-2">dfdx_symb_numpy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lambdify(x, dfdx_symb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'numpy'</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4">diff_result_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfdx_symb_numpy(x_array)</span>
<span id="cb14-5">diff_result_array</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>array([4 - y, 8 - y, 12 - y], dtype=object)</code></pre>
</div>
</div>
</section>
<section id="limitations-of-symbolic-differentiation" class="level2">
<h2 class="anchored" data-anchor-id="limitations-of-symbolic-differentiation">Limitations of Symbolic Differentiation</h2>
<p>Despite its advantages, symbolic differentiation has limitations. Complex expressions might lead to inefficient or unevaluable results. For example, consider differentiating <img src="https://latex.codecogs.com/png.latex?%7Cx%7C"> :</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">dfdx_abs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sympy.diff(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(x), x)</span>
<span id="cb16-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dfdx_abs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(re(x)*Derivative(re(x), x) + im(x)*Derivative(im(x), x))*sign(x)/x</code></pre>
</div>
</div>
<p>Evaluating we get:</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">eval_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfdx_abs.evalf(subs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{x: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>})</span>
<span id="cb18-2">eval_result</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20-%20%5Cleft.%20%5Cfrac%7Bd%7D%7Bd%20x%7D%20%5Coperatorname%7Bre%7D%7B%5Cleft(x%5Cright)%7D%20%5Cright%7C_%7B%5Csubstack%7B%20x=-2%20%7D%7D"></p>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb19-2">    dfdx_abs_numpy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lambdify(x, dfdx_abs, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'numpy'</span>)</span>
<span id="cb19-3">    dfdx_abs_numpy(np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb19-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NameError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> err:</span>
<span id="cb19-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(err)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>name 'Derivative' is not defined</code></pre>
</div>
</div>
</section>
<section id="numerical-differentiation" class="level2">
<h2 class="anchored" data-anchor-id="numerical-differentiation">Numerical Differentiation</h2>
<p>Numerical differentiation approximates derivatives using nearby points and is available through libraries like NumPy. This approach focuses on function evaluation rather than symbolic expressions:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">delta_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb21-2">numerical_derivative <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (f(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> delta_x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> f(x)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> delta_x</span></code></pre></div>
<section id="numerical-differentiation-with-numpy" class="level3">
<h3 class="anchored" data-anchor-id="numerical-differentiation-with-numpy">Numerical Differentiation with NumPy</h3>
<p>NumPy provides the <code>np.gradient</code> function for numerical differentiation:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb22-2"></span>
<span id="cb22-3">x_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb22-4">y_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sin(x_vals)</span>
<span id="cb22-5"></span>
<span id="cb22-6">derivatives <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.gradient(y_vals, x_vals)</span>
<span id="cb22-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(derivatives)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[ 0.99830036  0.99321184  0.97799815  0.95281439  0.91791729  0.8736626
  0.82050147  0.75897585  0.68971295  0.61341886  0.53087135  0.44291195
  0.35043734  0.25439024  0.15574979  0.05552157 -0.04527265 -0.14560535
 -0.2444537  -0.34080999 -0.43369194 -0.52215268 -0.6052904  -0.68225756
 -0.75226954 -0.81461261 -0.86865122 -0.91383447 -0.94970177 -0.97588745
 -0.99212457 -0.99824762 -0.99419416 -0.98000551 -0.95582633 -0.92190311
 -0.87858166 -0.82630363 -0.76560196 -0.69709546 -0.62148251 -0.53953394
 -0.45208516 -0.36002765 -0.2642999  -0.16587777 -0.06576463  0.03501895
  0.13544553  0.23449132  0.33114663  0.4244261   0.51337882  0.59709797
  0.67473008  0.74548374  0.80863767  0.86354805  0.9096551   0.94648879
  0.97367362  0.99093247  0.99808939  0.99507142  0.98190932  0.95873728
  0.92579151  0.88340789  0.83201848  0.77214717  0.7044043   0.62948048
  0.54813951  0.46121059  0.36957993  0.27418163  0.17598823  0.07600073
 -0.02476154 -0.12527139 -0.22450417 -0.32144828 -0.41511542 -0.50455072
 -0.58884245 -0.6671313  -0.73861917 -0.80257728 -0.85835363 -0.9053796
 -0.9431758  -0.97135691 -0.98963566 -0.9978257  -0.99584353 -0.98370937
 -0.96154691 -0.92958209 -0.88814077 -0.86509787]</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Symbolic computation with SymPy offers a versatile way to manipulate mathematical expressions and perform differentiation symbolically. While powerful, it has limitations in handling complex expressions and might lead to inefficient computations. Numerical differentiation, on the other hand, provides an alternative for cases where symbolic computation might fall short. By combining these techniques, you can effectively explore and analyze mathematical functions in Python.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>sympy</category>
  <category>mathematics</category>
  <category>symbolic computing</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/sympy/index.html</guid>
  <pubDate>Mon, 14 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Navigating the Mathematical Marvels: Discovering the Power of Mathematics in Machine Learning</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/math-for-ml/index.html</link>
  <description><![CDATA[ 




<p>Have you ever faced the intricate challenge of transforming TensorFlow code into PyTorch, wrestling with tensor dimensions, and untangling transpose matrices in the captivating realm of machine learning? If these challenges resonate with you, my journey is bound to strike a chord, for I’ve recently embarked on an illuminating odyssey that reshaped my perception of mathematics within the context of machine learning.</p>
<p>My journey commenced with a formidable challenge: taming the convolutional neural network, specifically the U-Net architecture, in PyTorch. The mystifying dichotomy between tensor dimensions – PyTorch’s channels-first approach versus TensorFlow’s channels-last convention – spurred me to decipher the intricacies woven into these frameworks. My mission? To decode the intricate geometries of tensors and, more profoundly, master the mysterious dance of transpose matrices that orchestrates the symphony of machine learning implementations.</p>
<p>With determination in my heart, I plunged headfirst into the world of mathematics for machine learning, enrolling in not one but two comprehensive specializations on Coursera. My inaugural milestone was completing DeepLearning.ai’s Mathematics for Machine Learning. A transformative experience, this journey shifted my perspective dramatically. Guided by the remarkable teaching style of Luis Serrano, complex concepts were distilled into digestible gems, fostering a profound understanding of linear algebra, calculus, and statistics. Empowered with newfound clarity, I embarked on an expedition into the core of machine learning mathematics, armed with a versatile toolkit to confront challenges head-on.</p>
<p>But the journey was far from over; the horizon expanded further as I embarked on the Mathematics for Machine Learning specialization presented by Imperial College London. Here, the esteemed trio of Professor David Dye, Samuel J Cooper, and Marc Deisenroth ushered me through the labyrinthine corridors of mathematical intricacies, unveiling the nuances of statistics and probability. While certain segments left me grappling, perseverance emerged as my guiding light. Despite the hurdles, this specialization bolstered my mathematical arsenal, enriching my cognitive toolkit with the might of principal component analysis and the profound significance of mean and variance.</p>
<p>As I reflect upon these intertwined odysseys, I stand humbled by the transformative prowess of mathematics in the world of machine learning. Armed with two comprehensive specializations, my understanding and intuition have deepened immeasurably. I’ve gained the insight and confidence to navigate the convoluted paths of mathematical frameworks that underpin machine learning algorithms. My horizons have expanded, empowering me to embrace intricate challenges with unwavering fervor and newfound comprehension.</p>
<p>In retrospect, I find myself wondering why I didn’t embark on this enlightening journey sooner. Having already traversed the realms of Machine Learning and Deep Learning Specializations offered by DeepLearning.ai, my aspirations now gravitate toward the beckoning realms of AI for Medicine and Generative Adversarial Networks. These courses entice me with the promise of exhilarating knowledge quests.</p>
<p>As I contemplate the path that lies ahead, I’m resolute in translating my newfound mathematical insights into practical prowess. Equipped with Python and R, I am poised to elevate my understanding by applying these concepts across diverse programming languages and frameworks. My journey unfolds as a symphony in its infancy, with each note resonating with the thrill of discovery and the pledge of growth.</p>
<p>In conclusion, this expedition into the realm of mathematical marvels within machine learning has been an exhilarating escapade. It has unveiled the elegance and complexity underpinning the algorithms shaping our digital landscape. With determination propelling my sails, I eagerly anticipate the forthcoming chapter of my journey – one brimming with unparalleled growth, fresh challenges, and an enduring passion for continuous learning.</p>



 ]]></description>
  <category>mathematics</category>
  <category>machine learning</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/math-for-ml/index.html</guid>
  <pubDate>Sun, 13 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Revving Up: MPG Regression Unleashed through Deep Learning in PyTorch</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/pytorch-regression/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this article, we’ll dive into the world of deep learning with PyTorch by constructing a multiple linear regression model to predict a vehicle’s miles per gallon (MPG) based on various features. We’ll explore the preprocessing steps, model architecture, training process, and evaluation of the model’s performance.</p>
</section>
<section id="preparing-the-data-and-data-preprocessing" class="level1">
<h1>Preparing the Data and Data Preprocessing</h1>
<p>Our journey begins by loading the auto MPG dataset, which contains information about vehicle characteristics and their corresponding MPG values. We’ll focus on features like the number of cylinders, displacement, horsepower, weight, acceleration, manufacturing origin, and model year.</p>
<p>To ensure our data is suitable for training, we perform necessary preprocessing steps. We drop rows with missing values, standardize continuous features, and transform categorical features into one-hot encoded vectors.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn.model_selection</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> one_hot</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader,Dataset,TensorDataset</span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the dataset</span></span>
<span id="cb1-11">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data'</span></span>
<span id="cb1-12">column_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MPG'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cylinders'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Displacement'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Horsepower'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weight'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acceleration'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Origin'</span>]</span>
<span id="cb1-13"></span>
<span id="cb1-14">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>column_names,</span>
<span id="cb1-15">                 na_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?"</span>, comment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-16">                 sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, skipinitialspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dropping rows with missing values</span></span>
<span id="cb1-20"></span>
<span id="cb1-21">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.dropna().reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Splitting the data into train and test sets</span></span>
<span id="cb1-24">df_train, df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sklearn.model_selection.train_test_split(df, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standardizing continuous features</span></span>
<span id="cb1-27">numeric_column_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cylinders'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Displacement'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Horsepower'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weight'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acceleration'</span>]</span>
<span id="cb1-28">train_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_train.describe().transpose()</span>
<span id="cb1-29"></span>
<span id="cb1-30">df_train_norm, df_test_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_train.copy(), df_test.copy()</span>
<span id="cb1-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> numeric_column_names:</span>
<span id="cb1-32">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_stats.loc[col_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>]</span>
<span id="cb1-33">    std  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_stats.loc[col_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std'</span>]</span>
<span id="cb1-34">    df_train_norm[col_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_train_norm[col_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std</span>
<span id="cb1-35">    df_test_norm[col_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_test_norm[col_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bucketing the model year categories</span></span>
<span id="cb1-38">boundaries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">73</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">76</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">79</span>])</span>
<span id="cb1-39"> </span>
<span id="cb1-40">v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_train_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year'</span>].values)</span>
<span id="cb1-41">df_train_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year Bucketed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.bucketize(v, boundaries, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-42"></span>
<span id="cb1-43">v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_test_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year'</span>].values)</span>
<span id="cb1-44">df_test_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year Bucketed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.bucketize(v, boundaries, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-45"></span>
<span id="cb1-46">numeric_column_names.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year Bucketed'</span>)</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One-hot encoding the origin feature</span></span>
<span id="cb1-49"></span>
<span id="cb1-50">total_origin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(df_train_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Origin'</span>]))</span>
<span id="cb1-51"></span>
<span id="cb1-52">origin_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot(torch.from_numpy(df_train_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Origin'</span>].values) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> total_origin)</span>
<span id="cb1-53"></span>
<span id="cb1-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating the train and test feature and label tensors</span></span>
<span id="cb1-55"></span>
<span id="cb1-56">x_train_numeric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_train_norm[numeric_column_names].values)</span>
<span id="cb1-57">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([x_train_numeric, origin_encoded], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb1-58"> </span>
<span id="cb1-59">origin_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot(torch.from_numpy(df_test_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Origin'</span>].values) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> total_origin)</span>
<span id="cb1-60">x_test_numeric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_test_norm[numeric_column_names].values)</span>
<span id="cb1-61">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([x_test_numeric, origin_encoded], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb1-62"></span>
<span id="cb1-63"></span>
<span id="cb1-64">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_train_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MPG'</span>].values).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb1-65">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_test_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MPG'</span>].values).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb1-66"></span>
<span id="cb1-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a data loader to load the train dataset in batches</span></span>
<span id="cb1-68">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorDataset(x_train, y_train)</span>
<span id="cb1-69">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb1-70">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-71">train_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_ds, batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
</section>
<section id="building-the-dnn-regression-model" class="level1">
<h1>Building the DNN Regression Model</h1>
<p>With our data prepared, we move on to constructing our Deep Neural Network (DNN) regression model using PyTorch. This model will predict MPG values based on the vehicle’s features.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the model architecture</span></span>
<span id="cb2-2">hidden_units <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb2-3">input_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-4"></span>
<span id="cb2-5">all_layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hidden_unit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hidden_units:</span>
<span id="cb2-7">    layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(input_size, hidden_unit)</span>
<span id="cb2-8">    all_layers.append(layer)</span>
<span id="cb2-9">    all_layers.append(nn.ReLU())</span>
<span id="cb2-10">    input_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hidden_unit</span>
<span id="cb2-11"></span>
<span id="cb2-12">all_layers.append(nn.Linear(hidden_units[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-13">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>all_layers)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb2-16">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb2-17">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span></code></pre></div>
</div>
</section>
<section id="training-the-model" class="level1">
<h1>Training the Model</h1>
<p>It’s time to train our DNN regression model on the training data. We iterate through the data for a specified number of epochs, adjusting the model’s weights to minimize the mean squared error loss.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb3-2">log_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> </span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb3-5">    loss_hist_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x_batch, y_batch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> train_dl:</span>
<span id="cb3-7">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x_batch)[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-8">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(pred, y_batch)</span>
<span id="cb3-9">        loss.backward()</span>
<span id="cb3-10">        optimizer.step()</span>
<span id="cb3-11">        optimizer.zero_grad()</span>
<span id="cb3-12">        loss_hist_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> log_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  Loss </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss_hist_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dl)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 0  Loss 530.7308
Epoch 20  Loss 7.8103
Epoch 40  Loss 7.7546
Epoch 60  Loss 6.9081
Epoch 80  Loss 6.8482
Epoch 100  Loss 6.7144
Epoch 120  Loss 6.4509
Epoch 140  Loss 7.1134
Epoch 160  Loss 6.4428
Epoch 180  Loss 6.2078</code></pre>
</div>
</div>
</section>
<section id="evaluating-the-model" class="level1">
<h1>Evaluating the Model</h1>
<p>Once the model is trained, we assess its performance on the test dataset. This helps us understand how well the model generalizes to new, unseen data.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb5-2">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>())[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-3">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(pred, y_test)</span>
<span id="cb5-4">    mae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.L1Loss()(pred, y_test)</span>
<span id="cb5-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Test MSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Test MAE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test MSE: 13.1923
Test MAE: 2.6507</code></pre>
</div>
</div>
<p>Seeing the good metrics, let’s confirm by plotting the actual and predicted values</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting actual vs. predicted MPG values</span></span>
<span id="cb7-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-3">plt.scatter(y_test, pred, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>)</span>
<span id="cb7-4">plt.plot([y_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), y_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()], [y_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), y_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Perfect Prediction'</span>)</span>
<span id="cb7-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual MPG'</span>)</span>
<span id="cb7-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted MPG'</span>)</span>
<span id="cb7-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual vs. Predicted MPG Values'</span>)</span>
<span id="cb7-8">plt.legend()</span>
<span id="cb7-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/pytorch-regression/index_files/figure-html/cell-6-output-1.png" width="816" height="523"></p>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Our DNN regression model demonstrates promising results in predicting MPG values based on vehicle features. By carefully preprocessing the data, constructing an appropriate model architecture, and iteratively training the model, we achieve a model that generalizes reasonably well to new data. This article serves as a starting point for your journey into deep learning with PyTorch, enabling you to build more advanced models and tackle a variety of data analysis challenges.</p>


</section>

 ]]></description>
  <category>deep learning</category>
  <category>pytorch</category>
  <category>regression</category>
  <category>python</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/pytorch-regression/index.html</guid>
  <pubDate>Tue, 08 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>The Crucial Role of the Sigmoid Function and its Derivative in Machine Learning</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/sigmoid/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In the realm of machine learning, the sigmoid function stands as a foundational and indispensable element, playing a pivotal role in various applications such as neural networks, logistic regression, and decision-making models. Its characteristic S-shaped curve enables it to map input data to a bounded output range, making it particularly valuable for tasks involving classification, probability estimation, and activation functions. This essay explores the significance of the sigmoid function in machine learning and delves into the techniques for solving its derivative, elucidating its importance in optimizing learning processes.</p>
</section>
<section id="the-sigmoid-function-a-cornerstone-of-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="the-sigmoid-function-a-cornerstone-of-machine-learning">The Sigmoid Function: A Cornerstone of Machine Learning</h2>
<p>The sigmoid function, mathematically represented as <img src="https://latex.codecogs.com/png.latex?%5Csigma%5Cleft(x%5Cright)%20=%20%5Cfrac%7B1%7D%7B1+e%5E%7B-x%7D%7D">, transforms any input value to a range between 0 and 1. This property is particularly useful in binary classification problems, where the output is interpreted as a probability score for a particular class. In the context of neural networks, sigmoid activation functions allow neurons to fire selectively, enabling complex patterns to be captured through the network’s layers. Its continuous and differentiable nature makes it suitable for various optimization algorithms, including gradient descent.</p>
</section>
<section id="derivative-of-the-sigmoid-function-unraveling-the-complexity" class="level2">
<h2 class="anchored" data-anchor-id="derivative-of-the-sigmoid-function-unraveling-the-complexity">Derivative of the Sigmoid Function: Unraveling the Complexity</h2>
<p>One of the key aspects of utilizing the sigmoid function in machine learning is the ability to compute its derivative. The derivative provides insights into how the output of the function changes concerning variations in the input. The straightforward yet intricate nature of the sigmoid derivative, often expressed as <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5E%7B,%7D%5Cleft(x%5Cright)%20=%20%5Csigma%5Cleft(x%5Cright)%20%5Ctimes%20(1-%5Csigma%5Cleft(x%5Cright))">, has far-reaching implications for the training of neural networks and other machine learning models.</p>
</section>
<section id="solving-the-sigmoid-derivative-chain-rule-in-action" class="level2">
<h2 class="anchored" data-anchor-id="solving-the-sigmoid-derivative-chain-rule-in-action">Solving the Sigmoid Derivative: Chain Rule in Action</h2>
<p>To solve the derivative of the sigmoid function, the chain rule comes into play. The chain rule is a fundamental concept in calculus that allows us to calculate the derivative of composite functions. Applying the chain rule to the sigmoid derivative involves breaking down the complex expression into manageable components and systematically calculating their derivatives. The result,<img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5E%7B,%7D%5Cleft(x%5Cright)%20=%20%5Csigma%5Cleft(x%5Cright)%20%5Ctimes(1-%5Csigma%5Cleft(x%5Cright))"> , embodies the sigmoid function’s self-adjusting behavior, where the derivative is maximized at the inflection point (0.5) and approaches zero as the input approaches positive or negative infinity. On this note, I will like to indulge in deriving the derivative of a sigmoid, just for fun.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma%5Cleft(x%5Cright)%20=%20%5Cfrac%7B1%7D%7B1+e%5E%7B-x%7D%7D"></p>
<p>This can also be expressed as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma%5Cleft(x%5Cright)%20=%20(1+e%5E%7B-x%7D)%5E%7B-1%7D"></p>
<p>which we know differentiates, according to the chain rule, to:</p>
<p><img src="https://latex.codecogs.com/png.latex?-(1+e%5E%7B-x%7D)%5E%7B-2%7D%20%5Ctimes%20e%5E%7B-x%7D%20%5Ctimes-1"></p>
<p>which easily becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?e%5E%7B-x%7D(1+e%5E%7B-x%7D)%5E%7B-2%7D"></p>
<p>same as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Be%5E%7B-x%7D%7D%7B%5Cleft(1%20+%20e%20%5E%7B-x%7D%5Cright)%5E%7B2%7D%7D"></p>
<p>then we can rearrange by adding and subtracting 1 which in essence does nothing but add a zero:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Be%5E%7B-x%7D%7D%7B%5Cleft(1%20+%20e%20%5E%7B-x%7D%5Cright)%5E%7B2%7D%7D+%201%20-1"></p>
<p>this easily becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%20+%20e%5E%7B-x%7D-1%7D%7B%5Cleft(1+e%5E%7B-x%7D%5Cright)%5E%7B-2%7D%7D"></p>
<p>which is simply:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%20+%20e%5E%7B-x%7D%7D%7B%5Cleft(1%20+%20e%20%5E%7B-x%7D%5Cright)%5E%7B2%7D%7D%20-%20%5Cfrac%7B1%7D%7B%5Cleft(1%20+%20e%20%5E%7B-x%7D%5Cright)%5E%7B2%7D%7D"></p>
<p>which simplifies to:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B1%20+%20e%20%5E%7B-x%7D%7D%20-%20%5Cfrac%7B1%7D%7B%5Cleft(1%20+%20e%20%5E%7B-x%7D%5Cright)%5E%7B2%7D%7D"></p>
<p>factorizing we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B1%20+%20e%20%5E%7B-x%7D%7D%5Cleft(1%20-%20%5Cfrac%7B1%7D%7B1%20+%20e%20%5E%7B-x%7D%7D%5Cright)"></p>
<p>recalling that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma%5Cleft(x%5Cright)%20=%20%5Cfrac%7B1%7D%7B1+e%5E%7B-x%7D%7D"></p>
<p>our derivative is now proven to be</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5E%7B,%7D%5Cleft(x%5Cright)%20=%20%5Csigma%5Cleft(x%5Cright)%20%5Ctimes(1-%5Csigma%5Cleft(x%5Cright))"></p>
</section>
<section id="importance-of-the-sigmoid-derivative-in-optimization" class="level2">
<h2 class="anchored" data-anchor-id="importance-of-the-sigmoid-derivative-in-optimization">Importance of the Sigmoid Derivative in Optimization</h2>
<p>Understanding and utilizing the sigmoid derivative is of paramount importance in optimizing machine learning models. In neural network training, the backpropagation algorithm relies heavily on derivatives to adjust the model’s weights and biases. The sigmoid derivative guides the network’s learning process, indicating the direction and magnitude of weight adjustments needed for minimizing error. Furthermore, the sigmoid derivative helps prevent the vanishing gradient problem, ensuring that gradients remain substantial throughout the network’s layers and facilitating stable and efficient training.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In conclusion, the sigmoid function is a cornerstone of machine learning, serving as a fundamental tool for a wide range of applications. Its ability to map inputs to a bounded output range makes it indispensable in tasks such as binary classification, probability estimation, and activation functions within neural networks. Solving the derivative of the sigmoid function through the chain rule unravels its intricate nature, enabling its effective utilization in optimization processes. The sigmoid derivative’s significance in guiding neural network training, preventing the vanishing gradient problem, and enhancing model performance cannot be overstated. As machine learning continues to evolve, the sigmoid function and its derivative will undoubtedly continue to play a pivotal role in shaping the landscape of artificial intelligence and data analysis.</p>


</section>

 ]]></description>
  <category>machine learning</category>
  <category>sigmoid</category>
  <category>activation</category>
  <category>mathematics</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/sigmoid/index.html</guid>
  <pubDate>Sun, 06 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Enhancing Effective Writing: Insights from Larry McEnerney’s Leadership Lab</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/effective-writing/index.html</link>
  <description><![CDATA[ 




<p>Larry McEnerney’s Leadership Lab on effective writing delivered on May 9, 2014 began with a compelling assertion: “Shift your focus from rules to readers.” This succinctly encapsulates his core message, a crucial takeaway for the audience composed mainly of academic researchers. McEnerney aimed to dismantle prevalent misconceptions about writing, challenging notions that view it merely as a tool for conveying complex ideas or a means of thinking. While acknowledging these as valid purposes, he asserted that the primary goal of writing is to transform readers’ perspectives or worldviews, positioning the reader at the heart of the writing process.</p>
<p>Central to McEnerney’s discourse was the concept of creating writing that holds inherent value for the reader, ultimately driving change and influencing their ideas. He delved into the notion of knowledge, asserting its boundless nature and the role of field-specific experts in shaping valuable contributions. Convincing this community of experts, he emphasized, is a critical objective in writing.</p>
<p>McEnerney underscored the importance of understanding the community’s dynamics and norms, urging writers to “know the code.” This involves skillfully presenting information in a manner acceptable to the community, even incorporating praise before presenting arguments. Identifying key influencers within the community and catering to their preferences emerged as a pivotal strategy.</p>
<p>The workshop also deconstructed common motivations for writing, highlighting the nuanced nature of these reasons. McEnerney contended that while additional motives exist, academic writing’s core purpose remains convincing the community of experts.</p>
<p>An important principle that McEnerney tackled was the necessity of introducing valuable new knowledge. He transitioned to discussing the writing process itself, challenging the conventional approach of starting with a background and definitions. Instead, he advocated for commencing the introduction by outlining the problem, injecting a sense of instability and tension. Such an approach, he argued, captures readers’ attention and sets the stage for proposing elegant solutions.</p>
<p>Furthermore, McEnerney advocated employing language that accentuates instability and tension to engage readers. He suggested dramatizing issues before presenting refined solutions, catering to readers’ preference for tension-filled narratives. Additionally, he advised incorporating the language of cost and benefit, underlining the problem’s consequences in terms of monetary or other values, as well as emphasizing the benefits of adopting the proposed solution.</p>
<p>In the context of literature reviews, McEnerney positioned them as a tool to enrich and contextualize the problem. He encouraged using terms like “knowledge gap” to convey the notion that knowledge is expandable, rather than bounded. The key, he stressed, lies in demonstrating a solution’s value to the expert community, ensuring its integration into the broader body of knowledge.</p>
<p>In summary, McEnerney’s workshop wasn’t a guide to writing formats or grammar rules; its aim was to reshape the audience’s approach to writing, placing readers at the forefront. Paramount considerations included the target journal, the expert community, and the academic field’s constituents. This approach, he asserted, significantly elevates writing quality and enhances the chances of successful journal submissions.</p>
<p>For those interested, the full video of the workshop can be accessed <a href="https://www.youtube.com/watch?v=vtIzMaLkCaM&amp;t=1671s">here</a>.</p>



 ]]></description>
  <category>writing</category>
  <category>research</category>
  <category>effective writing</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/effective-writing/index.html</guid>
  <pubDate>Thu, 03 Aug 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/effective-writing/effective_writing.png" medium="image" type="image/png" height="102" width="144"/>
</item>
<item>
  <title>Arewa Data Science Academy Fellowship: A Transformative Journey to Success in Data Science</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/arewads-impact/index.html</link>
  <description><![CDATA[ 




<p>The Arewa Data Science Academy fellowship has been an exceptional journey that has profoundly shaped my life this year. In just six months, I have acquired a wealth of knowledge, leaving an indelible mark on my personal and professional growth.</p>
<p>The fellowship’s comprehensive curriculum not only covered programming and data science skills but also delved into vital areas like version control using Git. Engaging and interactive workshops provided me with hands-on experiences that deepened my understanding of this critical aspect of modern software development. Additionally, I honed my expertise in bash scripting and command-line usage, enhancing my technical proficiency.</p>
<p>An extraordinary aspect of the fellowship was its focus on sharing our learning experiences through blogging. With training in using Quarto, I mastered the art of effective scientific writing, perfecting my ability to communicate complex ideas concisely. Blogging not only allowed me to reflect on my progress but also reinforced my understanding of the concepts I was learning, solidifying my grasp on data science principles.</p>
<p>Throughout this transformative journey, our mentors played an indispensable role. Their immense talent and dedication created a supportive and encouraging environment for us to thrive. Regular updates and organization through platforms like Notion, slack and telegram ensured we never missed any valuable insights, keeping us on track and motivated.</p>
<p>Beyond technical skills, the fellowship also emphasized essential aspects of professional development, including crafting an impressive CV. With practical exercises using LaTeX, we learned to create captivating CVs that effectively showcased our capabilities. The mentors’ commitment to providing personalized feedback and constructive criticism proved invaluable in refining our CVs to perfection, preparing us for future career opportunities.</p>
<p>The Arewa Data Science Academy has been an absolute blessing, propelling me beyond the boundaries of my imagination. As a part of this prestigious fellowship, I have gained newfound confidence and a fervor for continuous learning. My technical repertoire has expanded, and I have developed a deeper sense of self-awareness and determination to succeed in the data science field.</p>
<p>Reflecting on my journey as a fellow, I am amazed by how much I have achieved in such a short time. The skills and knowledge I have acquired will undoubtedly pave the way for a bright future in data science, and I am eager to explore the limitless possibilities that lie ahead. The academy has laid a strong foundation for my ongoing pursuit of excellence, inspiring me to keep pushing my boundaries and seeking new challenges.</p>
<p>In conclusion, joining the Arewa Data Science Academy fellowship has been a pivotal moment in my life. It has equipped me with a diverse set of skills, provided a supportive network, and instilled an unwavering passion for continuous growth. I am profoundly grateful for this transformative experience and eagerly anticipate the boundless opportunities that await me on this remarkable path of learning and discovery.</p>



 ]]></description>
  <category>skills</category>
  <category>arewads</category>
  <category>git</category>
  <category>quarto</category>
  <category>writing</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/arewads-impact/index.html</guid>
  <pubDate>Sun, 30 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Endless Paths in Data Science: Insights from Claudiu Musat’s Talk on Handwriting Synthesis and Career Prospects</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/claudiu-talk/index.html</link>
  <description><![CDATA[ 




<p>After recently concluding our fellowship at Arewa Data Science Academy, we had the privilege of attending a captivating talk by Claudiu Musat, a distinguished researcher from Google. The session revolved around illuminating career prospects in data science and guiding us on our next steps in this dynamic field. In the beginning, he warmly congratulated us on reaching this significant milestone, emphasizing that embarking on our journey was in itself an achievement worth celebrating, and each step we take marks progress towards something greater.</p>
<p>The highlight of the talk was his comprehensive presentation on handwriting synthesis, tracing its origins and evolution to the cutting-edge use of transformers in the field today. He also delved into the fascinating realm of generative AI, illustrating its potential to revolutionize the world by already disrupting various aspects of life. As Claudiu skillfully articulated the technical aspects of Deep Learning and its application to problem-solving, I gained a profound understanding of how recurrent neural networks can perform awe-inspiring feats and the critical interplay between research in academia and industry.</p>
<p>An invaluable piece of advice he shared with us was the importance of not just reading research papers but actively striving to publish our own work. Moreover, he offered practical tips for aspiring data scientists like us, encouraging us to fearlessly explore, experiment, and break barriers. One idea that resonated deeply was his suggestion to “look at that TensorFlow code and try implementing it in PyTorch.” This philosophy, reminiscent of Yann LeCun’s advice to beginners, can significantly enhance one’s chances of getting noticed in the field.</p>
<p>I must express my profound gratitude for this enlightening session; I meticulously took notes and left with a wealth of actionable insights for my future endeavors. Thank you, Claudiu Musat, for inspiring and equipping us with the tools to carve out a successful path in the captivating realm of data science.</p>



 ]]></description>
  <category>research</category>
  <category>advice</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/claudiu-talk/index.html</guid>
  <pubDate>Sat, 29 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Vectorized Code: Boosting Efficiency in R</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/r-vectorized-code/index.html</link>
  <description><![CDATA[ 




<p>In the world of programming, efficiency is a golden goal. One clever technique to achieve this is using vectorized code. Vectorized code might sound complex, but it’s like a superhero power for your programs. Imagine if you could do tasks on a bunch of numbers all at once, without going through them one by one. That’s the magic of vectorized code! In this article, we’ll explore what vectorized code is, why it’s awesome, and how it makes your R programming faster and smoother.</p>
<p>So, what’s the secret sauce of vectorized code? It’s like having a bunch of superpowers rolled into one. Vectorized code is all about doing things at once – it’s like multitasking for your computer. Instead of looping over each number separately, you perform operations on whole groups of numbers in one go. This can make your R code run way faster and feel snappier.</p>
<p>Let’s imagine we’re dealing with a bunch of numbers and we want to transform them. We’ll use two functions to do this, each with its own style. One function will be the superhero – it’ll use vectorized code. The other function will be the regular person – it won’t use vectorized code, and it’ll take longer to do the same job.</p>
<section id="the-regular-approach-no-superpowers" class="level3">
<h3 class="anchored" data-anchor-id="the-regular-approach-no-superpowers">The Regular Approach: No Superpowers</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">abs_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(vec){</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(vec)) {</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (vec[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-4">      vec[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>vec[i]</span>
<span id="cb1-5">    }</span>
<span id="cb1-6">  }</span>
<span id="cb1-7">  vec</span>
<span id="cb1-8">}</span></code></pre></div>
</div>
</section>
<section id="embracing-vectorization-the-superhero" class="level3">
<h3 class="anchored" data-anchor-id="embracing-vectorization-the-superhero">Embracing Vectorization: The Superhero</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">abs_sets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(vec){</span>
<span id="cb2-2">  negs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-3">  vec[negs] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vec[negs] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-4">  vec</span>
<span id="cb2-5">}</span></code></pre></div>
</div>
<p>Now, let’s put these functions to the test. We’ve got a bunch of numbers in a variable called long.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000000</span>)</span></code></pre></div>
</div>
<p>It’s time for the showdown! We’ll measure how fast each function works.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non vectorized</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nonvectorized"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Nonvectorized"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs_loop</span>(long))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  0.744   0.059   0.803 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vectorized</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vectorized"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Vectorized"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs_sets</span>(long))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  0.198   0.091   0.289 </code></pre>
</div>
</div>
<p>The result is in – the vectorized abs_sets() function wins the race by being around three times faster! This difference gets even bigger as we deal with larger batches of numbers. Think about the time you can save when working with big sets of data. Your code becomes a speedster, and your computer can focus on more exciting things.</p>
<p>In the world of R programming, vectorization is like a secret ingredient that gives you superpowers. Since R loves working with vectors, most R functions are already set up for vectorized operations. This means using vectorization can level up your programming skills and save you time and effort.</p>
<p>To wrap it up, diving into vectorized code is like discovering a hidden treasure. Its power to tackle tasks in one swift move, without tediously looping through each item, is a game-changer. As R programming evolves, vectorization remains a steadfast companion – a guiding star in the quest for efficient and elegant coding. So, why wait? Unleash the power of vectorized code and watch your R programming prowess soar!</p>


</section>

 ]]></description>
  <category>r programming</category>
  <category>vectorization</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/r-vectorized-code/index.html</guid>
  <pubDate>Fri, 28 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Writing a Scientific Paper</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/writearticles/index.html</link>
  <description><![CDATA[ 




<p>In this post, I aim to summarize the key points from the journal article “How to Write a Scientific Article” by Barbara J. Hoogenboom and Robert C. Manske, which offers practical advice for successfully writing and submitting scientific manuscripts to peer-reviewed journals. The authors stress the significance of clear communication and effective writing skills in advancing evidence-based practice and scientific thinking. They cover various aspects of manuscript preparation, general writing tips, and important content sections.</p>
<p>The introduction emphasizes the importance of publishing research findings in peer-reviewed journals to positively impact the scientific community and clinical decision-making. The authors recognize that writing a scientific paper can be challenging, particularly for inexperienced authors due to various barriers. Nevertheless, they assert that effective writing skills can be honed with practice.</p>
<p>The article provides valuable tips on manuscript preparation and advises authors to identify a specific target journal and adhere to its submission criteria. The recommended IMRaD format (Introduction, Methods, Results, and Discussion) helps structure scientific manuscripts.</p>
<p>The authors emphasize the need for clear and accurate expression of ideas and research information. They caution against excessive use of jargon and recommend avoiding first-person language, which might contradict certain viewpoints from other sources.</p>
<p>Seeking a reading mentor and obtaining feedback on the manuscript before submission are encouraged, particularly for novice writers.</p>
<p>The article highlights the significance of using figures, graphics, and videos to enhance research presentations. Proper citation and avoiding plagiarism are deemed essential in scientific writing.</p>
<p>The content section discusses key elements like the abstract, introduction, review of literature, methods, results, discussion, and conclusions. The abstract is deemed critical as it often determines whether readers will continue reading the paper. The introduction should clearly state the research question and justify the study’s significance.</p>
<p>The methods section should provide sufficient detail for replication of the study, including mentioning ethical approval. The results section should present findings without interpretation, while the discussion section should contextualize results by comparing them with existing evidence.</p>
<p>In conclusion, the article encourages scholarly writing as a rewarding endeavor that contributes to scientific knowledge and evidence-based practice. It provides valuable insights and practical tips for authors, especially those new to scientific writing, to successfully navigate the publication process and produce high-quality manuscripts.</p>
<p>It’s worth noting that while most of the article aligns with what I learned in a “Writing in the Sciences” MOOC on Coursera, there may be some differences in opinions regarding the use of first-person language, as it can vary depending on the journal’s preferences and the author’s writing style.</p>
<section id="reference" class="level3">
<h3 class="anchored" data-anchor-id="reference">Reference</h3>
<p>Hoogenboom BJ, Manske RC. How to write a scientific article. Int J Sports Phys Ther. 2012 Oct;7(5):512-7. PMID: 23091783; PMCID: PMC3474301.</p>


</section>

 ]]></description>
  <category>scientific writing</category>
  <category>journal article</category>
  <category>research</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/writearticles/index.html</guid>
  <pubDate>Mon, 24 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Completion of Arewa Data Science Academy Fellowship</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/fellowship-conclusion/index.html</link>
  <description><![CDATA[ 




<p>It is with immense pleasure and gratitude that I announce my successful completion of the Arewa Data Science Academy fellowship. After months of unwavering dedication, deliberate practice, and continuous learning, I have achieved this milestone in my data science journey.</p>
<p>This journey would not have been possible without the help and blessings of Allah, for with His guidance, nothing is insurmountable. I would like to emphasize the significance of consistency and surrounding oneself with good companions throughout this pursuit. Additionally, I extend my heartfelt appreciation to the supportive mentors who made this entire experience more accessible and enjoyable for all of us.</p>
<p>The fellowship commenced with a comprehensive introduction to the Python programming language, laying a strong foundation for the subsequent stages of learning. We delved into the realm of machine learning, where we mastered the implementation of algorithms for both supervised and unsupervised learning, as well as reinforcement learning.</p>
<p>In addition to the core data science curriculum, we had the opportunity to enhance our overall skills by taking courses on Coursera, such as “Learning How to Learn” and “Writing in the Sciences,” which undoubtedly contributed to our growth as aspiring data scientists.</p>
<p>Furthermore, we were equipped with essential tools and technologies used in the industry, including sessions on git and GitHub for version control, LaTeX for document preparation, and blogging using Quarto and similar platforms.</p>
<p>I must confess that this fellowship has been a truly transformative experience, one that has enriched my understanding and ignited my passion for data science even more. I am thrilled to invite you all to explore my blog and GitHub repository, where I have documented my learning journey and projects.</p>
<p>I extend my deepest gratitude to the mentors and organizers of this fellowship for their unwavering support and dedication. Their guidance has been instrumental in shaping our learning and instilling the confidence in us to pursue great things in the near future.</p>
<p>With Allah’s blessings and our collective potential, I am super confident that we will achieve remarkable feats in the field of data science. Alhamdulillah!</p>
<p>Thank you all for being a part of this incredible journey.</p>



 ]]></description>
  <category>arewads</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/fellowship-conclusion/index.html</guid>
  <pubDate>Sun, 23 Jul 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/fellowship-conclusion/cert.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Solving the FizzBuzz Problem: Eight Creative Solutions in R Programming</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/fizzbuzz_r/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The FizzBuzz problem is a classic programming exercise that tests a developer’s ability to think logically and solve a simple but often misunderstood challenge. I have written previously about the FizzBuzz challenge here and here. In this article, we will explore ten creative solutions to the FizzBuzz problem using the R programming language. These solutions will demonstrate different approaches, from basic conditional statements to more advanced techniques, showcasing the versatility and power of R.</p>
<section id="solution-1-traditional-approach-with-conditional-statements" class="level2">
<h2 class="anchored" data-anchor-id="solution-1-traditional-approach-with-conditional-statements">Solution 1: Traditional Approach with Conditional Statements:</h2>
<p>This solution follows the traditional FizzBuzz approach, utilizing conditional statements to check divisibility and printing the appropriate output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 1: Traditional Approach with Conditional Statements</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)</span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)</span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)</span>
<span id="cb1-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb1-11">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] "Fizz"
[1] 4
[1] "Buzz"
[1] "Fizz"
[1] 7
[1] 8
[1] "Fizz"
[1] "Buzz"
[1] 11
[1] "Fizz"
[1] 13
[1] 14
[1] "FizzBuzz"
[1] 16
[1] 17
[1] "Fizz"
[1] 19
[1] "Buzz"
[1] "Fizz"
[1] 22
[1] 23
[1] "Fizz"
[1] "Buzz"
[1] 26
[1] "Fizz"
[1] 28
[1] 29
[1] "FizzBuzz"
[1] 31
[1] 32
[1] "Fizz"
[1] 34
[1] "Buzz"
[1] "Fizz"
[1] 37
[1] 38
[1] "Fizz"
[1] "Buzz"
[1] 41
[1] "Fizz"
[1] 43
[1] 44
[1] "FizzBuzz"
[1] 46
[1] 47
[1] "Fizz"
[1] 49
[1] "Buzz"
[1] "Fizz"
[1] 52
[1] 53
[1] "Fizz"
[1] "Buzz"
[1] 56
[1] "Fizz"
[1] 58
[1] 59
[1] "FizzBuzz"
[1] 61
[1] 62
[1] "Fizz"
[1] 64
[1] "Buzz"
[1] "Fizz"
[1] 67
[1] 68
[1] "Fizz"
[1] "Buzz"
[1] 71
[1] "Fizz"
[1] 73
[1] 74
[1] "FizzBuzz"
[1] 76
[1] 77
[1] "Fizz"
[1] 79
[1] "Buzz"
[1] "Fizz"
[1] 82
[1] 83
[1] "Fizz"
[1] "Buzz"
[1] 86
[1] "Fizz"
[1] 88
[1] 89
[1] "FizzBuzz"
[1] 91
[1] 92
[1] "Fizz"
[1] 94
[1] "Buzz"
[1] "Fizz"
[1] 97
[1] 98
[1] "Fizz"
[1] "Buzz"</code></pre>
</div>
</div>
</section>
<section id="solution-2-vectorized-solution-using-modulo-operator" class="level2">
<h2 class="anchored" data-anchor-id="solution-2-vectorized-solution-using-modulo-operator">Solution 2: Vectorized Solution using Modulo Operator:</h2>
<p>Leveraging the vectorized capabilities of R, this solution employs the modulo operator to check divisibility for multiple inputs simultaneously, resulting in efficient code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 2: Vectorized Solution using Modulo Operator</span></span>
<span id="cb3-2">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb3-3">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(numbers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>,</span>
<span id="cb3-4">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(numbers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>,</span>
<span id="cb3-5">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(numbers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>, numbers)))</span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "1"        "2"        "Fizz"     "4"        "Buzz"     "Fizz"    
  [7] "7"        "8"        "Fizz"     "Buzz"     "11"       "Fizz"    
 [13] "13"       "14"       "FizzBuzz" "16"       "17"       "Fizz"    
 [19] "19"       "Buzz"     "Fizz"     "22"       "23"       "Fizz"    
 [25] "Buzz"     "26"       "Fizz"     "28"       "29"       "FizzBuzz"
 [31] "31"       "32"       "Fizz"     "34"       "Buzz"     "Fizz"    
 [37] "37"       "38"       "Fizz"     "Buzz"     "41"       "Fizz"    
 [43] "43"       "44"       "FizzBuzz" "46"       "47"       "Fizz"    
 [49] "49"       "Buzz"     "Fizz"     "52"       "53"       "Fizz"    
 [55] "Buzz"     "56"       "Fizz"     "58"       "59"       "FizzBuzz"
 [61] "61"       "62"       "Fizz"     "64"       "Buzz"     "Fizz"    
 [67] "67"       "68"       "Fizz"     "Buzz"     "71"       "Fizz"    
 [73] "73"       "74"       "FizzBuzz" "76"       "77"       "Fizz"    
 [79] "79"       "Buzz"     "Fizz"     "82"       "83"       "Fizz"    
 [85] "Buzz"     "86"       "Fizz"     "88"       "89"       "FizzBuzz"
 [91] "91"       "92"       "Fizz"     "94"       "Buzz"     "Fizz"    
 [97] "97"       "98"       "Fizz"     "Buzz"    </code></pre>
</div>
</div>
</section>
<section id="solution-3-recursive-function-approach" class="level2">
<h2 class="anchored" data-anchor-id="solution-3-recursive-function-approach">Solution 3: Recursive Function Approach</h2>
<p>This solution showcases the elegance of recursion by defining a recursive function that outputs the FizzBuzz sequence.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 3: Recursive Function Approach</span></span>
<span id="cb5-2">fizzbuzz <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb5-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>()</span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzbuzz</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)</span>
<span id="cb5-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)</span>
<span id="cb5-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)</span>
<span id="cb5-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb5-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(n)</span>
<span id="cb5-14">}</span>
<span id="cb5-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzbuzz</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] "Fizz"
[1] 4
[1] "Buzz"
[1] "Fizz"
[1] 7
[1] 8
[1] "Fizz"
[1] "Buzz"
[1] 11
[1] "Fizz"
[1] 13
[1] 14
[1] "FizzBuzz"
[1] 16
[1] 17
[1] "Fizz"
[1] 19
[1] "Buzz"
[1] "Fizz"
[1] 22
[1] 23
[1] "Fizz"
[1] "Buzz"
[1] 26
[1] "Fizz"
[1] 28
[1] 29
[1] "FizzBuzz"
[1] 31
[1] 32
[1] "Fizz"
[1] 34
[1] "Buzz"
[1] "Fizz"
[1] 37
[1] 38
[1] "Fizz"
[1] "Buzz"
[1] 41
[1] "Fizz"
[1] 43
[1] 44
[1] "FizzBuzz"
[1] 46
[1] 47
[1] "Fizz"
[1] 49
[1] "Buzz"
[1] "Fizz"
[1] 52
[1] 53
[1] "Fizz"
[1] "Buzz"
[1] 56
[1] "Fizz"
[1] 58
[1] 59
[1] "FizzBuzz"
[1] 61
[1] 62
[1] "Fizz"
[1] 64
[1] "Buzz"
[1] "Fizz"
[1] 67
[1] 68
[1] "Fizz"
[1] "Buzz"
[1] 71
[1] "Fizz"
[1] 73
[1] 74
[1] "FizzBuzz"
[1] 76
[1] 77
[1] "Fizz"
[1] 79
[1] "Buzz"
[1] "Fizz"
[1] 82
[1] 83
[1] "Fizz"
[1] "Buzz"
[1] 86
[1] "Fizz"
[1] 88
[1] 89
[1] "FizzBuzz"
[1] 91
[1] 92
[1] "Fizz"
[1] 94
[1] "Buzz"
[1] "Fizz"
[1] 97
[1] 98
[1] "Fizz"
[1] "Buzz"</code></pre>
</div>
</div>
</section>
<section id="solution-4-ternary-operators-for-concise-code" class="level2">
<h2 class="anchored" data-anchor-id="solution-4-ternary-operators-for-concise-code">Solution 4: Ternary Operators for Concise Code:</h2>
<p>By employing the ternary operator, this solution achieves concise code by condensing conditional statements into a single line.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 4: Ternary Operators for Concise Code</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>,</span>
<span id="cb7-4">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>,</span>
<span id="cb7-5">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>, i))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] "Fizz"
[1] 4
[1] "Buzz"
[1] "Fizz"
[1] 7
[1] 8
[1] "Fizz"
[1] "Buzz"
[1] 11
[1] "Fizz"
[1] 13
[1] 14
[1] "FizzBuzz"
[1] 16
[1] 17
[1] "Fizz"
[1] 19
[1] "Buzz"
[1] "Fizz"
[1] 22
[1] 23
[1] "Fizz"
[1] "Buzz"
[1] 26
[1] "Fizz"
[1] 28
[1] 29
[1] "FizzBuzz"
[1] 31
[1] 32
[1] "Fizz"
[1] 34
[1] "Buzz"
[1] "Fizz"
[1] 37
[1] 38
[1] "Fizz"
[1] "Buzz"
[1] 41
[1] "Fizz"
[1] 43
[1] 44
[1] "FizzBuzz"
[1] 46
[1] 47
[1] "Fizz"
[1] 49
[1] "Buzz"
[1] "Fizz"
[1] 52
[1] 53
[1] "Fizz"
[1] "Buzz"
[1] 56
[1] "Fizz"
[1] 58
[1] 59
[1] "FizzBuzz"
[1] 61
[1] 62
[1] "Fizz"
[1] 64
[1] "Buzz"
[1] "Fizz"
[1] 67
[1] 68
[1] "Fizz"
[1] "Buzz"
[1] 71
[1] "Fizz"
[1] 73
[1] 74
[1] "FizzBuzz"
[1] 76
[1] 77
[1] "Fizz"
[1] 79
[1] "Buzz"
[1] "Fizz"
[1] 82
[1] 83
[1] "Fizz"
[1] "Buzz"
[1] 86
[1] "Fizz"
[1] 88
[1] 89
[1] "FizzBuzz"
[1] 91
[1] 92
[1] "Fizz"
[1] 94
[1] "Buzz"
[1] "Fizz"
[1] 97
[1] 98
[1] "Fizz"
[1] "Buzz"</code></pre>
</div>
</div>
</section>
<section id="solution-5-utilizing-the-ifelse-function" class="level2">
<h2 class="anchored" data-anchor-id="solution-5-utilizing-the-ifelse-function">Solution 5: Utilizing the ifelse() Function:</h2>
<p>The ifelse() function in R allows for concise and efficient conditional statements. This solution demonstrates its use to solve the FizzBuzz problem.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 5: Utilizing the `ifelse()` Function</span></span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb9-3">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>,</span>
<span id="cb9-4">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>,</span>
<span id="cb9-5">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>, i)))</span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb9-7">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] "Fizz"
[1] 4
[1] "Buzz"
[1] "Fizz"
[1] 7
[1] 8
[1] "Fizz"
[1] "Buzz"
[1] 11
[1] "Fizz"
[1] 13
[1] 14
[1] "FizzBuzz"
[1] 16
[1] 17
[1] "Fizz"
[1] 19
[1] "Buzz"
[1] "Fizz"
[1] 22
[1] 23
[1] "Fizz"
[1] "Buzz"
[1] 26
[1] "Fizz"
[1] 28
[1] 29
[1] "FizzBuzz"
[1] 31
[1] 32
[1] "Fizz"
[1] 34
[1] "Buzz"
[1] "Fizz"
[1] 37
[1] 38
[1] "Fizz"
[1] "Buzz"
[1] 41
[1] "Fizz"
[1] 43
[1] 44
[1] "FizzBuzz"
[1] 46
[1] 47
[1] "Fizz"
[1] 49
[1] "Buzz"
[1] "Fizz"
[1] 52
[1] 53
[1] "Fizz"
[1] "Buzz"
[1] 56
[1] "Fizz"
[1] 58
[1] 59
[1] "FizzBuzz"
[1] 61
[1] 62
[1] "Fizz"
[1] 64
[1] "Buzz"
[1] "Fizz"
[1] 67
[1] 68
[1] "Fizz"
[1] "Buzz"
[1] 71
[1] "Fizz"
[1] 73
[1] 74
[1] "FizzBuzz"
[1] 76
[1] 77
[1] "Fizz"
[1] 79
[1] "Buzz"
[1] "Fizz"
[1] 82
[1] 83
[1] "Fizz"
[1] "Buzz"
[1] 86
[1] "Fizz"
[1] 88
[1] 89
[1] "FizzBuzz"
[1] 91
[1] 92
[1] "Fizz"
[1] 94
[1] "Buzz"
[1] "Fizz"
[1] 97
[1] 98
[1] "Fizz"
[1] "Buzz"</code></pre>
</div>
</div>
</section>
<section id="solution-6-functional-programming-approach-with-purrr-package" class="level2">
<h2 class="anchored" data-anchor-id="solution-6-functional-programming-approach-with-purrr-package">Solution 6: Functional Programming Approach with purrr Package</h2>
<p>Leveraging the power of functional programming, this solution utilizes the map() function from the purrr package to solve the FizzBuzz problem.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 6: Functional Programming Approach with `purrr` Package</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) {</span>
<span id="cb11-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)</span>
<span id="cb11-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)</span>
<span id="cb11-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)</span>
<span id="cb11-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb11-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(i)</span>
<span id="cb11-12">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] "Fizz"

[[4]]
[1] 4

[[5]]
[1] "Buzz"

[[6]]
[1] "Fizz"

[[7]]
[1] 7

[[8]]
[1] 8

[[9]]
[1] "Fizz"

[[10]]
[1] "Buzz"

[[11]]
[1] 11

[[12]]
[1] "Fizz"

[[13]]
[1] 13

[[14]]
[1] 14

[[15]]
[1] "FizzBuzz"

[[16]]
[1] 16

[[17]]
[1] 17

[[18]]
[1] "Fizz"

[[19]]
[1] 19

[[20]]
[1] "Buzz"

[[21]]
[1] "Fizz"

[[22]]
[1] 22

[[23]]
[1] 23

[[24]]
[1] "Fizz"

[[25]]
[1] "Buzz"

[[26]]
[1] 26

[[27]]
[1] "Fizz"

[[28]]
[1] 28

[[29]]
[1] 29

[[30]]
[1] "FizzBuzz"

[[31]]
[1] 31

[[32]]
[1] 32

[[33]]
[1] "Fizz"

[[34]]
[1] 34

[[35]]
[1] "Buzz"

[[36]]
[1] "Fizz"

[[37]]
[1] 37

[[38]]
[1] 38

[[39]]
[1] "Fizz"

[[40]]
[1] "Buzz"

[[41]]
[1] 41

[[42]]
[1] "Fizz"

[[43]]
[1] 43

[[44]]
[1] 44

[[45]]
[1] "FizzBuzz"

[[46]]
[1] 46

[[47]]
[1] 47

[[48]]
[1] "Fizz"

[[49]]
[1] 49

[[50]]
[1] "Buzz"

[[51]]
[1] "Fizz"

[[52]]
[1] 52

[[53]]
[1] 53

[[54]]
[1] "Fizz"

[[55]]
[1] "Buzz"

[[56]]
[1] 56

[[57]]
[1] "Fizz"

[[58]]
[1] 58

[[59]]
[1] 59

[[60]]
[1] "FizzBuzz"

[[61]]
[1] 61

[[62]]
[1] 62

[[63]]
[1] "Fizz"

[[64]]
[1] 64

[[65]]
[1] "Buzz"

[[66]]
[1] "Fizz"

[[67]]
[1] 67

[[68]]
[1] 68

[[69]]
[1] "Fizz"

[[70]]
[1] "Buzz"

[[71]]
[1] 71

[[72]]
[1] "Fizz"

[[73]]
[1] 73

[[74]]
[1] 74

[[75]]
[1] "FizzBuzz"

[[76]]
[1] 76

[[77]]
[1] 77

[[78]]
[1] "Fizz"

[[79]]
[1] 79

[[80]]
[1] "Buzz"

[[81]]
[1] "Fizz"

[[82]]
[1] 82

[[83]]
[1] 83

[[84]]
[1] "Fizz"

[[85]]
[1] "Buzz"

[[86]]
[1] 86

[[87]]
[1] "Fizz"

[[88]]
[1] 88

[[89]]
[1] 89

[[90]]
[1] "FizzBuzz"

[[91]]
[1] 91

[[92]]
[1] 92

[[93]]
[1] "Fizz"

[[94]]
[1] 94

[[95]]
[1] "Buzz"

[[96]]
[1] "Fizz"

[[97]]
[1] 97

[[98]]
[1] 98

[[99]]
[1] "Fizz"

[[100]]
[1] "Buzz"</code></pre>
</div>
</div>
</section>
</section>
<section id="solution-7-creating-a-lookup-table" class="level1">
<h1>Solution 7: Creating a Lookup Table</h1>
<p>By creating a lookup table using a data frame or a named vector, this solution simplifies the FizzBuzz logic and enhances code readability.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 7: Creating a Lookup Table</span></span>
<span id="cb13-2">lookup_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">number =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">result =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb13-3">lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result[lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span></span>
<span id="cb13-4">lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result[lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span></span>
<span id="cb13-5">lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result[lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span></span>
<span id="cb13-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "1"        "2"        "Fizz"     "4"        "Buzz"     "Fizz"    
  [7] "7"        "8"        "Fizz"     "Buzz"     "11"       "Fizz"    
 [13] "13"       "14"       "FizzBuzz" "16"       "17"       "Fizz"    
 [19] "19"       "Buzz"     "Fizz"     "22"       "23"       "Fizz"    
 [25] "Buzz"     "26"       "Fizz"     "28"       "29"       "FizzBuzz"
 [31] "31"       "32"       "Fizz"     "34"       "Buzz"     "Fizz"    
 [37] "37"       "38"       "Fizz"     "Buzz"     "41"       "Fizz"    
 [43] "43"       "44"       "FizzBuzz" "46"       "47"       "Fizz"    
 [49] "49"       "Buzz"     "Fizz"     "52"       "53"       "Fizz"    
 [55] "Buzz"     "56"       "Fizz"     "58"       "59"       "FizzBuzz"
 [61] "61"       "62"       "Fizz"     "64"       "Buzz"     "Fizz"    
 [67] "67"       "68"       "Fizz"     "Buzz"     "71"       "Fizz"    
 [73] "73"       "74"       "FizzBuzz" "76"       "77"       "Fizz"    
 [79] "79"       "Buzz"     "Fizz"     "82"       "83"       "Fizz"    
 [85] "Buzz"     "86"       "Fizz"     "88"       "89"       "FizzBuzz"
 [91] "91"       "92"       "Fizz"     "94"       "Buzz"     "Fizz"    
 [97] "97"       "98"       "Fizz"     "Buzz"    </code></pre>
</div>
</div>
<section id="solution-8-functional-reactive-programming-with-shiny" class="level2">
<h2 class="anchored" data-anchor-id="solution-8-functional-reactive-programming-with-shiny">Solution 8: Functional Reactive Programming with Shiny</h2>
<p>This solution showcases the power of Shiny, an R package for web application development, by building an interactive FizzBuzz generator.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 8: Functional Reactive Programmming with Shiny</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb15-3"></span>
<span id="cb15-4">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter a number:"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"result"</span>)</span>
<span id="cb15-7">)</span>
<span id="cb15-8"></span>
<span id="cb15-9">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output) {</span>
<span id="cb15-10">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb15-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)</span>
<span id="cb15-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)</span>
<span id="cb15-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)</span>
<span id="cb15-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb15-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n)</span>
<span id="cb15-19">  })</span>
<span id="cb15-20">}</span>
<span id="cb15-21"></span>
<span id="cb15-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion:</h1>
<p>The FizzBuzz problem provides an excellent opportunity to explore various programming techniques in R, ranging from basic conditional statements to advanced functional programming concepts. By presenting eight diverse solutions, this article aimed to demonstrate the flexibility and creativity that R offers when solving coding challenges. Each approach offers a unique perspective and highlights different aspects of the R language, allowing developers to expand their knowledge and problem-solving skills. Whether you are a beginner or an experienced R programmer, these solutions provide valuable insights into the multiple ways to tackle the FizzBuzz problem in R.</p>


</section>

 ]]></description>
  <category>r programming</category>
  <category>fizzbuzz</category>
  <category>loops</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/fizzbuzz_r/index.html</guid>
  <pubDate>Sun, 18 Jun 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Harnessing the Power of Natural Language Processing: A Guide to Python and R Packages and Practical Use-Cases</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/nlp/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In today’s digital age, the sheer volume of text-based data being generated has grown exponentially. Extracting meaningful insights and knowledge from this vast amount of information is a daunting task, however, Natural Language Processing (NLP) offers a solution. NLP combines artificial intelligence, computational linguistics, and computer science to enable computers to understand, interpret, and generate human language. In this article, we will explore popular Python and R packages (as both languages are dear to my heart) for NLP and delve into some practical use-cases that demonstrate the power of this technology.</p>
</section>
<section id="python-packages-for-nlp" class="level2">
<h2 class="anchored" data-anchor-id="python-packages-for-nlp">Python Packages for NLP</h2>
<ol type="1">
<li><p>NLTK (Natural Language Toolkit): NLTK is a comprehensive library that provides a wide range of tools and algorithms for NLP tasks. It offers functionalities for tokenization, stemming, lemmatization, part-of-speech tagging, named entity recognition, sentiment analysis, and much more. NLTK is an excellent choice for beginners due to its extensive documentation and user-friendly interfaces.</p></li>
<li><p>spaCy:</p></li>
</ol>
<p>spaCy is a powerful and efficient library for NLP tasks. It is designed to be fast and scalable, making it suitable for processing large volumes of text. spaCy provides pre-trained models for various languages, allowing users to perform tasks such as tokenization, entity recognition, dependency parsing, and text classification with ease.</p>
<ol start="3" type="1">
<li>TextBlob :</li>
</ol>
<p>TextBlob is a simple and intuitive library built on top of NLTK. It provides an easy-to-use API for common NLP tasks, including sentiment analysis, part-of-speech tagging, noun phrase extraction, translation, and more. TextBlob also includes a sentiment lexicon and can be extended with custom models.</p>
</section>
<section id="r-packages-for-nlp" class="level2">
<h2 class="anchored" data-anchor-id="r-packages-for-nlp">R Packages for NLP</h2>
<ol type="1">
<li><p>tm (Text Mining Package): The tm package is a popular choice for text mining and NLP in R. It offers functions for data preprocessing, such as text cleaning, tokenization, and stemming. The package also provides convenient utilities for creating document-term matrices and performing various text mining operations like topic modeling and sentiment analysis.</p></li>
<li><p>tidytext:</p></li>
</ol>
<p>tidytext is an R package that leverages the principles of tidy data and the tidyverse ecosystem for NLP tasks. It provides a consistent and straightforward interface for working with text data, allowing users to perform operations like tokenization, n-gram creation, sentiment analysis, and term frequency-inverse document frequency (TF-IDF) calculations.</p>
<ol start="3" type="1">
<li>NLP:</li>
</ol>
<p>The NLP package in R provides a broad set of functionalities for natural language processing. It includes tools for part-of-speech tagging, named entity recognition, tokenization, stemming, and sentiment analysis. The package also offers utilities for creating word clouds, visualizing term frequencies, and exploring co-occurrence networks.</p>
</section>
<section id="practical-use-cases-of-nlp" class="level2">
<h2 class="anchored" data-anchor-id="practical-use-cases-of-nlp">Practical Use-Cases of NLP</h2>
<ol type="1">
<li><p>Sentiment Analysis: NLP allows us to analyze sentiment from text data, enabling businesses to understand customer opinions, evaluate product reviews, and gauge public sentiment towards brands. By using sentiment analysis, companies can make data-driven decisions to improve their products and services, enhance customer satisfaction, and manage their online reputation effectively.</p></li>
<li><p>Text Classification:</p></li>
</ol>
<p>NLP techniques can be employed for automatic text classification, where documents are categorized into predefined classes. This has various applications, such as spam email detection, sentiment-based classification, topic categorization, and content filtering. Text classification helps in organizing and retrieving information efficiently, saving time and effort.</p>
<ol start="3" type="1">
<li>Named Entity Recognition (NER) cont’d:</li>
</ol>
<p>NER allows for the extraction of key information from large volumes of text, aiding in tasks like information retrieval, knowledge graph construction, and data integration. For example, in the healthcare industry, NER can be used to identify medical entities from clinical records, enabling better patient care and medical research.</p>
<ol start="4" type="1">
<li>Machine Translation:</li>
</ol>
<p>NLP plays a pivotal role in machine translation, making it possible to automatically translate text from one language to another. This has immense practical value in global communication, cross-border collaborations, and content localization. Machine translation systems like Google Translate leverage NLP techniques to deliver accurate and fluent translations.</p>
<ol start="5" type="1">
<li>Chatbots and Virtual Assistants:</li>
</ol>
<p>Natural Language Processing is at the core of chatbot and virtual assistant technology. These AI-powered systems can understand and respond to human queries, provide customer support, and automate routine tasks. NLP enables chatbots to process and interpret natural language inputs, generating relevant and context-aware responses, enhancing user experiences.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Natural Language Processing has revolutionized the way we interact with text-based data. With the availability of powerful Python and R packages, NLP tasks have become more accessible for people with limited programming skills and the tasks have become more efficient too. Packages like NLTK, spaCy, TextBlob, tm, tidytext, and NLP offer a rich set of tools and functionalities for various NLP tasks. From sentiment analysis and text classification to named entity recognition and machine translation, NLP has practical applications across industries, including customer feedback analysis, information extraction, and automated language processing systems.</p>
<p>As NLP continues to advance, we can expect even more sophisticated algorithms and techniques to emerge, further enhancing our ability to extract valuable insights from text data. Whether it’s analyzing customer sentiments, automating language processing tasks, or building intelligent chatbots, NLP opens up a world of possibilities for businesses and researchers alike. By harnessing the power of NLP and leveraging the diverse range of Python and R packages available, we can unlock the full potential of natural language understanding and pave the way for a more connected and intelligent future.</p>


</section>

 ]]></description>
  <category>natural language processing</category>
  <category>python</category>
  <category>r</category>
  <category>packages</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/nlp/index.html</guid>
  <pubDate>Mon, 12 Jun 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/nlp/nlp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>JavaScript FizzBuzz Solutions</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/fizzbuzz-javascript/index.html</link>
  <description><![CDATA[ 




<p>FizzBuzz is a common programming problem that is often used as an exercise in basic programming logic and algorithm development. The problem is typically presented as follows:</p>
<blockquote class="blockquote">
<p>Write a program that prints the numbers from 1 to 100. For multiples of three, print “Fizz” instead of the number, and for multiples of five, print “Buzz” instead of the number. For numbers that are multiples of both three and five, print “FizzBuzz”.</p>
</blockquote>
<p>In essence, the FizzBuzz problem requires the programmer to loop through a sequence of numbers, identify which ones are multiples of 3, 5, or both, and print the appropriate text instead of the number. The problem is often used as a simple test of a programmer’s ability to use loops, conditionals, and basic programming concepts like variables and functions. It can be solved using a variety of programming languages, and is often used as an interview question for entry-level software development positions.</p>
<p>In this article, I present, as a follow-up to my Python article, 15 different solutions to the FizzBuzz problem in the JavaScript programming language. This is to highlight the flair of JavaScript.</p>
<p>Here are 15 cool FizzBuzz solutions in JavaScript:</p>
<ul>
<li>Using a for loop and if/else statements:</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">  }</span>
<span id="cb1-11">}</span></code></pre></div>
<ul>
<li>Using a for loop and a switch statement:</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb2-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-4">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-7">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-10">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-13">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-14">  }</span>
<span id="cb2-15">}</span></code></pre></div>
<ul>
<li>Using a while loop and a ternary operator:</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb3-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(</span>
<span id="cb3-4">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-5">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-6">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-7">    i</span>
<span id="cb3-8">  )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">  i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb3-10">}</span></code></pre></div>
<ul>
<li>Using recursion:</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(num) {</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-4">  }</span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-6">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(</span>
<span id="cb4-7">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-8">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-9">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-10">    num</span>
<span id="cb4-11">  )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12">}</span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<ul>
<li>Using Array.from() and map():</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>({ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb5-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (</span>
<span id="cb5-4">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-5">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-6">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-7">    num</span>
<span id="cb5-8">  )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-9">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<ul>
<li>Using a do-while loop and a conditional operator:</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> {</span>
<span id="cb6-3">  i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb6-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5">} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<ul>
<li>Using a for loop and an object to store the strings:</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> strings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb7-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> strings) {</span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb7-6">      output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> strings[key]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7">    }</span>
<span id="cb7-8">  }</span>
<span id="cb7-9">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-10">}</span></code></pre></div>
<ul>
<li>Using recursion and an array to store the strings:</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> fizzBuzzStrings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(num) {</span>
<span id="cb8-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-5">  }</span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(fizzBuzzStrings[num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> num)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-8">}</span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<ul>
<li>Using a for loop and a template literal:</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb9-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}${</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3">}</span></code></pre></div>
<ul>
<li>Using a for loop and a function to generate the output:</li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generateOutput</span>(num) {</span>
<span id="cb10-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb10-4">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-5">  }</span>
<span id="cb10-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb10-7">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-8">  }</span>
<span id="cb10-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-10">}</span>
<span id="cb10-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb10-12">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generateOutput</span>(i))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-13">}</span></code></pre></div>
<ul>
<li>Using a for loop and a nested ternary operator:</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb11-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> i))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-3">}</span></code></pre></div>
<ul>
<li>Using a for loop and an array to store the numbers and strings:</li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>({ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-2">arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>((num) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb12-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>][num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> output2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>][num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}${</span>output2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> num)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-6">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<ul>
<li>Using a for loop and a self-invoking function to generate the output:</li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb13-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>((<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> () {</span>
<span id="cb13-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb13-5">      output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-6">    }</span>
<span id="cb13-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb13-8">      output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-9">    }</span>
<span id="cb13-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-11">  })())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-12">}</span></code></pre></div>
<ul>
<li>Using a for loop and two switch statements:</li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb14-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-4">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb14-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-6">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-7">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-9">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-10">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-11">      }</span>
<span id="cb14-12">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-14">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-15">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-17">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-18">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-19">  }</span>
<span id="cb14-20">}</span></code></pre></div>
<ul>
<li>Using a for loop and a map() method to generate the output:</li>
</ul>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb15-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb15-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>][i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(output)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-4">}</span></code></pre></div>
<p>In conclusion, there are several ways to approach the FizzBuzz problem in JavaScript and I present just 15 above. As you learn new programming languages, try solving problems in different creative ways as this can boost your understanding of the new programming language and your grounding in programming in general.</p>



 ]]></description>
  <category>javascript</category>
  <category>programming</category>
  <category>loops</category>
  <category>fizzbuzz</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/fizzbuzz-javascript/index.html</guid>
  <pubDate>Sat, 13 May 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>From Data to Insight: Visualizing Quantities, Proportions, Relationships, and Distributions with Python’s Matplotlib and Seaborn</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/visualization/index.html</link>
  <description><![CDATA[ 




<p>Data visualization is a crucial part of data analysis as it aids in our ability to comprehend and convey to a larger audience complicated data correlations, patterns, and insights. Thanks to its potent modules, such as Matplotlib and Seaborn, Python has gained popularity as a language for data visualization. In this post, we’ll look at how to visualize quantities, proportions, relationships, and distributions using these libraries and how to get useful insights out of them.</p>
<section id="visualizing-quantities" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-quantities">Visualizing Quantities</h2>
<p>Any information that is measurable and able to be expressed numerically is considered quantitative. Understanding the distribution and dispersion of values, the existence of outliers, and the link between various variables is made easier by visualizing quantitative data.</p>
<p>Histograms are one of the most used tools for visualizing quantitative data. A graph that displays the frequency distribution of a collection of continuous data is called a histogram. Histograms can be easily made with only a few lines of code thanks to Matplotlib and Seaborn. Let’s look at an illustration:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"></span>
<span id="cb1-5">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a histogram using Matplotlib</span></span>
<span id="cb1-8">plt.hist(data, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Histogram of Random Data'</span>)</span>
<span id="cb1-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb1-11">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb1-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-2-output-1.png" width="585" height="449"></p>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a histogram using Seaborn</span></span>
<span id="cb2-2">sns.histplot(data, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Histogram of Random Data'</span>)</span>
<span id="cb2-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb2-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb2-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-3-output-1.png" width="585" height="449"></p>
</div>
</div>
<p>Using NumPy’s random.normal function, we produce some random data in this example. Then, we use Matplotlib and Seaborn to produce two histograms, one using each program. While the histograms generated by the two libraries are comparable, Seaborn’s histplot function includes a few more capabilities, such as the ability to plot a KDE (Kernel Density Estimate) in addition to the histogram.</p>
</section>
<section id="visualizing-proportions" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-proportions">Visualizing Proportions</h2>
<p>Any information that may be stated as a percentage or a fraction of a whole is considered proportional data. Understanding the relative sizes of several categories or groups and how they affect the overall picture is made easier with the aid of proportional data visualization. Using a pie chart, donut chart, or waffle chart, you can see proportions.</p>
<p>Pie charts are one of the most commonly used tools for representing proportional data. A circular graph called a pie chart demonstrates the proportional breakdown of a group of categorical data. Both Matplotlib and Seaborn provide pie chart creation routines. Let’s look at an illustration:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>]</span>
<span id="cb3-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>]</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a pie chart using Matplotlib</span></span>
<span id="cb3-5">plt.pie(data, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels)</span>
<span id="cb3-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Proportional Data'</span>)</span>
<span id="cb3-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-4-output-1.png" width="389" height="409"></p>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a pie chart using Seaborn</span></span>
<span id="cb4-2">sns.set_style(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'whitegrid'</span>)</span>
<span id="cb4-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Proportional Data'</span>)</span>
<span id="cb4-4">sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pastel'</span>)</span>
<span id="cb4-5">plt.pie(data, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sns.color_palette())</span>
<span id="cb4-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-5-output-1.png" width="389" height="409"></p>
</div>
</div>
<p>In this illustration, we generate a set of labels and random data. After that, we use Seaborn and Matplotlib, respectively, to construct two pie charts. We can color-code each category using a specified palette thanks to Seaborn’s color_palette function.</p>
</section>
<section id="visualizing-relationships" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-relationships">Visualizing Relationships</h2>
<p>Any data that demonstrates the connection between two or more variables is referred to as relationship data. Visualizing connection data enables us to comprehend the correlation, directionality, and linear or nonlinear nature of the relationship.</p>
<p>Scatter plots are among the most commonly used tools for displaying relationship data. An illustration of the relationship between two sets of data is a scatter plot. Both Matplotlib and Seaborn include tools for making scatter plots. Let’s look at an illustration:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create some random data</span></span>
<span id="cb5-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb5-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a scatter plot using Matplotlib</span></span>
<span id="cb5-6">plt.scatter(x, y)</span>
<span id="cb5-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Scatter Plot of Random Data'</span>)</span>
<span id="cb5-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<span id="cb5-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="cb5-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-6-output-1.png" width="587" height="449"></p>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a scatter plot using Seaborn</span></span>
<span id="cb6-2">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span>
<span id="cb6-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Scatter Plot of Random Data'</span>)</span>
<span id="cb6-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<span id="cb6-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="cb6-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-7-output-1.png" width="587" height="449"></p>
</div>
</div>
<p>In this illustration, we generate the random data sets x and y. Then, we use Matplotlib and Seaborn to construct two scatter plots, one using each program. The scatterplot function in Seaborn contains a few extra capabilities, like the ability to color-code points according to a third variable.</p>
</section>
<section id="visualizing-distributions" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-distributions">Visualizing Distributions</h2>
<p>Any data that demonstrates the frequency of occurrence of various values or ranges of values is referred to as distribution data. Understanding the distribution’s shape, the existence of outliers, and the likelihood of specific values or ranges of values are all made easier by visualizing distribution data.</p>
<p>Density plots are one of the most popular tools for displaying distribution data. A graph that displays the probability density function of a collection of data is called a density plot. Both Matplotlib and Seaborn include tools for making density graphs. Let’s look at an illustration:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a density plot using Matplotlib</span></span>
<span id="cb7-4">plt.hist(data, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb7-5">sns.kdeplot(data, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb7-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Density Plot of Random Data'</span>)</span>
<span id="cb7-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb7-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Density'</span>)</span>
<span id="cb7-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-8-output-1.png" width="597" height="449"></p>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a density plot using Seaborn</span></span>
<span id="cb8-2">sns.histplot(data, kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, stat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'density'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb8-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Density Plot of Random Data'</span>)</span>
<span id="cb8-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb8-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Density'</span>)</span>
<span id="cb8-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-9-output-1.png" width="597" height="449"></p>
</div>
</div>
<p>Using NumPy’s random.normal function, we generate a set of random data in this example. Then, we use Matplotlib and Seaborn to produce two density charts, one using each program. We may combine a histogram and a density plot into one visualization using Seaborn’s histplot function.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this article, we looked at how to depict quantities, proportions, relationships, and distributions using Matplotlib and Seaborn. Data visualization is a potent tool for comprehending and expressing complicated data relationships, trends, and insights. We can get valuable insights from our data using these libraries, and we can use those insights to make decisions that are well-informed.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>data visualization</category>
  <category>matplotlib</category>
  <category>seaborn</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/visualization/index.html</guid>
  <pubDate>Fri, 12 May 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/viz/pythondataviz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mastering Scientific Writing: Key Takeaways from Coursera’s Writing in the Sciences MOOC by Kristin-Sainani</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/sciences-writing/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Since written communication is the primary way that scientific discoveries are disseminated to the public, scientific writing is a crucial skill for scientists and researchers. For effectively communicating ideas, presenting the findings of research investigations, and expanding scientific knowledge, the ability to write clear and concise scientific articles is essential.</p>
<p>In addition to presenting facts and findings, scientific writing often entails interpreting findings and coming up with brand-new theories. Furthermore, objectiveness, precision, and clarity are qualities of good scientific writing that make it possible for subsequent researchers to replicate and improve on the reported work.</p>
<p>Scientists and researchers can improve their writing abilities, learn how to create compelling abstracts, opening statements, and conclusions, and obtain a better understanding of the peer-review procedure by taking a course on scientific writing. Scientists and researchers can increase the exposure and influence of their work by writing more effectively and communicating their findings to peers, collaborators, and the larger scientific community.</p>
<p>Successful scientific communication is fundamentally dependent on effective scientific writing; however, many researchers and scientists find it difficult to successfully convey their study findings. The Coursera MOOC “Writing in the Sciences” addresses this difficulty by giving students the tools and strategies they need to develop their scientific writing abilities.</p>
<p>Anyone wishing to improve their ability to write scientific publications must take this course, which is instructed by renowned Stanford professor Kristin Sainani.</p>
<p>I recently finished the course, which was a requirement for our current Arewa Data Science Fellowship. I describe my key takeaways from the course and underline the crucial skills and knowledge discussed in this post.</p>
</section>
<section id="the-value-of-clarity-in-writing" class="level2">
<h2 class="anchored" data-anchor-id="the-value-of-clarity-in-writing">The Value of Clarity in Writing</h2>
<p>The value of concise writing in scientific communication is one of the major concepts stressed throughout the course. Scientific writers must avoid frequent errors, such as the use of technical jargon or needlessly complex language, in order to successfully communicate study findings. Instead, authors should strive for simplicity and clarity while utilizing language that is clear to readers.</p>
</section>
<section id="scientific-paper-structure" class="level2">
<h2 class="anchored" data-anchor-id="scientific-paper-structure">Scientific Paper Structure</h2>
<p>Effective scientific paper structure is a crucial skill that is addressed in the course. Several important elements of scientific publications often appear in the introduction, methods, results, and discussion sections. Each component needs to be well-written and concise, with a seamless flow between them.</p>
</section>
<section id="effective-evidence-use" class="level2">
<h2 class="anchored" data-anchor-id="effective-evidence-use">Effective Evidence Use</h2>
<p>The use of evidence to back up claims and conclusions is essential to good scientific writing. I gained knowledge on how to successfully use data, statistics, and literature citations in their scientific writing. I also know how to assess the reliability of the evidence and how to use it to bolster my claims.</p>
</section>
<section id="peer-editing-and-review" class="level2">
<h2 class="anchored" data-anchor-id="peer-editing-and-review">Peer editing and review</h2>
<p>Additionally, the course highlighted the value of peer review as well as effective methods for reviewing and editing scientific writing. I gained knowledge on how to give constructive criticism and how to use criticism to enhance my work. The accuracy, clarity, and effectiveness of scientific writing depend on this ability.</p>
</section>
<section id="research-ethics-and-responsible-conduct" class="level2">
<h2 class="anchored" data-anchor-id="research-ethics-and-responsible-conduct">Research Ethics and Responsible Conduct</h2>
<p>The course placed a strong emphasis on writing abilities as well as the value of ethical behavior in scientific writing and research. I gained knowledge on how to avoid conflicts of interest, data fabrication, and plagiarism.</p>
</section>
<section id="animated-and-educational-lectures" class="level2">
<h2 class="anchored" data-anchor-id="animated-and-educational-lectures">Animated and Educational Lectures</h2>
<p>The interesting and educational lectures given by Professor Sainani are one of the highlights of the Coursera course “Writing in the Sciences.” She uses a range of examples and real-world settings to illustrate important topics in her lectures, which are given in a straightforward and succinct manner. For instance, when demonstrating how to create personal statements, she provided examples of previous personal statements she had written, illustrating how including tales can help the reader relate to the content more effectively. Her personable and encouraging teaching style makes the training approachable and fun.</p>
</section>
<section id="additional-fundamental-skills-taught-in-the-course" class="level2">
<h2 class="anchored" data-anchor-id="additional-fundamental-skills-taught-in-the-course">Additional Fundamental Skills Taught in the Course</h2>
<p>The “Writing in the Sciences” course on Coursera includes several other crucial abilities for scientists and researchers in addition to the ones mentioned above. These consist of:</p>
<p><strong>Writing grants</strong>: How to create a compelling research plan, find funding possibilities, and write excellent grant proposals that address reviewer comments.</p>
<p><strong>Recommendation Letters</strong>: The course instructs students on how to ask for and compose effective recommendation letters, including how to pick the best referees, supply the required details, and highlight the applicant’s qualities.</p>
<p><strong>Review Article</strong>: How to produce review articles that summarize and evaluate current research on a certain subject. Additionally, the course taught how to recognize important research and points of contention, assess the reliability of the data, and write an organized and succinct review article.</p>
<p><strong>Writing Effective Personal Statements for Graduate School Applications</strong>: The course discussed how to create great personal statements for graduate school applications, including how to highlight pertinent experience and skills, describe your research interests, and show that you are a good fit for the program.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>For scientists and researchers who want to strengthen their writing abilities in the scientific field, Coursera’s “Writing in the Sciences” course is an excellent resource. The course offers a thorough introduction to the rules and methods of effective scientific writing, covering topics like the rules of clear writing, the format of scientific papers, the use of evidence, peer review and editing, ethics and responsible research practices, as well as crucial abilities like grant writing, recommendation letter writing, review article writing, and personal statement writing.</p>
<p>Kristin Sainani’s intelligent and captivating presentations add interest and fun to the training. Because of her direct and plain teaching style, utilization of examples and real-world challenges, and supportive approach, students may confidently enhance their writing talents.</p>
<p>By improving these skills, scientists and researchers can more effectively communicate their discoveries, establish their knowledge and authority in the subject, and advance their scientific careers. The “Writing in the Sciences” course is a smart investment for anyone looking to develop their scientific writing skills and flourish in the sciences and beyond.</p>


</section>

 ]]></description>
  <category>writing</category>
  <category>sciences</category>
  <category>coursera</category>
  <category>mooc</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/sciences-writing/index.html</guid>
  <pubDate>Tue, 25 Apr 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/sciences-writing/sciences_writing.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Writing Clean Codes in JavaScript: A Necessity</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/cleancodes/index.html</link>
  <description><![CDATA[ 




<p>I recently started seriously practicing JavaScript, hence this post. Another impact of being a fellow of the Arewa Data Science Academy. Writing clean and readable code is an essential skill for any JavaScript developer. In fact, for all developers, regardless of favoured language. Clean code is code that is easy to understand, modify, and maintain. It is also code that follows the best practices and standards of the language. In this essay, we will discuss some of the best practices and style guides for writing clean JavaScript code.</p>
<ol type="1">
<li><p>Use Meaningful Names for Variables, Functions, and Classes One of the most important aspects of writing clean code is to use meaningful names for your variables, functions, and classes. Your code should be self-explanatory, and the names should reflect the purpose of the code. Avoid abbreviations and acronyms that are not widely known, and use camelCase for variables and functions.</p></li>
<li><p>Use Consistent Formatting Consistent formatting is essential for readability and maintainability. Use consistent indentation, spacing, and line breaks. Many style guides recommend using two spaces for indentation and avoiding tabs. Use a consistent brace style, either the “K&amp;R style” or the “Allman style”.</p></li>
<li><p>Use Comments Comments are an essential part of any codebase. They help explain the code’s purpose, how it works, and why it was written. Use comments to describe your functions and classes, to explain complex code, and to document your code’s edge cases. However, be careful not to overuse comments or to write comments that simply restate the code.</p></li>
<li><p>Avoid Global Variables Global variables can cause a lot of problems in your code. They can create unexpected side effects, make debugging difficult, and make it harder to reason about your code. Instead, use local variables, function parameters, and closures to encapsulate your code and avoid global variables.</p></li>
<li><p>Use Short Functions and Classes Short functions and classes are easier to read, understand, and maintain. Try to keep your functions and classes as short as possible, ideally under 50 lines of code. If a function or class is too long, consider breaking it down into smaller functions or classes.</p></li>
<li><p>Use Error Handling Error handling is an important part of any codebase. It helps prevent bugs, improve user experience, and make your code more reliable. Use try-catch blocks to catch and handle errors, and use descriptive error messages to help users understand what went wrong.</p></li>
<li><p>Use Modern JavaScript Features Modern JavaScript features such as arrow functions, template literals, and destructuring can help make your code more concise and expressive. Use these features whenever possible, but be careful not to overuse them and make your code less readable.</p></li>
<li><p>Use a Style Guide Using a style guide can help ensure consistency and readability in your codebase. Some popular style guides for JavaScript include the Airbnb JavaScript Style Guide, Google JavaScript Style Guide, and StandardJS. Choose a style guide that fits your team’s needs and preferences and follow it consistently.</p></li>
</ol>
<p>In conclusion, writing clean code is an essential skill for any JavaScript developer. Use meaningful names, consistent formatting, comments, avoid global variables, short functions and classes, error handling, modern JavaScript features, and a style guide to ensure your code is clean and readable. With these practices and guidelines, you can write high-quality code that is easy to understand, modify, and maintain.</p>



 ]]></description>
  <category>javascript</category>
  <category>code</category>
  <category>writing</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/cleancodes/index.html</guid>
  <pubDate>Tue, 18 Apr 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/welcome/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Overview of Data Processing Using Pandas</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/pandas2/index.html</link>
  <description><![CDATA[ 




<p>Data processing is an important aspect of data analysis and provides a way to generate insights and information from large datasets, and also to prepare data for use in, say, training a machine learning model. In this article, I will briefly provide an overview of how to use Pandas - a popular data manipulation library in Python - for data processing.</p>
<p>Pandas is a high-performance library that provides easy-to-use data structures and data analysis tools for Python. It offers powerful capabilities for data processing, including data cleaning, transformation, merging, and analysis, among others.</p>
<p>One of the core data structures in Pandas is the DataFrame, which is essentially a two-dimensional table of data. This table is indexed by rows and columns and can be thought of as a spreadsheet or a SQL table. Pandas also provides a Series data structure, which is a one-dimensional labelled array capable of holding any data type.</p>
<p>The first step in data processing with Pandas is to load data into a DataFrame. Pandas supports reading data from a variety of sources, including CSV, Excel, SQL databases, and JSON, among others. Once the data is loaded into a DataFrame, we can start exploring, cleaning, and transforming it.</p>
<p>Data cleaning is an important step in data processing, as datasets in most cases contain missing values, duplicate records, or incorrect data types. Pandas provides several methods for cleaning data, including dropping missing values, filling in missing values, and removing duplicates. For example, the dropna() method can be used to remove rows with missing values from a DataFrame, while the fillna() method can be used to fill in missing values with a specified value or method. The drop_duplicates() method can be used to remove duplicate records from a DataFrame based on specified columns.</p>
<p>Once the data is cleaned, we can start transforming it to extract useful information. Pandas provides several methods for data transformation, including filtering, grouping, and aggregating data. For example, the loc[] method can be used to filter rows based on a given condition, while the groupby() method can be used to group data by one or more columns and apply aggregation functions such as sum(), mean(), and count().</p>
<p>Merging and joining datasets is another common task in data processing, especially when dealing with data from multiple sources. Pandas provides several methods for merging and joining datasets, including concat(), merge(), and join(). The concat() method can be used to concatenate two or more DataFrames vertically or horizontally, while the merge() method can be used to merge two DataFrames based on one or more common columns. The join() method is similar to merge(), but it is used to join two DataFrames based on their index.</p>
<p>Finally, once the data is processed, we can analyze it to extract insights and information. Pandas provides several methods for data analysis, including statistical analysis, visualization, and machine learning. For example, the describe() method can be used to generate summary statistics for a DataFrame, while the plot() method can be used to create various types of visualizations, such as line charts, bar charts, and scatter plots. Pandas also integrates well with machine learning libraries such as scikit-learn, allowing us to perform various machine learning tasks on our data.</p>
<p>In conclusion, in this article, I have provided an overview of how Pandas can be used for data processing and analysis in Python. I have highlighted some of the capabilities it provides for data cleaning, transformation, merging, and analysis. Using Pandas, we can easily load, clean, transform, and analyze data, making it a valuable tool for data scientists and analysts.</p>



 ]]></description>
  <category>python</category>
  <category>pandas</category>
  <category>data analysis</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/pandas2/index.html</guid>
  <pubDate>Thu, 06 Apr 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/pandas/pandas.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Machine-Learning: Relationship With Deep Learning, AI ,and Data Science</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/ml-ai/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/ml-ai/mlai.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">ml-ai-data-science</figcaption>
</figure>
</div>
<p>The picture above,taken from Microsoft’s free introduction to machine learning course, available on github, succinctly expresses how the concepts relate to one another.</p>
<p>Artificial Intelligence (AI), Machine Learning (ML), Deep Learning (DL), and Data Science are related but distinct fields in computer science that involve different techniques and applications.</p>
<p><code>AI</code> refers to the ability of machines to perform tasks that would normally require human intelligence. These include activties such as visual perception, speech recognition, decision-making, and natural language processing. AI is a broad field that encompasses a range of techniques and applications, including rule-based systems, expert systems, neural networks, and evolutionary algorithms.</p>
<p><code>Machine Learning (ML)</code> is a subfield of AI that involves developing algorithms that can learn from and make predictions using data. Rather than being programmed directly with explicit rules, ML algorithms learn patterns and relationships in data through experience and iteration. Examples of ML algorithms include decision trees, random forests, and support vector machines.</p>
<p><code>Deep Learning (DL)</code> is a subset of ML that involves training deep neural networks, which are complex mathematical models inspired by the structure and function of the human brain. DL has enabled breakthroughs in areas such as computer vision, natural language processing, and speech recognition. Examples of DL algorithms include convolutional neural networks, recurrent neural networks, and generative adversarial networks.</p>
<p><code>Data Science</code> is a broader field that involves extracting insights and knowledge from data using a combination of statistical analysis, machine learning, and domain expertise. Data scientists use techniques such as data mining, data visualization, and predictive modeling to extract actionable insights from data. Data science has applications in a wide range of fields, including healthcare, finance, marketing, and social science.</p>
<p>In summary, AI refers to the broader goal of creating machines that can perform human-like tasks, while machine learning and deep learning are specific techniques for achieving that goal. Data science is a broader field that involves using statistical analysis and machine learning to extract insights and knowledge from data.</p>



 ]]></description>
  <category>machine learning</category>
  <category>deep learning</category>
  <category>ai</category>
  <category>data science</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/ml-ai/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/ml-ai/mlai.png" medium="image" type="image/png" height="135" width="144"/>
</item>
</channel>
</rss>
