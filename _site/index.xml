<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>ailearningloop</title>
<link>https://lukmanaj.github.io/ailearningloop/index.html</link>
<atom:link href="https://lukmanaj.github.io/ailearningloop/index.xml" rel="self" type="application/rss+xml"/>
<description>Venturing Beyond My Roots: An AI Odyssey Unfolds for This Non-Tech Trailblazer!</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Tue, 08 Aug 2023 23:00:00 GMT</lastBuildDate>
<item>
  <title>Revving Up: MPG Regression Unleashed through Deep Learning in PyTorch</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/pytorch-regression/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this article, we’ll dive into the world of deep learning with PyTorch by constructing a simple linear regression model to predict a vehicle’s miles per gallon (MPG) based on various features. We’ll explore the preprocessing steps, model architecture, training process, and evaluation of the model’s performance.</p>
</section>
<section id="preparing-the-data" class="level1">
<h1>Preparing the Data</h1>
<p>Our journey begins by loading the auto MPG dataset, which contains information about vehicle characteristics and their corresponding MPG values. We’ll focus on features like the number of cylinders, displacement, horsepower, weight, acceleration, manufacturing origin, and model year.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Importing necessary libraries</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn.model_selection</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> one_hot</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader,Dataset,TensorDataset</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the dataset</span></span>
<span id="cb2-2">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data'</span></span>
<span id="cb2-3">column_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MPG'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cylinders'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Displacement'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Horsepower'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weight'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acceleration'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Origin'</span>]</span>
<span id="cb2-4"></span>
<span id="cb2-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>column_names,</span>
<span id="cb2-6">                 na_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?"</span>, comment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb2-7">                 sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, skipinitialspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-8">df.tail()</span></code></pre></div>
</section>
<section id="data-preprocessing" class="level1">
<h1>Data Preprocessing</h1>
<p>To ensure our data is suitable for training, we perform necessary preprocessing steps. We drop rows with missing values, standardize continuous features, and transform categorical features into one-hot encoded vectors.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dropping rows with missing values</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.dropna().reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Splitting the data into train and test sets</span></span>
<span id="cb3-7">df_train, df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sklearn.model_selection.train_test_split(df, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standardizing continuous features</span></span>
<span id="cb3-10">numeric_column_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cylinders'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Displacement'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Horsepower'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weight'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acceleration'</span>]</span>
<span id="cb3-11">train_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_train.describe().transpose()</span>
<span id="cb3-12"></span>
<span id="cb3-13">df_train_norm, df_test_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_train.copy(), df_test.copy()</span>
<span id="cb3-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> numeric_column_names:</span>
<span id="cb3-15">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_stats.loc[col_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>]</span>
<span id="cb3-16">    std  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_stats.loc[col_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std'</span>]</span>
<span id="cb3-17">    df_train_norm[col_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_train_norm[col_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std</span>
<span id="cb3-18">    df_test_norm[col_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_test_norm[col_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bucketing the model year categories</span></span>
<span id="cb3-21">boundaries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">73</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">76</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">79</span>])</span>
<span id="cb3-22"> </span>
<span id="cb3-23">v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_train_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year'</span>].values)</span>
<span id="cb3-24">df_train_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year Bucketed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.bucketize(v, boundaries, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-25"></span>
<span id="cb3-26">v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_test_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year'</span>].values)</span>
<span id="cb3-27">df_test_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year Bucketed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.bucketize(v, boundaries, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-28"></span>
<span id="cb3-29">numeric_column_names.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Year Bucketed'</span>)</span>
<span id="cb3-30"></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One-hot encoding the origin feature</span></span>
<span id="cb3-32"></span>
<span id="cb3-33">total_origin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(df_train_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Origin'</span>]))</span>
<span id="cb3-34"></span>
<span id="cb3-35">origin_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot(torch.from_numpy(df_train_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Origin'</span>].values) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> total_origin)</span>
<span id="cb3-36"></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating the train and test feature and label tensors</span></span>
<span id="cb3-38"></span>
<span id="cb3-39">x_train_numeric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_train_norm[numeric_column_names].values)</span>
<span id="cb3-40">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([x_train_numeric, origin_encoded], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb3-41"> </span>
<span id="cb3-42">origin_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot(torch.from_numpy(df_test_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Origin'</span>].values) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> total_origin)</span>
<span id="cb3-43">x_test_numeric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_test_norm[numeric_column_names].values)</span>
<span id="cb3-44">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([x_test_numeric, origin_encoded], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb3-45"></span>
<span id="cb3-46"></span>
<span id="cb3-47">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_train_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MPG'</span>].values).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb3-48">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df_test_norm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MPG'</span>].values).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb3-49"></span>
<span id="cb3-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a data loader to load the train dataset in batches</span></span>
<span id="cb3-51">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorDataset(x_train, y_train)</span>
<span id="cb3-52">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb3-53">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-54">train_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_ds, batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="building-the-dnn-regression-model" class="level1">
<h1>Building the DNN Regression Model</h1>
<p>With our data prepared, we move on to constructing our Deep Neural Network (DNN) regression model using PyTorch. This model will predict MPG values based on the vehicle’s features.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the model architecture</span></span>
<span id="cb4-3">hidden_units <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb4-4">input_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-5"></span>
<span id="cb4-6">all_layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hidden_unit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hidden_units:</span>
<span id="cb4-8">    layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(input_size, hidden_unit)</span>
<span id="cb4-9">    all_layers.append(layer)</span>
<span id="cb4-10">    all_layers.append(nn.ReLU())</span>
<span id="cb4-11">    input_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hidden_unit</span>
<span id="cb4-12"></span>
<span id="cb4-13">all_layers.append(nn.Linear(hidden_units[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-14">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>all_layers)</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb4-17">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb4-18">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span></code></pre></div>
</section>
<section id="training-the-model" class="level1">
<h1>Training the Model</h1>
<p>It’s time to train our DNN regression model on the training data. We iterate through the data for a specified number of epochs, adjusting the model’s weights to minimize the mean squared error loss.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb5-2">log_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> </span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb5-5">    loss_hist_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x_batch, y_batch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> train_dl:</span>
<span id="cb5-7">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x_batch)[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-8">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(pred, y_batch)</span>
<span id="cb5-9">        loss.backward()</span>
<span id="cb5-10">        optimizer.step()</span>
<span id="cb5-11">        optimizer.zero_grad()</span>
<span id="cb5-12">        loss_hist_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb5-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> log_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  Loss </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss_hist_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dl)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</section>
<section id="evaluating-the-model" class="level1">
<h1>Evaluating the Model</h1>
<p>Once the model is trained, we assess its performance on the test dataset. This helps us understand how well the model generalizes to new, unseen data.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb6-3">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>())[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-4">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(pred, y_test)</span>
<span id="cb6-5">    mae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.L1Loss()(pred, y_test)</span>
<span id="cb6-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Test MSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Test MAE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<p>Seeing the good metrics, let’s confirm by plotting the actual and predicted values</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting actual vs. predicted MPG values</span></span>
<span id="cb7-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-3">plt.scatter(y_test, pred, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>)</span>
<span id="cb7-4">plt.plot([y_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), y_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()], [y_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), y_test.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Perfect Prediction'</span>)</span>
<span id="cb7-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual MPG'</span>)</span>
<span id="cb7-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted MPG'</span>)</span>
<span id="cb7-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual vs. Predicted MPG Values'</span>)</span>
<span id="cb7-8">plt.legend()</span>
<span id="cb7-9">plt.show()</span></code></pre></div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Our DNN regression model demonstrates promising results in predicting MPG values based on vehicle features. By carefully preprocessing the data, constructing an appropriate model architecture, and iteratively training the model, we achieve a model that generalizes reasonably well to new data. This article serves as a starting point for your journey into deep learning with PyTorch, enabling you to build more advanced models and tackle a variety of data analysis challenges.</p>


</section>

 ]]></description>
  <category>deep learning</category>
  <category>pytorch</category>
  <category>regression</category>
  <category>python</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/pytorch-regression/index.html</guid>
  <pubDate>Tue, 08 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>The Crucial Role of the Sigmoid Function and its Derivative in Machine Learning</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/sigmoid/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In the realm of machine learning, the sigmoid function stands as a foundational and indispensable element, playing a pivotal role in various applications such as neural networks, logistic regression, and decision-making models. Its characteristic S-shaped curve enables it to map input data to a bounded output range, making it particularly valuable for tasks involving classification, probability estimation, and activation functions. This essay explores the significance of the sigmoid function in machine learning and delves into the techniques for solving its derivative, elucidating its importance in optimizing learning processes.</p>
</section>
<section id="the-sigmoid-function-a-cornerstone-of-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="the-sigmoid-function-a-cornerstone-of-machine-learning">The Sigmoid Function: A Cornerstone of Machine Learning</h2>
<p>The sigmoid function, mathematically represented as <img src="https://latex.codecogs.com/png.latex?%5Csigma%5Cleft(x%5Cright)%20=%20%5Cfrac%7B1%7D%7B1+e%5E%7B-x%7D%7D">, transforms any input value to a range between 0 and 1. This property is particularly useful in binary classification problems, where the output is interpreted as a probability score for a particular class. In the context of neural networks, sigmoid activation functions allow neurons to fire selectively, enabling complex patterns to be captured through the network’s layers. Its continuous and differentiable nature makes it suitable for various optimization algorithms, including gradient descent.</p>
</section>
<section id="derivative-of-the-sigmoid-function-unraveling-the-complexity" class="level2">
<h2 class="anchored" data-anchor-id="derivative-of-the-sigmoid-function-unraveling-the-complexity">Derivative of the Sigmoid Function: Unraveling the Complexity</h2>
<p>One of the key aspects of utilizing the sigmoid function in machine learning is the ability to compute its derivative. The derivative provides insights into how the output of the function changes concerning variations in the input. The straightforward yet intricate nature of the sigmoid derivative, often expressed as <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5E%7B,%7D%5Cleft(x%5Cright)%20=%20%5Csigma%5Cleft(x%5Cright)%20%5Ctimes%20(1-%5Csigma%5Cleft(x%5Cright))">, has far-reaching implications for the training of neural networks and other machine learning models.</p>
</section>
<section id="solving-the-sigmoid-derivative-chain-rule-in-action" class="level2">
<h2 class="anchored" data-anchor-id="solving-the-sigmoid-derivative-chain-rule-in-action">Solving the Sigmoid Derivative: Chain Rule in Action</h2>
<p>To solve the derivative of the sigmoid function, the chain rule comes into play. The chain rule is a fundamental concept in calculus that allows us to calculate the derivative of composite functions. Applying the chain rule to the sigmoid derivative involves breaking down the complex expression into manageable components and systematically calculating their derivatives. The result,<img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5E%7B,%7D%5Cleft(x%5Cright)%20=%20%5Csigma%5Cleft(x%5Cright)%20%5Ctimes(1-%5Csigma%5Cleft(x%5Cright))"> , embodies the sigmoid function’s self-adjusting behavior, where the derivative is maximized at the inflection point (0.5) and approaches zero as the input approaches positive or negative infinity. On this note, I will like to indulge in deriving the derivative of a sigmoid, just for fun.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma%5Cleft(x%5Cright)%20=%20%5Cfrac%7B1%7D%7B1+e%5E%7B-x%7D%7D"></p>
<p>This can also be expressed as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma%5Cleft(x%5Cright)%20=%20(1+e%5E%7B-x%7D)%5E%7B-1%7D"></p>
<p>which we know differentiates, according to the chain rule, to:</p>
<p><img src="https://latex.codecogs.com/png.latex?-(1+e%5E%7B-x%7D)%5E%7B-2%7D%20%5Ctimes%20e%5E%7B-x%7D%20%5Ctimes-1"></p>
<p>which easily becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?e%5E%7B-x%7D(1+e%5E%7B-x%7D)%5E%7B-2%7D"></p>
<p>same as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Be%5E%7B-x%7D%7D%7B%5Cleft(1%20+%20e%20%5E%7B-x%7D%5Cright)%5E%7B2%7D%7D"></p>
<p>then we can rearrange by adding and subtracting 1 which in essence does nothing but add a zero:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Be%5E%7B-x%7D%7D%7B%5Cleft(1%20+%20e%20%5E%7B-x%7D%5Cright)%5E%7B2%7D%7D+%201%20-1"></p>
<p>this easily becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%20+%20e%5E%7B-x%7D-1%7D%7B%5Cleft(1+e%5E%7B-x%7D%5Cright)%5E%7B-2%7D%7D"></p>
<p>which is simply:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%20+%20e%5E%7B-x%7D%7D%7B%5Cleft(1%20+%20e%20%5E%7B-x%7D%5Cright)%5E%7B2%7D%7D%20-%20%5Cfrac%7B1%7D%7B%5Cleft(1%20+%20e%20%5E%7B-x%7D%5Cright)%5E%7B2%7D%7D"></p>
<p>which simplifies to:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B1%20+%20e%20%5E%7B-x%7D%7D%20-%20%5Cfrac%7B1%7D%7B%5Cleft(1%20+%20e%20%5E%7B-x%7D%5Cright)%5E%7B2%7D%7D"></p>
<p>factorizing we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B1%20+%20e%20%5E%7B-x%7D%7D%5Cleft(1%20-%20%5Cfrac%7B1%7D%7B1%20+%20e%20%5E%7B-x%7D%7D%5Cright)"></p>
<p>recalling that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma%5Cleft(x%5Cright)%20=%20%5Cfrac%7B1%7D%7B1+e%5E%7B-x%7D%7D"></p>
<p>our derivative is now proven to be</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5E%7B,%7D%5Cleft(x%5Cright)%20=%20%5Csigma%5Cleft(x%5Cright)%20%5Ctimes(1-%5Csigma%5Cleft(x%5Cright))"></p>
</section>
<section id="importance-of-the-sigmoid-derivative-in-optimization" class="level2">
<h2 class="anchored" data-anchor-id="importance-of-the-sigmoid-derivative-in-optimization">Importance of the Sigmoid Derivative in Optimization</h2>
<p>Understanding and utilizing the sigmoid derivative is of paramount importance in optimizing machine learning models. In neural network training, the backpropagation algorithm relies heavily on derivatives to adjust the model’s weights and biases. The sigmoid derivative guides the network’s learning process, indicating the direction and magnitude of weight adjustments needed for minimizing error. Furthermore, the sigmoid derivative helps prevent the vanishing gradient problem, ensuring that gradients remain substantial throughout the network’s layers and facilitating stable and efficient training.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In conclusion, the sigmoid function is a cornerstone of machine learning, serving as a fundamental tool for a wide range of applications. Its ability to map inputs to a bounded output range makes it indispensable in tasks such as binary classification, probability estimation, and activation functions within neural networks. Solving the derivative of the sigmoid function through the chain rule unravels its intricate nature, enabling its effective utilization in optimization processes. The sigmoid derivative’s significance in guiding neural network training, preventing the vanishing gradient problem, and enhancing model performance cannot be overstated. As machine learning continues to evolve, the sigmoid function and its derivative will undoubtedly continue to play a pivotal role in shaping the landscape of artificial intelligence and data analysis.</p>


</section>

 ]]></description>
  <category>machine learning</category>
  <category>sigmoid</category>
  <category>activation</category>
  <category>mathematics</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/sigmoid/index.html</guid>
  <pubDate>Sun, 06 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Enhancing Effective Writing: Insights from Larry McEnerney’s Leadership Lab</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/effective-writing/index.html</link>
  <description><![CDATA[ 




<p>Larry McEnerney’s Leadership Lab on effective writing delivered on May 9, 2014 began with a compelling assertion: “Shift your focus from rules to readers.” This succinctly encapsulates his core message, a crucial takeaway for the audience composed mainly of academic researchers. McEnerney aimed to dismantle prevalent misconceptions about writing, challenging notions that view it merely as a tool for conveying complex ideas or a means of thinking. While acknowledging these as valid purposes, he asserted that the primary goal of writing is to transform readers’ perspectives or worldviews, positioning the reader at the heart of the writing process.</p>
<p>Central to McEnerney’s discourse was the concept of creating writing that holds inherent value for the reader, ultimately driving change and influencing their ideas. He delved into the notion of knowledge, asserting its boundless nature and the role of field-specific experts in shaping valuable contributions. Convincing this community of experts, he emphasized, is a critical objective in writing.</p>
<p>McEnerney underscored the importance of understanding the community’s dynamics and norms, urging writers to “know the code.” This involves skillfully presenting information in a manner acceptable to the community, even incorporating praise before presenting arguments. Identifying key influencers within the community and catering to their preferences emerged as a pivotal strategy.</p>
<p>The workshop also deconstructed common motivations for writing, highlighting the nuanced nature of these reasons. McEnerney contended that while additional motives exist, academic writing’s core purpose remains convincing the community of experts.</p>
<p>An important principle that McEnerney tackled was the necessity of introducing valuable new knowledge. He transitioned to discussing the writing process itself, challenging the conventional approach of starting with a background and definitions. Instead, he advocated for commencing the introduction by outlining the problem, injecting a sense of instability and tension. Such an approach, he argued, captures readers’ attention and sets the stage for proposing elegant solutions.</p>
<p>Furthermore, McEnerney advocated employing language that accentuates instability and tension to engage readers. He suggested dramatizing issues before presenting refined solutions, catering to readers’ preference for tension-filled narratives. Additionally, he advised incorporating the language of cost and benefit, underlining the problem’s consequences in terms of monetary or other values, as well as emphasizing the benefits of adopting the proposed solution.</p>
<p>In the context of literature reviews, McEnerney positioned them as a tool to enrich and contextualize the problem. He encouraged using terms like “knowledge gap” to convey the notion that knowledge is expandable, rather than bounded. The key, he stressed, lies in demonstrating a solution’s value to the expert community, ensuring its integration into the broader body of knowledge.</p>
<p>In summary, McEnerney’s workshop wasn’t a guide to writing formats or grammar rules; its aim was to reshape the audience’s approach to writing, placing readers at the forefront. Paramount considerations included the target journal, the expert community, and the academic field’s constituents. This approach, he asserted, significantly elevates writing quality and enhances the chances of successful journal submissions.</p>
<p>For those interested, the full video of the workshop can be accessed <a href="https://www.youtube.com/watch?v=vtIzMaLkCaM&amp;t=1671s">here</a>.</p>



 ]]></description>
  <category>writing</category>
  <category>research</category>
  <category>effective writing</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/effective-writing/index.html</guid>
  <pubDate>Thu, 03 Aug 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/effective-writing/effective_writing.png" medium="image" type="image/png" height="102" width="144"/>
</item>
<item>
  <title>Arewa Data Science Academy Fellowship: A Transformative Journey to Success in Data Science</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/arewads-impact/index.html</link>
  <description><![CDATA[ 




<p>The Arewa Data Science Academy fellowship has been an exceptional journey that has profoundly shaped my life this year. In just six months, I have acquired a wealth of knowledge, leaving an indelible mark on my personal and professional growth.</p>
<p>The fellowship’s comprehensive curriculum not only covered programming and data science skills but also delved into vital areas like version control using Git. Engaging and interactive workshops provided me with hands-on experiences that deepened my understanding of this critical aspect of modern software development. Additionally, I honed my expertise in bash scripting and command-line usage, enhancing my technical proficiency.</p>
<p>An extraordinary aspect of the fellowship was its focus on sharing our learning experiences through blogging. With training in using Quarto, I mastered the art of effective scientific writing, perfecting my ability to communicate complex ideas concisely. Blogging not only allowed me to reflect on my progress but also reinforced my understanding of the concepts I was learning, solidifying my grasp on data science principles.</p>
<p>Throughout this transformative journey, our mentors played an indispensable role. Their immense talent and dedication created a supportive and encouraging environment for us to thrive. Regular updates and organization through platforms like Notion, slack and telegram ensured we never missed any valuable insights, keeping us on track and motivated.</p>
<p>Beyond technical skills, the fellowship also emphasized essential aspects of professional development, including crafting an impressive CV. With practical exercises using LaTeX, we learned to create captivating CVs that effectively showcased our capabilities. The mentors’ commitment to providing personalized feedback and constructive criticism proved invaluable in refining our CVs to perfection, preparing us for future career opportunities.</p>
<p>The Arewa Data Science Academy has been an absolute blessing, propelling me beyond the boundaries of my imagination. As a part of this prestigious fellowship, I have gained newfound confidence and a fervor for continuous learning. My technical repertoire has expanded, and I have developed a deeper sense of self-awareness and determination to succeed in the data science field.</p>
<p>Reflecting on my journey as a fellow, I am amazed by how much I have achieved in such a short time. The skills and knowledge I have acquired will undoubtedly pave the way for a bright future in data science, and I am eager to explore the limitless possibilities that lie ahead. The academy has laid a strong foundation for my ongoing pursuit of excellence, inspiring me to keep pushing my boundaries and seeking new challenges.</p>
<p>In conclusion, joining the Arewa Data Science Academy fellowship has been a pivotal moment in my life. It has equipped me with a diverse set of skills, provided a supportive network, and instilled an unwavering passion for continuous growth. I am profoundly grateful for this transformative experience and eagerly anticipate the boundless opportunities that await me on this remarkable path of learning and discovery.</p>



 ]]></description>
  <category>skills</category>
  <category>arewads</category>
  <category>git</category>
  <category>quarto</category>
  <category>writing</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/arewads-impact/index.html</guid>
  <pubDate>Sun, 30 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Endless Paths in Data Science: Insights from Claudiu Musat’s Talk on Handwriting Synthesis and Career Prospects</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/claudiu-talk/index.html</link>
  <description><![CDATA[ 




<p>After recently concluding our fellowship at Arewa Data Science Academy, we had the privilege of attending a captivating talk by Claudiu Musat, a distinguished researcher from Google. The session revolved around illuminating career prospects in data science and guiding us on our next steps in this dynamic field. In the beginning, he warmly congratulated us on reaching this significant milestone, emphasizing that embarking on our journey was in itself an achievement worth celebrating, and each step we take marks progress towards something greater.</p>
<p>The highlight of the talk was his comprehensive presentation on handwriting synthesis, tracing its origins and evolution to the cutting-edge use of transformers in the field today. He also delved into the fascinating realm of generative AI, illustrating its potential to revolutionize the world by already disrupting various aspects of life. As Claudiu skillfully articulated the technical aspects of Deep Learning and its application to problem-solving, I gained a profound understanding of how recurrent neural networks can perform awe-inspiring feats and the critical interplay between research in academia and industry.</p>
<p>An invaluable piece of advice he shared with us was the importance of not just reading research papers but actively striving to publish our own work. Moreover, he offered practical tips for aspiring data scientists like us, encouraging us to fearlessly explore, experiment, and break barriers. One idea that resonated deeply was his suggestion to “look at that TensorFlow code and try implementing it in PyTorch.” This philosophy, reminiscent of Yann LeCun’s advice to beginners, can significantly enhance one’s chances of getting noticed in the field.</p>
<p>I must express my profound gratitude for this enlightening session; I meticulously took notes and left with a wealth of actionable insights for my future endeavors. Thank you, Claudiu Musat, for inspiring and equipping us with the tools to carve out a successful path in the captivating realm of data science.</p>



 ]]></description>
  <category>research</category>
  <category>advice</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/claudiu-talk/index.html</guid>
  <pubDate>Sat, 29 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>The Case for Writing Vectorised Code in R</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/r-vectorized-code/index.html</link>
  <description><![CDATA[ 




<section id="writing-vectorized-code" class="level2">
<h2 class="anchored" data-anchor-id="writing-vectorized-code">Writing Vectorized Code</h2>
<p>The first thing is to define vectorized code. According to Garrett Grolemund in his book “Hands-On Programming with R”, vectorised code has the following qualities:</p>
<ul>
<li>Logical tests</li>
<li>Subsetting</li>
<li>Element-wise execution</li>
</ul>
<p>The key thing about vectorization is that operations are performed on all elements of a vector simultaneously without the need of explicitly looping over the elements of the vector. This can make R code significantly faster.</p>
<p>As an illustration, let’s look at two functions that do the same thing. One is vectorized and other is not. We will then compare the time it takes for both functions to be executed to determine which technique is more efficient.</p>
<section id="regular-implementation-using-a-for-loop-not-vectorized" class="level3">
<h3 class="anchored" data-anchor-id="regular-implementation-using-a-for-loop-not-vectorized">Regular Implementation Using a For Loop (not vectorized)</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">abs_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(vec){</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(vec)) {</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (vec[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-4">      vec[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>vec[i]</span>
<span id="cb1-5">    }</span>
<span id="cb1-6">  }</span>
<span id="cb1-7">  vec</span>
<span id="cb1-8">}</span></code></pre></div>
</div>
</section>
<section id="vectorized-implementation" class="level3">
<h3 class="anchored" data-anchor-id="vectorized-implementation">Vectorized Implementation</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">abs_sets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(vec){</span>
<span id="cb2-2">  negs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-3">  vec[negs] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vec[negs] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-4">  vec</span>
<span id="cb2-5">}</span></code></pre></div>
</div>
<p>Having defined the two functions, the next thing is to define the variable that will be passed to the both functions, as shown below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000000</span>)</span></code></pre></div>
</div>
<p>Finally, the time it takes for each function to run is calculated and compared:</p>
</section>
</section>
<section id="unvectorized" class="level1">
<h1>Unvectorized</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs_loop</span>(long))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  0.781   0.081   0.862 </code></pre>
</div>
</div>
</section>
<section id="vectorized" class="level1">
<h1>Vectorized</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs_sets</span>(long))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  0.224   0.120   0.344 </code></pre>
</div>
</div>
<p>It can be seen that the vectorized function (ab_sets()) is about three times faster. The speed advantage increases as the size of the variable (long) increases. Imagine working on large vectors and the time that will be saved by vectorizing all our computations. Even the computational costs will be significantly reduced.</p>
<p>In conclusion, since R is built around vectors and most R functions are vectorized, using vectorization will be a significant addition to the toolkit of every R user and this can significantly improve productivity.</p>


</section>

 ]]></description>
  <category>r programming</category>
  <category>vectorization</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/r-vectorized-code/index.html</guid>
  <pubDate>Fri, 28 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Writing a Scientific Paper</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/writearticles/index.html</link>
  <description><![CDATA[ 




<p>In this post, I aim to summarize the key points from the journal article “How to Write a Scientific Article” by Barbara J. Hoogenboom and Robert C. Manske, which offers practical advice for successfully writing and submitting scientific manuscripts to peer-reviewed journals. The authors stress the significance of clear communication and effective writing skills in advancing evidence-based practice and scientific thinking. They cover various aspects of manuscript preparation, general writing tips, and important content sections.</p>
<p>The introduction emphasizes the importance of publishing research findings in peer-reviewed journals to positively impact the scientific community and clinical decision-making. The authors recognize that writing a scientific paper can be challenging, particularly for inexperienced authors due to various barriers. Nevertheless, they assert that effective writing skills can be honed with practice.</p>
<p>The article provides valuable tips on manuscript preparation and advises authors to identify a specific target journal and adhere to its submission criteria. The recommended IMRaD format (Introduction, Methods, Results, and Discussion) helps structure scientific manuscripts.</p>
<p>The authors emphasize the need for clear and accurate expression of ideas and research information. They caution against excessive use of jargon and recommend avoiding first-person language, which might contradict certain viewpoints from other sources.</p>
<p>Seeking a reading mentor and obtaining feedback on the manuscript before submission are encouraged, particularly for novice writers.</p>
<p>The article highlights the significance of using figures, graphics, and videos to enhance research presentations. Proper citation and avoiding plagiarism are deemed essential in scientific writing.</p>
<p>The content section discusses key elements like the abstract, introduction, review of literature, methods, results, discussion, and conclusions. The abstract is deemed critical as it often determines whether readers will continue reading the paper. The introduction should clearly state the research question and justify the study’s significance.</p>
<p>The methods section should provide sufficient detail for replication of the study, including mentioning ethical approval. The results section should present findings without interpretation, while the discussion section should contextualize results by comparing them with existing evidence.</p>
<p>In conclusion, the article encourages scholarly writing as a rewarding endeavor that contributes to scientific knowledge and evidence-based practice. It provides valuable insights and practical tips for authors, especially those new to scientific writing, to successfully navigate the publication process and produce high-quality manuscripts.</p>
<p>It’s worth noting that while most of the article aligns with what I learned in a “Writing in the Sciences” MOOC on Coursera, there may be some differences in opinions regarding the use of first-person language, as it can vary depending on the journal’s preferences and the author’s writing style.</p>
<section id="reference" class="level3">
<h3 class="anchored" data-anchor-id="reference">Reference</h3>
<p>Hoogenboom BJ, Manske RC. How to write a scientific article. Int J Sports Phys Ther. 2012 Oct;7(5):512-7. PMID: 23091783; PMCID: PMC3474301.</p>


</section>

 ]]></description>
  <category>scientific writing</category>
  <category>journal article</category>
  <category>research</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/writearticles/index.html</guid>
  <pubDate>Mon, 24 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Completion of Arewa Data Science Academy Fellowship</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/fellowship-conclusion/index.html</link>
  <description><![CDATA[ 




<p>It is with immense pleasure and gratitude that I announce my successful completion of the Arewa Data Science Academy fellowship. After months of unwavering dedication, deliberate practice, and continuous learning, I have achieved this milestone in my data science journey.</p>
<p>This journey would not have been possible without the help and blessings of Allah, for with His guidance, nothing is insurmountable. I would like to emphasize the significance of consistency and surrounding oneself with good companions throughout this pursuit. Additionally, I extend my heartfelt appreciation to the supportive mentors who made this entire experience more accessible and enjoyable for all of us.</p>
<p>The fellowship commenced with a comprehensive introduction to the Python programming language, laying a strong foundation for the subsequent stages of learning. We delved into the realm of machine learning, where we mastered the implementation of algorithms for both supervised and unsupervised learning, as well as reinforcement learning.</p>
<p>In addition to the core data science curriculum, we had the opportunity to enhance our overall skills by taking courses on Coursera, such as “Learning How to Learn” and “Writing in the Sciences,” which undoubtedly contributed to our growth as aspiring data scientists.</p>
<p>Furthermore, we were equipped with essential tools and technologies used in the industry, including sessions on git and GitHub for version control, LaTeX for document preparation, and blogging using Quarto and similar platforms.</p>
<p>I must confess that this fellowship has been a truly transformative experience, one that has enriched my understanding and ignited my passion for data science even more. I am thrilled to invite you all to explore my blog and GitHub repository, where I have documented my learning journey and projects.</p>
<p>I extend my deepest gratitude to the mentors and organizers of this fellowship for their unwavering support and dedication. Their guidance has been instrumental in shaping our learning and instilling the confidence in us to pursue great things in the near future.</p>
<p>With Allah’s blessings and our collective potential, I am super confident that we will achieve remarkable feats in the field of data science. Alhamdulillah!</p>
<p>Thank you all for being a part of this incredible journey.</p>



 ]]></description>
  <category>arewads</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/fellowship-conclusion/index.html</guid>
  <pubDate>Sun, 23 Jul 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/fellowship-conclusion/cert.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Solving the FizzBuzz Problem: Eight Creative Solutions in R Programming</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/fizzbuzz_r/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The FizzBuzz problem is a classic programming exercise that tests a developer’s ability to think logically and solve a simple but often misunderstood challenge. I have written previously about the FizzBuzz challenge here and here. In this article, we will explore ten creative solutions to the FizzBuzz problem using the R programming language. These solutions will demonstrate different approaches, from basic conditional statements to more advanced techniques, showcasing the versatility and power of R.</p>
<section id="solution-1-traditional-approach-with-conditional-statements" class="level2">
<h2 class="anchored" data-anchor-id="solution-1-traditional-approach-with-conditional-statements">Solution 1: Traditional Approach with Conditional Statements:</h2>
<p>This solution follows the traditional FizzBuzz approach, utilizing conditional statements to check divisibility and printing the appropriate output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 1: Traditional Approach with Conditional Statements</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)</span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)</span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)</span>
<span id="cb1-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb1-11">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] "Fizz"
[1] 4
[1] "Buzz"
[1] "Fizz"
[1] 7
[1] 8
[1] "Fizz"
[1] "Buzz"
[1] 11
[1] "Fizz"
[1] 13
[1] 14
[1] "FizzBuzz"
[1] 16
[1] 17
[1] "Fizz"
[1] 19
[1] "Buzz"
[1] "Fizz"
[1] 22
[1] 23
[1] "Fizz"
[1] "Buzz"
[1] 26
[1] "Fizz"
[1] 28
[1] 29
[1] "FizzBuzz"
[1] 31
[1] 32
[1] "Fizz"
[1] 34
[1] "Buzz"
[1] "Fizz"
[1] 37
[1] 38
[1] "Fizz"
[1] "Buzz"
[1] 41
[1] "Fizz"
[1] 43
[1] 44
[1] "FizzBuzz"
[1] 46
[1] 47
[1] "Fizz"
[1] 49
[1] "Buzz"
[1] "Fizz"
[1] 52
[1] 53
[1] "Fizz"
[1] "Buzz"
[1] 56
[1] "Fizz"
[1] 58
[1] 59
[1] "FizzBuzz"
[1] 61
[1] 62
[1] "Fizz"
[1] 64
[1] "Buzz"
[1] "Fizz"
[1] 67
[1] 68
[1] "Fizz"
[1] "Buzz"
[1] 71
[1] "Fizz"
[1] 73
[1] 74
[1] "FizzBuzz"
[1] 76
[1] 77
[1] "Fizz"
[1] 79
[1] "Buzz"
[1] "Fizz"
[1] 82
[1] 83
[1] "Fizz"
[1] "Buzz"
[1] 86
[1] "Fizz"
[1] 88
[1] 89
[1] "FizzBuzz"
[1] 91
[1] 92
[1] "Fizz"
[1] 94
[1] "Buzz"
[1] "Fizz"
[1] 97
[1] 98
[1] "Fizz"
[1] "Buzz"</code></pre>
</div>
</div>
</section>
<section id="solution-2-vectorized-solution-using-modulo-operator" class="level2">
<h2 class="anchored" data-anchor-id="solution-2-vectorized-solution-using-modulo-operator">Solution 2: Vectorized Solution using Modulo Operator:</h2>
<p>Leveraging the vectorized capabilities of R, this solution employs the modulo operator to check divisibility for multiple inputs simultaneously, resulting in efficient code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 2: Vectorized Solution using Modulo Operator</span></span>
<span id="cb3-2">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb3-3">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(numbers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>,</span>
<span id="cb3-4">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(numbers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>,</span>
<span id="cb3-5">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(numbers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>, numbers)))</span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "1"        "2"        "Fizz"     "4"        "Buzz"     "Fizz"    
  [7] "7"        "8"        "Fizz"     "Buzz"     "11"       "Fizz"    
 [13] "13"       "14"       "FizzBuzz" "16"       "17"       "Fizz"    
 [19] "19"       "Buzz"     "Fizz"     "22"       "23"       "Fizz"    
 [25] "Buzz"     "26"       "Fizz"     "28"       "29"       "FizzBuzz"
 [31] "31"       "32"       "Fizz"     "34"       "Buzz"     "Fizz"    
 [37] "37"       "38"       "Fizz"     "Buzz"     "41"       "Fizz"    
 [43] "43"       "44"       "FizzBuzz" "46"       "47"       "Fizz"    
 [49] "49"       "Buzz"     "Fizz"     "52"       "53"       "Fizz"    
 [55] "Buzz"     "56"       "Fizz"     "58"       "59"       "FizzBuzz"
 [61] "61"       "62"       "Fizz"     "64"       "Buzz"     "Fizz"    
 [67] "67"       "68"       "Fizz"     "Buzz"     "71"       "Fizz"    
 [73] "73"       "74"       "FizzBuzz" "76"       "77"       "Fizz"    
 [79] "79"       "Buzz"     "Fizz"     "82"       "83"       "Fizz"    
 [85] "Buzz"     "86"       "Fizz"     "88"       "89"       "FizzBuzz"
 [91] "91"       "92"       "Fizz"     "94"       "Buzz"     "Fizz"    
 [97] "97"       "98"       "Fizz"     "Buzz"    </code></pre>
</div>
</div>
</section>
<section id="solution-3-recursive-function-approach" class="level2">
<h2 class="anchored" data-anchor-id="solution-3-recursive-function-approach">Solution 3: Recursive Function Approach</h2>
<p>This solution showcases the elegance of recursion by defining a recursive function that outputs the FizzBuzz sequence.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 3: Recursive Function Approach</span></span>
<span id="cb5-2">fizzbuzz <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb5-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>()</span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzbuzz</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)</span>
<span id="cb5-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)</span>
<span id="cb5-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)</span>
<span id="cb5-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb5-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(n)</span>
<span id="cb5-14">}</span>
<span id="cb5-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzbuzz</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] "Fizz"
[1] 4
[1] "Buzz"
[1] "Fizz"
[1] 7
[1] 8
[1] "Fizz"
[1] "Buzz"
[1] 11
[1] "Fizz"
[1] 13
[1] 14
[1] "FizzBuzz"
[1] 16
[1] 17
[1] "Fizz"
[1] 19
[1] "Buzz"
[1] "Fizz"
[1] 22
[1] 23
[1] "Fizz"
[1] "Buzz"
[1] 26
[1] "Fizz"
[1] 28
[1] 29
[1] "FizzBuzz"
[1] 31
[1] 32
[1] "Fizz"
[1] 34
[1] "Buzz"
[1] "Fizz"
[1] 37
[1] 38
[1] "Fizz"
[1] "Buzz"
[1] 41
[1] "Fizz"
[1] 43
[1] 44
[1] "FizzBuzz"
[1] 46
[1] 47
[1] "Fizz"
[1] 49
[1] "Buzz"
[1] "Fizz"
[1] 52
[1] 53
[1] "Fizz"
[1] "Buzz"
[1] 56
[1] "Fizz"
[1] 58
[1] 59
[1] "FizzBuzz"
[1] 61
[1] 62
[1] "Fizz"
[1] 64
[1] "Buzz"
[1] "Fizz"
[1] 67
[1] 68
[1] "Fizz"
[1] "Buzz"
[1] 71
[1] "Fizz"
[1] 73
[1] 74
[1] "FizzBuzz"
[1] 76
[1] 77
[1] "Fizz"
[1] 79
[1] "Buzz"
[1] "Fizz"
[1] 82
[1] 83
[1] "Fizz"
[1] "Buzz"
[1] 86
[1] "Fizz"
[1] 88
[1] 89
[1] "FizzBuzz"
[1] 91
[1] 92
[1] "Fizz"
[1] 94
[1] "Buzz"
[1] "Fizz"
[1] 97
[1] 98
[1] "Fizz"
[1] "Buzz"</code></pre>
</div>
</div>
</section>
<section id="solution-4-ternary-operators-for-concise-code" class="level2">
<h2 class="anchored" data-anchor-id="solution-4-ternary-operators-for-concise-code">Solution 4: Ternary Operators for Concise Code:</h2>
<p>By employing the ternary operator, this solution achieves concise code by condensing conditional statements into a single line.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 4: Ternary Operators for Concise Code</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>,</span>
<span id="cb7-4">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>,</span>
<span id="cb7-5">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>, i))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] "Fizz"
[1] 4
[1] "Buzz"
[1] "Fizz"
[1] 7
[1] 8
[1] "Fizz"
[1] "Buzz"
[1] 11
[1] "Fizz"
[1] 13
[1] 14
[1] "FizzBuzz"
[1] 16
[1] 17
[1] "Fizz"
[1] 19
[1] "Buzz"
[1] "Fizz"
[1] 22
[1] 23
[1] "Fizz"
[1] "Buzz"
[1] 26
[1] "Fizz"
[1] 28
[1] 29
[1] "FizzBuzz"
[1] 31
[1] 32
[1] "Fizz"
[1] 34
[1] "Buzz"
[1] "Fizz"
[1] 37
[1] 38
[1] "Fizz"
[1] "Buzz"
[1] 41
[1] "Fizz"
[1] 43
[1] 44
[1] "FizzBuzz"
[1] 46
[1] 47
[1] "Fizz"
[1] 49
[1] "Buzz"
[1] "Fizz"
[1] 52
[1] 53
[1] "Fizz"
[1] "Buzz"
[1] 56
[1] "Fizz"
[1] 58
[1] 59
[1] "FizzBuzz"
[1] 61
[1] 62
[1] "Fizz"
[1] 64
[1] "Buzz"
[1] "Fizz"
[1] 67
[1] 68
[1] "Fizz"
[1] "Buzz"
[1] 71
[1] "Fizz"
[1] 73
[1] 74
[1] "FizzBuzz"
[1] 76
[1] 77
[1] "Fizz"
[1] 79
[1] "Buzz"
[1] "Fizz"
[1] 82
[1] 83
[1] "Fizz"
[1] "Buzz"
[1] 86
[1] "Fizz"
[1] 88
[1] 89
[1] "FizzBuzz"
[1] 91
[1] 92
[1] "Fizz"
[1] 94
[1] "Buzz"
[1] "Fizz"
[1] 97
[1] 98
[1] "Fizz"
[1] "Buzz"</code></pre>
</div>
</div>
</section>
<section id="solution-5-utilizing-the-ifelse-function" class="level2">
<h2 class="anchored" data-anchor-id="solution-5-utilizing-the-ifelse-function">Solution 5: Utilizing the ifelse() Function:</h2>
<p>The ifelse() function in R allows for concise and efficient conditional statements. This solution demonstrates its use to solve the FizzBuzz problem.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 5: Utilizing the `ifelse()` Function</span></span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb9-3">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>,</span>
<span id="cb9-4">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>,</span>
<span id="cb9-5">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>, i)))</span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb9-7">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] "Fizz"
[1] 4
[1] "Buzz"
[1] "Fizz"
[1] 7
[1] 8
[1] "Fizz"
[1] "Buzz"
[1] 11
[1] "Fizz"
[1] 13
[1] 14
[1] "FizzBuzz"
[1] 16
[1] 17
[1] "Fizz"
[1] 19
[1] "Buzz"
[1] "Fizz"
[1] 22
[1] 23
[1] "Fizz"
[1] "Buzz"
[1] 26
[1] "Fizz"
[1] 28
[1] 29
[1] "FizzBuzz"
[1] 31
[1] 32
[1] "Fizz"
[1] 34
[1] "Buzz"
[1] "Fizz"
[1] 37
[1] 38
[1] "Fizz"
[1] "Buzz"
[1] 41
[1] "Fizz"
[1] 43
[1] 44
[1] "FizzBuzz"
[1] 46
[1] 47
[1] "Fizz"
[1] 49
[1] "Buzz"
[1] "Fizz"
[1] 52
[1] 53
[1] "Fizz"
[1] "Buzz"
[1] 56
[1] "Fizz"
[1] 58
[1] 59
[1] "FizzBuzz"
[1] 61
[1] 62
[1] "Fizz"
[1] 64
[1] "Buzz"
[1] "Fizz"
[1] 67
[1] 68
[1] "Fizz"
[1] "Buzz"
[1] 71
[1] "Fizz"
[1] 73
[1] 74
[1] "FizzBuzz"
[1] 76
[1] 77
[1] "Fizz"
[1] 79
[1] "Buzz"
[1] "Fizz"
[1] 82
[1] 83
[1] "Fizz"
[1] "Buzz"
[1] 86
[1] "Fizz"
[1] 88
[1] 89
[1] "FizzBuzz"
[1] 91
[1] 92
[1] "Fizz"
[1] 94
[1] "Buzz"
[1] "Fizz"
[1] 97
[1] 98
[1] "Fizz"
[1] "Buzz"</code></pre>
</div>
</div>
</section>
<section id="solution-6-functional-programming-approach-with-purrr-package" class="level2">
<h2 class="anchored" data-anchor-id="solution-6-functional-programming-approach-with-purrr-package">Solution 6: Functional Programming Approach with purrr Package</h2>
<p>Leveraging the power of functional programming, this solution utilizes the map() function from the purrr package to solve the FizzBuzz problem.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 6: Functional Programming Approach with `purrr` Package</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) {</span>
<span id="cb11-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)</span>
<span id="cb11-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)</span>
<span id="cb11-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)</span>
<span id="cb11-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb11-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(i)</span>
<span id="cb11-12">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] "Fizz"

[[4]]
[1] 4

[[5]]
[1] "Buzz"

[[6]]
[1] "Fizz"

[[7]]
[1] 7

[[8]]
[1] 8

[[9]]
[1] "Fizz"

[[10]]
[1] "Buzz"

[[11]]
[1] 11

[[12]]
[1] "Fizz"

[[13]]
[1] 13

[[14]]
[1] 14

[[15]]
[1] "FizzBuzz"

[[16]]
[1] 16

[[17]]
[1] 17

[[18]]
[1] "Fizz"

[[19]]
[1] 19

[[20]]
[1] "Buzz"

[[21]]
[1] "Fizz"

[[22]]
[1] 22

[[23]]
[1] 23

[[24]]
[1] "Fizz"

[[25]]
[1] "Buzz"

[[26]]
[1] 26

[[27]]
[1] "Fizz"

[[28]]
[1] 28

[[29]]
[1] 29

[[30]]
[1] "FizzBuzz"

[[31]]
[1] 31

[[32]]
[1] 32

[[33]]
[1] "Fizz"

[[34]]
[1] 34

[[35]]
[1] "Buzz"

[[36]]
[1] "Fizz"

[[37]]
[1] 37

[[38]]
[1] 38

[[39]]
[1] "Fizz"

[[40]]
[1] "Buzz"

[[41]]
[1] 41

[[42]]
[1] "Fizz"

[[43]]
[1] 43

[[44]]
[1] 44

[[45]]
[1] "FizzBuzz"

[[46]]
[1] 46

[[47]]
[1] 47

[[48]]
[1] "Fizz"

[[49]]
[1] 49

[[50]]
[1] "Buzz"

[[51]]
[1] "Fizz"

[[52]]
[1] 52

[[53]]
[1] 53

[[54]]
[1] "Fizz"

[[55]]
[1] "Buzz"

[[56]]
[1] 56

[[57]]
[1] "Fizz"

[[58]]
[1] 58

[[59]]
[1] 59

[[60]]
[1] "FizzBuzz"

[[61]]
[1] 61

[[62]]
[1] 62

[[63]]
[1] "Fizz"

[[64]]
[1] 64

[[65]]
[1] "Buzz"

[[66]]
[1] "Fizz"

[[67]]
[1] 67

[[68]]
[1] 68

[[69]]
[1] "Fizz"

[[70]]
[1] "Buzz"

[[71]]
[1] 71

[[72]]
[1] "Fizz"

[[73]]
[1] 73

[[74]]
[1] 74

[[75]]
[1] "FizzBuzz"

[[76]]
[1] 76

[[77]]
[1] 77

[[78]]
[1] "Fizz"

[[79]]
[1] 79

[[80]]
[1] "Buzz"

[[81]]
[1] "Fizz"

[[82]]
[1] 82

[[83]]
[1] 83

[[84]]
[1] "Fizz"

[[85]]
[1] "Buzz"

[[86]]
[1] 86

[[87]]
[1] "Fizz"

[[88]]
[1] 88

[[89]]
[1] 89

[[90]]
[1] "FizzBuzz"

[[91]]
[1] 91

[[92]]
[1] 92

[[93]]
[1] "Fizz"

[[94]]
[1] 94

[[95]]
[1] "Buzz"

[[96]]
[1] "Fizz"

[[97]]
[1] 97

[[98]]
[1] 98

[[99]]
[1] "Fizz"

[[100]]
[1] "Buzz"</code></pre>
</div>
</div>
</section>
</section>
<section id="solution-7-creating-a-lookup-table" class="level1">
<h1>Solution 7: Creating a Lookup Table</h1>
<p>By creating a lookup table using a data frame or a named vector, this solution simplifies the FizzBuzz logic and enhances code readability.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 7: Creating a Lookup Table</span></span>
<span id="cb13-2">lookup_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">number =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">result =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb13-3">lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result[lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span></span>
<span id="cb13-4">lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result[lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span></span>
<span id="cb13-5">lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result[lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span></span>
<span id="cb13-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(lookup_table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "1"        "2"        "Fizz"     "4"        "Buzz"     "Fizz"    
  [7] "7"        "8"        "Fizz"     "Buzz"     "11"       "Fizz"    
 [13] "13"       "14"       "FizzBuzz" "16"       "17"       "Fizz"    
 [19] "19"       "Buzz"     "Fizz"     "22"       "23"       "Fizz"    
 [25] "Buzz"     "26"       "Fizz"     "28"       "29"       "FizzBuzz"
 [31] "31"       "32"       "Fizz"     "34"       "Buzz"     "Fizz"    
 [37] "37"       "38"       "Fizz"     "Buzz"     "41"       "Fizz"    
 [43] "43"       "44"       "FizzBuzz" "46"       "47"       "Fizz"    
 [49] "49"       "Buzz"     "Fizz"     "52"       "53"       "Fizz"    
 [55] "Buzz"     "56"       "Fizz"     "58"       "59"       "FizzBuzz"
 [61] "61"       "62"       "Fizz"     "64"       "Buzz"     "Fizz"    
 [67] "67"       "68"       "Fizz"     "Buzz"     "71"       "Fizz"    
 [73] "73"       "74"       "FizzBuzz" "76"       "77"       "Fizz"    
 [79] "79"       "Buzz"     "Fizz"     "82"       "83"       "Fizz"    
 [85] "Buzz"     "86"       "Fizz"     "88"       "89"       "FizzBuzz"
 [91] "91"       "92"       "Fizz"     "94"       "Buzz"     "Fizz"    
 [97] "97"       "98"       "Fizz"     "Buzz"    </code></pre>
</div>
</div>
<section id="solution-8-functional-reactive-programming-with-shiny" class="level2">
<h2 class="anchored" data-anchor-id="solution-8-functional-reactive-programming-with-shiny">Solution 8: Functional Reactive Programming with Shiny</h2>
<p>This solution showcases the power of Shiny, an R package for web application development, by building an interactive FizzBuzz generator.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 8: Functional Reactive Programmming with Shiny</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb15-3"></span>
<span id="cb15-4">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numericInput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter a number:"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"result"</span>)</span>
<span id="cb15-7">)</span>
<span id="cb15-8"></span>
<span id="cb15-9">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, output) {</span>
<span id="cb15-10">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb15-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)</span>
<span id="cb15-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)</span>
<span id="cb15-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)</span>
<span id="cb15-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb15-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n)</span>
<span id="cb15-19">  })</span>
<span id="cb15-20">}</span>
<span id="cb15-21"></span>
<span id="cb15-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion:</h1>
<p>The FizzBuzz problem provides an excellent opportunity to explore various programming techniques in R, ranging from basic conditional statements to advanced functional programming concepts. By presenting eight diverse solutions, this article aimed to demonstrate the flexibility and creativity that R offers when solving coding challenges. Each approach offers a unique perspective and highlights different aspects of the R language, allowing developers to expand their knowledge and problem-solving skills. Whether you are a beginner or an experienced R programmer, these solutions provide valuable insights into the multiple ways to tackle the FizzBuzz problem in R.</p>


</section>

 ]]></description>
  <category>r programming</category>
  <category>fizzbuzz</category>
  <category>loops</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/fizzbuzz_r/index.html</guid>
  <pubDate>Sun, 18 Jun 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Harnessing the Power of Natural Language Processing: A Guide to Python and R Packages and Practical Use-Cases</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/nlp/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In today’s digital age, the sheer volume of text-based data being generated has grown exponentially. Extracting meaningful insights and knowledge from this vast amount of information is a daunting task, however, Natural Language Processing (NLP) offers a solution. NLP combines artificial intelligence, computational linguistics, and computer science to enable computers to understand, interpret, and generate human language. In this article, we will explore popular Python and R packages (as both languages are dear to my heart) for NLP and delve into some practical use-cases that demonstrate the power of this technology.</p>
</section>
<section id="python-packages-for-nlp" class="level2">
<h2 class="anchored" data-anchor-id="python-packages-for-nlp">Python Packages for NLP</h2>
<ol type="1">
<li><p>NLTK (Natural Language Toolkit): NLTK is a comprehensive library that provides a wide range of tools and algorithms for NLP tasks. It offers functionalities for tokenization, stemming, lemmatization, part-of-speech tagging, named entity recognition, sentiment analysis, and much more. NLTK is an excellent choice for beginners due to its extensive documentation and user-friendly interfaces.</p></li>
<li><p>spaCy:</p></li>
</ol>
<p>spaCy is a powerful and efficient library for NLP tasks. It is designed to be fast and scalable, making it suitable for processing large volumes of text. spaCy provides pre-trained models for various languages, allowing users to perform tasks such as tokenization, entity recognition, dependency parsing, and text classification with ease.</p>
<ol start="3" type="1">
<li>TextBlob :</li>
</ol>
<p>TextBlob is a simple and intuitive library built on top of NLTK. It provides an easy-to-use API for common NLP tasks, including sentiment analysis, part-of-speech tagging, noun phrase extraction, translation, and more. TextBlob also includes a sentiment lexicon and can be extended with custom models.</p>
</section>
<section id="r-packages-for-nlp" class="level2">
<h2 class="anchored" data-anchor-id="r-packages-for-nlp">R Packages for NLP</h2>
<ol type="1">
<li><p>tm (Text Mining Package): The tm package is a popular choice for text mining and NLP in R. It offers functions for data preprocessing, such as text cleaning, tokenization, and stemming. The package also provides convenient utilities for creating document-term matrices and performing various text mining operations like topic modeling and sentiment analysis.</p></li>
<li><p>tidytext:</p></li>
</ol>
<p>tidytext is an R package that leverages the principles of tidy data and the tidyverse ecosystem for NLP tasks. It provides a consistent and straightforward interface for working with text data, allowing users to perform operations like tokenization, n-gram creation, sentiment analysis, and term frequency-inverse document frequency (TF-IDF) calculations.</p>
<ol start="3" type="1">
<li>NLP:</li>
</ol>
<p>The NLP package in R provides a broad set of functionalities for natural language processing. It includes tools for part-of-speech tagging, named entity recognition, tokenization, stemming, and sentiment analysis. The package also offers utilities for creating word clouds, visualizing term frequencies, and exploring co-occurrence networks.</p>
</section>
<section id="practical-use-cases-of-nlp" class="level2">
<h2 class="anchored" data-anchor-id="practical-use-cases-of-nlp">Practical Use-Cases of NLP</h2>
<ol type="1">
<li><p>Sentiment Analysis: NLP allows us to analyze sentiment from text data, enabling businesses to understand customer opinions, evaluate product reviews, and gauge public sentiment towards brands. By using sentiment analysis, companies can make data-driven decisions to improve their products and services, enhance customer satisfaction, and manage their online reputation effectively.</p></li>
<li><p>Text Classification:</p></li>
</ol>
<p>NLP techniques can be employed for automatic text classification, where documents are categorized into predefined classes. This has various applications, such as spam email detection, sentiment-based classification, topic categorization, and content filtering. Text classification helps in organizing and retrieving information efficiently, saving time and effort.</p>
<ol start="3" type="1">
<li>Named Entity Recognition (NER) cont’d:</li>
</ol>
<p>NER allows for the extraction of key information from large volumes of text, aiding in tasks like information retrieval, knowledge graph construction, and data integration. For example, in the healthcare industry, NER can be used to identify medical entities from clinical records, enabling better patient care and medical research.</p>
<ol start="4" type="1">
<li>Machine Translation:</li>
</ol>
<p>NLP plays a pivotal role in machine translation, making it possible to automatically translate text from one language to another. This has immense practical value in global communication, cross-border collaborations, and content localization. Machine translation systems like Google Translate leverage NLP techniques to deliver accurate and fluent translations.</p>
<ol start="5" type="1">
<li>Chatbots and Virtual Assistants:</li>
</ol>
<p>Natural Language Processing is at the core of chatbot and virtual assistant technology. These AI-powered systems can understand and respond to human queries, provide customer support, and automate routine tasks. NLP enables chatbots to process and interpret natural language inputs, generating relevant and context-aware responses, enhancing user experiences.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Natural Language Processing has revolutionized the way we interact with text-based data. With the availability of powerful Python and R packages, NLP tasks have become more accessible for people with limited programming skills and the tasks have become more efficient too. Packages like NLTK, spaCy, TextBlob, tm, tidytext, and NLP offer a rich set of tools and functionalities for various NLP tasks. From sentiment analysis and text classification to named entity recognition and machine translation, NLP has practical applications across industries, including customer feedback analysis, information extraction, and automated language processing systems.</p>
<p>As NLP continues to advance, we can expect even more sophisticated algorithms and techniques to emerge, further enhancing our ability to extract valuable insights from text data. Whether it’s analyzing customer sentiments, automating language processing tasks, or building intelligent chatbots, NLP opens up a world of possibilities for businesses and researchers alike. By harnessing the power of NLP and leveraging the diverse range of Python and R packages available, we can unlock the full potential of natural language understanding and pave the way for a more connected and intelligent future.</p>


</section>

 ]]></description>
  <category>natural language processing</category>
  <category>python</category>
  <category>r</category>
  <category>packages</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/nlp/index.html</guid>
  <pubDate>Mon, 12 Jun 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/nlp/nlp.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>JavaScript FizzBuzz Solutions</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/fizzbuzz-javascript/index.html</link>
  <description><![CDATA[ 




<p>FizzBuzz is a common programming problem that is often used as an exercise in basic programming logic and algorithm development. The problem is typically presented as follows:</p>
<blockquote class="blockquote">
<p>Write a program that prints the numbers from 1 to 100. For multiples of three, print “Fizz” instead of the number, and for multiples of five, print “Buzz” instead of the number. For numbers that are multiples of both three and five, print “FizzBuzz”.</p>
</blockquote>
<p>In essence, the FizzBuzz problem requires the programmer to loop through a sequence of numbers, identify which ones are multiples of 3, 5, or both, and print the appropriate text instead of the number. The problem is often used as a simple test of a programmer’s ability to use loops, conditionals, and basic programming concepts like variables and functions. It can be solved using a variety of programming languages, and is often used as an interview question for entry-level software development positions.</p>
<p>In this article, I present, as a follow-up to my Python article, 15 different solutions to the FizzBuzz problem in the JavaScript programming language. This is to highlight the flair of JavaScript.</p>
<p>Here are 15 cool FizzBuzz solutions in JavaScript:</p>
<ul>
<li>Using a for loop and if/else statements:</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">  }</span>
<span id="cb1-11">}</span></code></pre></div>
<ul>
<li>Using a for loop and a switch statement:</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb2-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-4">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-7">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-10">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-13">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-14">  }</span>
<span id="cb2-15">}</span></code></pre></div>
<ul>
<li>Using a while loop and a ternary operator:</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb3-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(</span>
<span id="cb3-4">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-5">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-6">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-7">    i</span>
<span id="cb3-8">  )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">  i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb3-10">}</span></code></pre></div>
<ul>
<li>Using recursion:</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(num) {</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-4">  }</span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-6">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(</span>
<span id="cb4-7">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-8">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-9">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-10">    num</span>
<span id="cb4-11">  )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12">}</span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<ul>
<li>Using Array.from() and map():</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>({ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb5-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (</span>
<span id="cb5-4">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-5">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-6">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-7">    num</span>
<span id="cb5-8">  )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-9">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<ul>
<li>Using a do-while loop and a conditional operator:</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> {</span>
<span id="cb6-3">  i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb6-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5">} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<ul>
<li>Using a for loop and an object to store the strings:</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> strings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb7-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> strings) {</span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb7-6">      output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> strings[key]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7">    }</span>
<span id="cb7-8">  }</span>
<span id="cb7-9">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-10">}</span></code></pre></div>
<ul>
<li>Using recursion and an array to store the strings:</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> fizzBuzzStrings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(num) {</span>
<span id="cb8-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-5">  }</span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(fizzBuzzStrings[num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> num)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-8">}</span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fizzBuzzRecursive</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<ul>
<li>Using a for loop and a template literal:</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb9-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}${</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3">}</span></code></pre></div>
<ul>
<li>Using a for loop and a function to generate the output:</li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generateOutput</span>(num) {</span>
<span id="cb10-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb10-4">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-5">  }</span>
<span id="cb10-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb10-7">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-8">  }</span>
<span id="cb10-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-10">}</span>
<span id="cb10-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb10-12">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generateOutput</span>(i))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-13">}</span></code></pre></div>
<ul>
<li>Using a for loop and a nested ternary operator:</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb11-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> i))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-3">}</span></code></pre></div>
<ul>
<li>Using a for loop and an array to store the numbers and strings:</li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Array</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">from</span>({ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-2">arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forEach</span>((num) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb12-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>][num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> output2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>][num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}${</span>output2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> num)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-6">})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<ul>
<li>Using a for loop and a self-invoking function to generate the output:</li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb13-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>((<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> () {</span>
<span id="cb13-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb13-5">      output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-6">    }</span>
<span id="cb13-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb13-8">      output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-9">    }</span>
<span id="cb13-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-11">  })())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-12">}</span></code></pre></div>
<ul>
<li>Using a for loop and two switch statements:</li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb14-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-4">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb14-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-6">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-7">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-9">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-10">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-11">      }</span>
<span id="cb14-12">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">case</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-14">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-15">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-17">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-18">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-19">  }</span>
<span id="cb14-20">}</span></code></pre></div>
<ul>
<li>Using a for loop and a map() method to generate the output:</li>
</ul>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb15-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb15-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Buzz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fizz"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FizzBuzz"</span>][i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(output)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-4">}</span></code></pre></div>
<p>In conclusion, there are several ways to approach the FizzBuzz problem in JavaScript and I present just 15 above. As you learn new programming languages, try solving problems in different creative ways as this can boost your understanding of the new programming language and your grounding in programming in general.</p>



 ]]></description>
  <category>javascript</category>
  <category>programming</category>
  <category>loops</category>
  <category>fizzbuzz</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/fizzbuzz-javascript/index.html</guid>
  <pubDate>Sat, 13 May 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>From Data to Insight: Visualizing Quantities, Proportions, Relationships, and Distributions with Python’s Matplotlib and Seaborn</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/visualization/index.html</link>
  <description><![CDATA[ 




<p>Data visualization is a crucial part of data analysis as it aids in our ability to comprehend and convey to a larger audience complicated data correlations, patterns, and insights. Thanks to its potent modules, such as Matplotlib and Seaborn, Python has gained popularity as a language for data visualization. In this post, we’ll look at how to visualize quantities, proportions, relationships, and distributions using these libraries and how to get useful insights out of them.</p>
<section id="visualizing-quantities" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-quantities">Visualizing Quantities</h2>
<p>Any information that is measurable and able to be expressed numerically is considered quantitative. Understanding the distribution and dispersion of values, the existence of outliers, and the link between various variables is made easier by visualizing quantitative data.</p>
<p>Histograms are one of the most used tools for visualizing quantitative data. A graph that displays the frequency distribution of a collection of continuous data is called a histogram. Histograms can be easily made with only a few lines of code thanks to Matplotlib and Seaborn. Let’s look at an illustration:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"></span>
<span id="cb1-5">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a histogram using Matplotlib</span></span>
<span id="cb1-8">plt.hist(data, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Histogram of Random Data'</span>)</span>
<span id="cb1-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb1-11">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb1-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-2-output-1.png" width="585" height="449"></p>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a histogram using Seaborn</span></span>
<span id="cb2-2">sns.histplot(data, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Histogram of Random Data'</span>)</span>
<span id="cb2-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb2-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb2-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-3-output-1.png" width="585" height="449"></p>
</div>
</div>
<p>Using NumPy’s random.normal function, we produce some random data in this example. Then, we use Matplotlib and Seaborn to produce two histograms, one using each program. While the histograms generated by the two libraries are comparable, Seaborn’s histplot function includes a few more capabilities, such as the ability to plot a KDE (Kernel Density Estimate) in addition to the histogram.</p>
</section>
<section id="visualizing-proportions" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-proportions">Visualizing Proportions</h2>
<p>Any information that may be stated as a percentage or a fraction of a whole is considered proportional data. Understanding the relative sizes of several categories or groups and how they affect the overall picture is made easier with the aid of proportional data visualization. Using a pie chart, donut chart, or waffle chart, you can see proportions.</p>
<p>Pie charts are one of the most commonly used tools for representing proportional data. A circular graph called a pie chart demonstrates the proportional breakdown of a group of categorical data. Both Matplotlib and Seaborn provide pie chart creation routines. Let’s look at an illustration:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>]</span>
<span id="cb3-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>]</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a pie chart using Matplotlib</span></span>
<span id="cb3-5">plt.pie(data, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels)</span>
<span id="cb3-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Proportional Data'</span>)</span>
<span id="cb3-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-4-output-1.png" width="389" height="409"></p>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a pie chart using Seaborn</span></span>
<span id="cb4-2">sns.set_style(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'whitegrid'</span>)</span>
<span id="cb4-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Proportional Data'</span>)</span>
<span id="cb4-4">sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pastel'</span>)</span>
<span id="cb4-5">plt.pie(data, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sns.color_palette())</span>
<span id="cb4-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-5-output-1.png" width="389" height="409"></p>
</div>
</div>
<p>In this illustration, we generate a set of labels and random data. After that, we use Seaborn and Matplotlib, respectively, to construct two pie charts. We can color-code each category using a specified palette thanks to Seaborn’s color_palette function.</p>
</section>
<section id="visualizing-relationships" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-relationships">Visualizing Relationships</h2>
<p>Any data that demonstrates the connection between two or more variables is referred to as relationship data. Visualizing connection data enables us to comprehend the correlation, directionality, and linear or nonlinear nature of the relationship.</p>
<p>Scatter plots are among the most commonly used tools for displaying relationship data. An illustration of the relationship between two sets of data is a scatter plot. Both Matplotlib and Seaborn include tools for making scatter plots. Let’s look at an illustration:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create some random data</span></span>
<span id="cb5-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb5-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a scatter plot using Matplotlib</span></span>
<span id="cb5-6">plt.scatter(x, y)</span>
<span id="cb5-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Scatter Plot of Random Data'</span>)</span>
<span id="cb5-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<span id="cb5-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="cb5-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-6-output-1.png" width="587" height="449"></p>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a scatter plot using Seaborn</span></span>
<span id="cb6-2">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span>
<span id="cb6-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Scatter Plot of Random Data'</span>)</span>
<span id="cb6-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<span id="cb6-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="cb6-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-7-output-1.png" width="587" height="449"></p>
</div>
</div>
<p>In this illustration, we generate the random data sets x and y. Then, we use Matplotlib and Seaborn to construct two scatter plots, one using each program. The scatterplot function in Seaborn contains a few extra capabilities, like the ability to color-code points according to a third variable.</p>
</section>
<section id="visualizing-distributions" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-distributions">Visualizing Distributions</h2>
<p>Any data that demonstrates the frequency of occurrence of various values or ranges of values is referred to as distribution data. Understanding the distribution’s shape, the existence of outliers, and the likelihood of specific values or ranges of values are all made easier by visualizing distribution data.</p>
<p>Density plots are one of the most popular tools for displaying distribution data. A graph that displays the probability density function of a collection of data is called a density plot. Both Matplotlib and Seaborn include tools for making density graphs. Let’s look at an illustration:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a density plot using Matplotlib</span></span>
<span id="cb7-4">plt.hist(data, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb7-5">sns.kdeplot(data, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb7-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Density Plot of Random Data'</span>)</span>
<span id="cb7-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb7-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Density'</span>)</span>
<span id="cb7-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-8-output-1.png" width="597" height="449"></p>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a density plot using Seaborn</span></span>
<span id="cb8-2">sns.histplot(data, kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, stat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'density'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb8-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Density Plot of Random Data'</span>)</span>
<span id="cb8-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb8-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Density'</span>)</span>
<span id="cb8-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/visualization/index_files/figure-html/cell-9-output-1.png" width="597" height="449"></p>
</div>
</div>
<p>Using NumPy’s random.normal function, we generate a set of random data in this example. Then, we use Matplotlib and Seaborn to produce two density charts, one using each program. We may combine a histogram and a density plot into one visualization using Seaborn’s histplot function.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this article, we looked at how to depict quantities, proportions, relationships, and distributions using Matplotlib and Seaborn. Data visualization is a potent tool for comprehending and expressing complicated data relationships, trends, and insights. We can get valuable insights from our data using these libraries, and we can use those insights to make decisions that are well-informed.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>data visualization</category>
  <category>matplotlib</category>
  <category>seaborn</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/visualization/index.html</guid>
  <pubDate>Fri, 12 May 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/viz/pythondataviz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mastering Scientific Writing: Key Takeaways from Coursera’s Writing in the Sciences MOOC by Kristin-Sainani</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/sciences-writing/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Since written communication is the primary way that scientific discoveries are disseminated to the public, scientific writing is a crucial skill for scientists and researchers. For effectively communicating ideas, presenting the findings of research investigations, and expanding scientific knowledge, the ability to write clear and concise scientific articles is essential.</p>
<p>In addition to presenting facts and findings, scientific writing often entails interpreting findings and coming up with brand-new theories. Furthermore, objectiveness, precision, and clarity are qualities of good scientific writing that make it possible for subsequent researchers to replicate and improve on the reported work.</p>
<p>Scientists and researchers can improve their writing abilities, learn how to create compelling abstracts, opening statements, and conclusions, and obtain a better understanding of the peer-review procedure by taking a course on scientific writing. Scientists and researchers can increase the exposure and influence of their work by writing more effectively and communicating their findings to peers, collaborators, and the larger scientific community.</p>
<p>Successful scientific communication is fundamentally dependent on effective scientific writing; however, many researchers and scientists find it difficult to successfully convey their study findings. The Coursera MOOC “Writing in the Sciences” addresses this difficulty by giving students the tools and strategies they need to develop their scientific writing abilities.</p>
<p>Anyone wishing to improve their ability to write scientific publications must take this course, which is instructed by renowned Stanford professor Kristin Sainani.</p>
<p>I recently finished the course, which was a requirement for our current Arewa Data Science Fellowship. I describe my key takeaways from the course and underline the crucial skills and knowledge discussed in this post.</p>
</section>
<section id="the-value-of-clarity-in-writing" class="level2">
<h2 class="anchored" data-anchor-id="the-value-of-clarity-in-writing">The Value of Clarity in Writing</h2>
<p>The value of concise writing in scientific communication is one of the major concepts stressed throughout the course. Scientific writers must avoid frequent errors, such as the use of technical jargon or needlessly complex language, in order to successfully communicate study findings. Instead, authors should strive for simplicity and clarity while utilizing language that is clear to readers.</p>
</section>
<section id="scientific-paper-structure" class="level2">
<h2 class="anchored" data-anchor-id="scientific-paper-structure">Scientific Paper Structure</h2>
<p>Effective scientific paper structure is a crucial skill that is addressed in the course. Several important elements of scientific publications often appear in the introduction, methods, results, and discussion sections. Each component needs to be well-written and concise, with a seamless flow between them.</p>
</section>
<section id="effective-evidence-use" class="level2">
<h2 class="anchored" data-anchor-id="effective-evidence-use">Effective Evidence Use</h2>
<p>The use of evidence to back up claims and conclusions is essential to good scientific writing. I gained knowledge on how to successfully use data, statistics, and literature citations in their scientific writing. I also know how to assess the reliability of the evidence and how to use it to bolster my claims.</p>
</section>
<section id="peer-editing-and-review" class="level2">
<h2 class="anchored" data-anchor-id="peer-editing-and-review">Peer editing and review</h2>
<p>Additionally, the course highlighted the value of peer review as well as effective methods for reviewing and editing scientific writing. I gained knowledge on how to give constructive criticism and how to use criticism to enhance my work. The accuracy, clarity, and effectiveness of scientific writing depend on this ability.</p>
</section>
<section id="research-ethics-and-responsible-conduct" class="level2">
<h2 class="anchored" data-anchor-id="research-ethics-and-responsible-conduct">Research Ethics and Responsible Conduct</h2>
<p>The course placed a strong emphasis on writing abilities as well as the value of ethical behavior in scientific writing and research. I gained knowledge on how to avoid conflicts of interest, data fabrication, and plagiarism.</p>
</section>
<section id="animated-and-educational-lectures" class="level2">
<h2 class="anchored" data-anchor-id="animated-and-educational-lectures">Animated and Educational Lectures</h2>
<p>The interesting and educational lectures given by Professor Sainani are one of the highlights of the Coursera course “Writing in the Sciences.” She uses a range of examples and real-world settings to illustrate important topics in her lectures, which are given in a straightforward and succinct manner. For instance, when demonstrating how to create personal statements, she provided examples of previous personal statements she had written, illustrating how including tales can help the reader relate to the content more effectively. Her personable and encouraging teaching style makes the training approachable and fun.</p>
</section>
<section id="additional-fundamental-skills-taught-in-the-course" class="level2">
<h2 class="anchored" data-anchor-id="additional-fundamental-skills-taught-in-the-course">Additional Fundamental Skills Taught in the Course</h2>
<p>The “Writing in the Sciences” course on Coursera includes several other crucial abilities for scientists and researchers in addition to the ones mentioned above. These consist of:</p>
<p><strong>Writing grants</strong>: How to create a compelling research plan, find funding possibilities, and write excellent grant proposals that address reviewer comments.</p>
<p><strong>Recommendation Letters</strong>: The course instructs students on how to ask for and compose effective recommendation letters, including how to pick the best referees, supply the required details, and highlight the applicant’s qualities.</p>
<p><strong>Review Article</strong>: How to produce review articles that summarize and evaluate current research on a certain subject. Additionally, the course taught how to recognize important research and points of contention, assess the reliability of the data, and write an organized and succinct review article.</p>
<p><strong>Writing Effective Personal Statements for Graduate School Applications</strong>: The course discussed how to create great personal statements for graduate school applications, including how to highlight pertinent experience and skills, describe your research interests, and show that you are a good fit for the program.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>For scientists and researchers who want to strengthen their writing abilities in the scientific field, Coursera’s “Writing in the Sciences” course is an excellent resource. The course offers a thorough introduction to the rules and methods of effective scientific writing, covering topics like the rules of clear writing, the format of scientific papers, the use of evidence, peer review and editing, ethics and responsible research practices, as well as crucial abilities like grant writing, recommendation letter writing, review article writing, and personal statement writing.</p>
<p>Kristin Sainani’s intelligent and captivating presentations add interest and fun to the training. Because of her direct and plain teaching style, utilization of examples and real-world challenges, and supportive approach, students may confidently enhance their writing talents.</p>
<p>By improving these skills, scientists and researchers can more effectively communicate their discoveries, establish their knowledge and authority in the subject, and advance their scientific careers. The “Writing in the Sciences” course is a smart investment for anyone looking to develop their scientific writing skills and flourish in the sciences and beyond.</p>


</section>

 ]]></description>
  <category>writing</category>
  <category>sciences</category>
  <category>coursera</category>
  <category>mooc</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/sciences-writing/index.html</guid>
  <pubDate>Tue, 25 Apr 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/sciences-writing/sciences_writing.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Writing Clean Codes in JavaScript: A Necessity</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/cleancodes/index.html</link>
  <description><![CDATA[ 




<p>I recently started seriously practicing JavaScript, hence this post. Another impact of being a fellow of the Arewa Data Science Academy. Writing clean and readable code is an essential skill for any JavaScript developer. In fact, for all developers, regardless of favoured language. Clean code is code that is easy to understand, modify, and maintain. It is also code that follows the best practices and standards of the language. In this essay, we will discuss some of the best practices and style guides for writing clean JavaScript code.</p>
<ol type="1">
<li><p>Use Meaningful Names for Variables, Functions, and Classes One of the most important aspects of writing clean code is to use meaningful names for your variables, functions, and classes. Your code should be self-explanatory, and the names should reflect the purpose of the code. Avoid abbreviations and acronyms that are not widely known, and use camelCase for variables and functions.</p></li>
<li><p>Use Consistent Formatting Consistent formatting is essential for readability and maintainability. Use consistent indentation, spacing, and line breaks. Many style guides recommend using two spaces for indentation and avoiding tabs. Use a consistent brace style, either the “K&amp;R style” or the “Allman style”.</p></li>
<li><p>Use Comments Comments are an essential part of any codebase. They help explain the code’s purpose, how it works, and why it was written. Use comments to describe your functions and classes, to explain complex code, and to document your code’s edge cases. However, be careful not to overuse comments or to write comments that simply restate the code.</p></li>
<li><p>Avoid Global Variables Global variables can cause a lot of problems in your code. They can create unexpected side effects, make debugging difficult, and make it harder to reason about your code. Instead, use local variables, function parameters, and closures to encapsulate your code and avoid global variables.</p></li>
<li><p>Use Short Functions and Classes Short functions and classes are easier to read, understand, and maintain. Try to keep your functions and classes as short as possible, ideally under 50 lines of code. If a function or class is too long, consider breaking it down into smaller functions or classes.</p></li>
<li><p>Use Error Handling Error handling is an important part of any codebase. It helps prevent bugs, improve user experience, and make your code more reliable. Use try-catch blocks to catch and handle errors, and use descriptive error messages to help users understand what went wrong.</p></li>
<li><p>Use Modern JavaScript Features Modern JavaScript features such as arrow functions, template literals, and destructuring can help make your code more concise and expressive. Use these features whenever possible, but be careful not to overuse them and make your code less readable.</p></li>
<li><p>Use a Style Guide Using a style guide can help ensure consistency and readability in your codebase. Some popular style guides for JavaScript include the Airbnb JavaScript Style Guide, Google JavaScript Style Guide, and StandardJS. Choose a style guide that fits your team’s needs and preferences and follow it consistently.</p></li>
</ol>
<p>In conclusion, writing clean code is an essential skill for any JavaScript developer. Use meaningful names, consistent formatting, comments, avoid global variables, short functions and classes, error handling, modern JavaScript features, and a style guide to ensure your code is clean and readable. With these practices and guidelines, you can write high-quality code that is easy to understand, modify, and maintain.</p>



 ]]></description>
  <category>javascript</category>
  <category>code</category>
  <category>writing</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/cleancodes/index.html</guid>
  <pubDate>Tue, 18 Apr 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/welcome/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Overview of Data Processing Using Pandas</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/pandas2/index.html</link>
  <description><![CDATA[ 




<p>Data processing is an important aspect of data analysis and provides a way to generate insights and information from large datasets, and also to prepare data for use in, say, training a machine learning model. In this article, I will briefly provide an overview of how to use Pandas - a popular data manipulation library in Python - for data processing.</p>
<p>Pandas is a high-performance library that provides easy-to-use data structures and data analysis tools for Python. It offers powerful capabilities for data processing, including data cleaning, transformation, merging, and analysis, among others.</p>
<p>One of the core data structures in Pandas is the DataFrame, which is essentially a two-dimensional table of data. This table is indexed by rows and columns and can be thought of as a spreadsheet or a SQL table. Pandas also provides a Series data structure, which is a one-dimensional labelled array capable of holding any data type.</p>
<p>The first step in data processing with Pandas is to load data into a DataFrame. Pandas supports reading data from a variety of sources, including CSV, Excel, SQL databases, and JSON, among others. Once the data is loaded into a DataFrame, we can start exploring, cleaning, and transforming it.</p>
<p>Data cleaning is an important step in data processing, as datasets in most cases contain missing values, duplicate records, or incorrect data types. Pandas provides several methods for cleaning data, including dropping missing values, filling in missing values, and removing duplicates. For example, the dropna() method can be used to remove rows with missing values from a DataFrame, while the fillna() method can be used to fill in missing values with a specified value or method. The drop_duplicates() method can be used to remove duplicate records from a DataFrame based on specified columns.</p>
<p>Once the data is cleaned, we can start transforming it to extract useful information. Pandas provides several methods for data transformation, including filtering, grouping, and aggregating data. For example, the loc[] method can be used to filter rows based on a given condition, while the groupby() method can be used to group data by one or more columns and apply aggregation functions such as sum(), mean(), and count().</p>
<p>Merging and joining datasets is another common task in data processing, especially when dealing with data from multiple sources. Pandas provides several methods for merging and joining datasets, including concat(), merge(), and join(). The concat() method can be used to concatenate two or more DataFrames vertically or horizontally, while the merge() method can be used to merge two DataFrames based on one or more common columns. The join() method is similar to merge(), but it is used to join two DataFrames based on their index.</p>
<p>Finally, once the data is processed, we can analyze it to extract insights and information. Pandas provides several methods for data analysis, including statistical analysis, visualization, and machine learning. For example, the describe() method can be used to generate summary statistics for a DataFrame, while the plot() method can be used to create various types of visualizations, such as line charts, bar charts, and scatter plots. Pandas also integrates well with machine learning libraries such as scikit-learn, allowing us to perform various machine learning tasks on our data.</p>
<p>In conclusion, in this article, I have provided an overview of how Pandas can be used for data processing and analysis in Python. I have highlighted some of the capabilities it provides for data cleaning, transformation, merging, and analysis. Using Pandas, we can easily load, clean, transform, and analyze data, making it a valuable tool for data scientists and analysts.</p>



 ]]></description>
  <category>python</category>
  <category>pandas</category>
  <category>data analysis</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/pandas2/index.html</guid>
  <pubDate>Thu, 06 Apr 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/pandas/pandas.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Machine-Learning: Relationship With Deep Learning, AI ,and Data Science</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/ml-ai/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/ml-ai/mlai.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">ml-ai-data-science</figcaption>
</figure>
</div>
<p>The picture above,taken from Microsoft’s free introduction to machine learning course, available on github, succinctly expresses how the concepts relate to one another.</p>
<p>Artificial Intelligence (AI), Machine Learning (ML), Deep Learning (DL), and Data Science are related but distinct fields in computer science that involve different techniques and applications.</p>
<p><code>AI</code> refers to the ability of machines to perform tasks that would normally require human intelligence. These include activties such as visual perception, speech recognition, decision-making, and natural language processing. AI is a broad field that encompasses a range of techniques and applications, including rule-based systems, expert systems, neural networks, and evolutionary algorithms.</p>
<p><code>Machine Learning (ML)</code> is a subfield of AI that involves developing algorithms that can learn from and make predictions using data. Rather than being programmed directly with explicit rules, ML algorithms learn patterns and relationships in data through experience and iteration. Examples of ML algorithms include decision trees, random forests, and support vector machines.</p>
<p><code>Deep Learning (DL)</code> is a subset of ML that involves training deep neural networks, which are complex mathematical models inspired by the structure and function of the human brain. DL has enabled breakthroughs in areas such as computer vision, natural language processing, and speech recognition. Examples of DL algorithms include convolutional neural networks, recurrent neural networks, and generative adversarial networks.</p>
<p><code>Data Science</code> is a broader field that involves extracting insights and knowledge from data using a combination of statistical analysis, machine learning, and domain expertise. Data scientists use techniques such as data mining, data visualization, and predictive modeling to extract actionable insights from data. Data science has applications in a wide range of fields, including healthcare, finance, marketing, and social science.</p>
<p>In summary, AI refers to the broader goal of creating machines that can perform human-like tasks, while machine learning and deep learning are specific techniques for achieving that goal. Data science is a broader field that involves using statistical analysis and machine learning to extract insights and knowledge from data.</p>



 ]]></description>
  <category>machine learning</category>
  <category>deep learning</category>
  <category>ai</category>
  <category>data science</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/ml-ai/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/ml-ai/mlai.png" medium="image" type="image/png" height="135" width="144"/>
</item>
<item>
  <title>Creating Beautiful Visualizations with Python: A Guide to Pandas Matplotlib and Seaborn</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/viz/index.html</link>
  <description><![CDATA[ 




<p>Data visualization is a crucial aspect of data analysis as it helps in understanding data better. Python provides several libraries for data visualization, and in this article, we will explore three of the most commonly used libraries for data visualization in Python: pandas, matplotlib, and seaborn.</p>
<p>Pandas is a powerful library for data manipulation and analysis. It provides data structures for efficiently storing and manipulating large datasets. One of the primary data structures provided by pandas is the DataFrame, which is a two-dimensional table-like structure with labeled axes. The pandas library also provides a number of methods for data manipulation and cleaning, such as data cleaning, data merging, and data transformation.</p>
<p>Matplotlib is a plotting library for Python that provides a range of 2D plotting capabilities. It provides a high level of customization, making it possible to create complex visualizations with ease. Matplotlib also provides support for a wide range of output formats, including PDF, PNG, and SVG.</p>
<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for creating attractive and informative statistical graphics. Seaborn makes it easy to create complex visualizations by providing a range of built-in styles and color palettes.</p>
<p>Let’s start by exploring the pandas library.</p>
<section id="data-visualization-with-pandas" class="level3">
<h3 class="anchored" data-anchor-id="data-visualization-with-pandas">Data visualization with pandas</h3>
<p>Pandas provides a number of methods for data visualization. One of the most commonly used methods is the plot method, which can be used to create a wide range of visualizations, including line plots, scatter plots, bar plots, and histograms.</p>
<p>To demonstrate the use of pandas for data visualization, let’s start by loading a sample dataset. We will use the famous Iris dataset, which contains information about the lengths and widths of petals and sepals for three different species of Iris flowers. I first came across this dataset when I first started learning R’s tidyverse.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the iris dataset</span></span>
<span id="cb1-5">iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv'</span>)</span></code></pre></div>
</div>
<p>We can use the plot method to create a scatter plot of the petal length and width for the Iris dataset:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">iris.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter'</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_length'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_width'</span>)</span>
<span id="cb2-2">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/viz/index_files/figure-html/cell-3-output-1.png" width="589" height="429"></p>
</div>
</div>
<p>As can be seen from the above, pandas makes it easy to create a scatter plot with just a single line of code. We can also customize the plot by adding labels and a title:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">iris.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scatter'</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_length'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_width'</span>)</span>
<span id="cb3-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Petal Length'</span>)</span>
<span id="cb3-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Petal Width'</span>)</span>
<span id="cb3-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iris Petal Length vs. Width'</span>)</span>
<span id="cb3-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/viz/index_files/figure-html/cell-4-output-1.png" width="589" height="449"></p>
</div>
</div>
<p>In addition to scatter plots, pandas can also be used to create line plots, bar plots, and histograms. Let’s create a bar plot of the mean petal length for each of the three species of Iris:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">iris.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_length'</span>].mean().plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb4-2">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Petal Length'</span>)</span>
<span id="cb4-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Petal Length for Each Species of Iris'</span>)</span>
<span id="cb4-4">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/viz/index_files/figure-html/cell-5-output-1.png" width="576" height="502"></p>
</div>
</div>
</section>
<section id="data-visualization-with-matplotlib" class="level3">
<h3 class="anchored" data-anchor-id="data-visualization-with-matplotlib">Data visualization with matplotlib</h3>
<p>While pandas provides a number of convenient methods for data visualization, matplotlib provides a more low-level interface for creating visualizations. This makes it possible to create highly customized visualizations, but it requires a bit more effort. Let’s see how we can use matplotlib to create a scatter plot of the petal length and width for the Iris dataset.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a scatter plot of petal length vs. petal width</span></span>
<span id="cb5-3">plt.scatter(iris[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_length'</span>], iris[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_width'</span>])</span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and a title</span></span>
<span id="cb5-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Petal Length'</span>)</span>
<span id="cb5-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Petal Width'</span>)</span>
<span id="cb5-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iris Petal Length vs. Width'</span>)</span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb5-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/viz/index_files/figure-html/cell-6-output-1.png" width="589" height="449"></p>
</div>
</div>
<p>From the above, it can be seen that creating a scatter plot with matplotlib requires a bit more code than with pandas, but it provides a high level of customization. We can also create a line plot of the mean petal length for each of the three species of Iris:</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the mean petal length for each species</span></span>
<span id="cb6-3">setosa_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris[iris[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'setosa'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_length'</span>].mean()</span>
<span id="cb6-4">versicolor_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris[iris[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'versicolor'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_length'</span>].mean()</span>
<span id="cb6-5">virginica_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris[iris[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'virginica'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_length'</span>].mean()</span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a bar chart of the mean petal length</span></span>
<span id="cb6-7">plt.bar([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'setosa'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'versicolor'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'virginica'</span>], [setosa_mean, versicolor_mean, virginica_mean])</span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a horizontal line at the overall mean petal length</span></span>
<span id="cb6-9">plt.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iris[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_length'</span>].mean(), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and a title</span></span>
<span id="cb6-11">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Species'</span>)</span>
<span id="cb6-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Petal Length'</span>)</span>
<span id="cb6-13">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Petal Length for Each Species of Iris'</span>)</span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb6-15"></span>
<span id="cb6-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/viz/index_files/figure-html/cell-7-output-1.png" width="576" height="449"></p>
</div>
</div>
<p>From the above plot, matplotlib provides a lot of flexibility for creating customized visualizations.</p>
</section>
<section id="data-visualization-with-seaborn" class="level3">
<h3 class="anchored" data-anchor-id="data-visualization-with-seaborn">Data visualization with seaborn</h3>
<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for creating attractive and informative statistical graphics. Seaborn makes it easy to create complex visualizations by providing a range of built-in styles and color palettes.</p>
<p>To create a scatter plot of the petal length and width for the Iris dataset with seaborn, we can use the scatterplot function:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a scatter plot of petal length vs. petal width</span></span>
<span id="cb7-3">sns.scatterplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iris, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_length'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_width'</span>)</span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and a title</span></span>
<span id="cb7-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Petal Length'</span>)</span>
<span id="cb7-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Petal Width'</span>)</span>
<span id="cb7-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iris Petal Length vs. Width'</span>)</span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb7-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/viz/index_files/figure-html/cell-8-output-1.png" width="589" height="449"></p>
</div>
</div>
<p>From the above plot, seaborn provides a clean and attractive visualization with just a single line of code.</p>
<p>We can also create a line plot of the mean petal length for each of the three species of Iris with the lineplot function:</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a line plot of the mean petal length for each species</span></span>
<span id="cb8-2">sns.lineplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iris, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_length'</span>, estimator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.mean)</span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and a title</span></span>
<span id="cb8-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Species'</span>)</span>
<span id="cb8-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Petal Length'</span>)</span>
<span id="cb8-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Petal Length for Each Species of Iris'</span>)</span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb8-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://lukmanaj.github.io/ailearningloop/posts/viz/index_files/figure-html/cell-9-output-1.png" width="581" height="449"></p>
</div>
</div>
<p>From the above plot, provides a more polished and informative visualization than matplotlib with very little code.</p>
<p>Seaborn also provides many other types of visualizations, including heatmaps, histograms, and violin plots, that can be used to explore relationships in your data.</p>
<section id="conclusion" class="level4">
<h4 class="anchored" data-anchor-id="conclusion">Conclusion</h4>
<p>In this article, we have seen how to use Python libraries such as pandas, matplotlib, and seaborn for data visualization. Data visualization is an essential part of the data analysis process because it allows us to explore and understand our data more effectively.</p>
<p>Pandas provides a convenient interface for creating basic visualizations such as scatter plots and bar charts. Matplotlib provides a high level of customization and control over the appearance of your visualizations, but requires more code to create them. Seaborn provides a high-level interface for creating attractive and informative statistical graphics with minimal code.</p>
<p>As with any tool, it is important to choose the right visualization library for your specific needs. If you need to create simple visualizations quickly and easily, pandas may be the best choice. If you need a high level of control over the appearance of your visualizations, matplotlib may be the better option. If you want to create complex statistical graphics quickly and easily, seaborn may be the way to go. Seaborn is my current favourite. In any case, with the power of Python and these visualization libraries, you can create informative and attractive visualizations that help you better understand your data.</p>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>pandas</category>
  <category>matplotlib</category>
  <category>seaborn</category>
  <category>data visualization</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/viz/index.html</guid>
  <pubDate>Mon, 13 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/viz/pythondataviz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Exploring Pandas: A Powerful Pythonic Analytic Tool</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/pandas/index.html</link>
  <description><![CDATA[ 




<p>Data analysis is a much sought after skill for data science. In my search for efficient tools for analyzing data, after outgrowing spreadsheets, I came across other tools like R’s tidyverse but discovering pandas was a game changer.</p>
<p>pandas is hardly used alone and mostly use alongside numerical computing tools like NumPy and Scipy and visualization tools like matplotlib or seaborn. pandas is closely associated with NumPy as it adopts certain aspects of NumPy’s array-based computing like array-based functions and vectorization (basically eliminating for loops in Python).</p>
<p>Comparing NumPy and pandas, I’ll say the biggest difference is that while pandas work with tabular data in rows and columns (which can be heterogeneous), NumPy is most suited for homogeneous numerical array data that is usually typed.</p>
<p>Pandas is a super popular library for fast and convenient data analysis built on top of the Python programming language, that provides two data structures for data manipulation: 1. Series 2. DataFrames</p>
<p>A series is a one dimensional array of indexed data that consists of an array of actual data and an associated array of indices or labels.</p>
<p>A DataFrame on the other hand is a two dimensional data structure. The data is usually tabular and arranged in rows and columns. A DataFrame can be created from lists, dictionaries or lists of dictionaries. It can also be created by loading data from storage like csv files, SQL database, excel files etc.</p>
<p>The index (of pandas Series or DataFrame) is used to access individual data values. A column of a dataframe can also be accessed as a Series. A pandas series is for all intents and purposes a 1-D dataframe.</p>
<p>To illustrate some of the concepts already mentioned, it is necessary to import pandas. In this article, it is assumed that the individual already has Python and pandas installed. Importing pandas is usually done usng the syntax below:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
<p>Since pandas is hardly used alone, the following is a more realistic import:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span></code></pre></div>
</div>
<p>In addition, since the Series and DataFrame functions will most likely be frequently used, they can be imported as below:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Series, DataFrame</span></code></pre></div>
</div>
<section id="creating-pandas-series-and-dataframes" class="level3">
<h3 class="anchored" data-anchor-id="creating-pandas-series-and-dataframes">Creating pandas series and DataFrames</h3>
<p>Here I will briefly provide the syntax for creating pandas series and DataFrame objects. To create a pandas series object, the following can suffice:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Series([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb4-2">obj</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>0    4
1    7
2   -5
3    3
dtype: int64</code></pre>
</div>
</div>
<p>To create a DataFrame from a dictionary:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Define the dictionary 'x'</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lukman'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Aminu'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amina'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fatima'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ID'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Department'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Architect Group'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Software Group'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Design Team'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Infrastructure'</span>], </span>
<span id="cb6-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>:[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>]}</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#casting the dictionary to a DataFrame</span></span>
<span id="cb6-7">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(x)</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#display the result df</span></span>
<span id="cb6-10">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">ID</th>
<th data-quarto-table-cell-role="th">Department</th>
<th data-quarto-table-cell-role="th">Salary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Lukman</td>
<td>1</td>
<td>Architect Group</td>
<td>100000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Aminu</td>
<td>2</td>
<td>Software Group</td>
<td>80000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Amina</td>
<td>3</td>
<td>Design Team</td>
<td>50000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Fatima</td>
<td>4</td>
<td>Infrastructure</td>
<td>60000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>There’s a direct correspondence between the table and the dictionary. The keys correspond to the column labels and the values or lists corresponding to the rows. DataFrames can also be created from lists, lists of lists or loaded from storage:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb7-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'example.csv'</span>)</span></code></pre></div>
<p>The advantage of loading from storage is that there wont be a need to type in the data and it supports working on large datasets.</p>
<p>I will concentrate more on manipulating DataFrames.</p>
</section>
<section id="column-selection-in-pandas-dataframes" class="level3">
<h3 class="anchored" data-anchor-id="column-selection-in-pandas-dataframes">Column selection in pandas dataframes</h3>
<p>Columns can be selected using two different notations: 1. df[‘columnname.]: returns a series: or df[[’columnname’]]: returns a DataFrame 2. df.columnname The second notation only works if the columnname is a valid Python variable.</p>
<p>Multiple columns can be accessed by passing the list of columns as follows:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ID'</span>]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">ID</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Lukman</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Aminu</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Amina</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Fatima</td>
<td>4</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="using-loc-and-iloc-functions-for-selecting-ranges-in-a-dataframe" class="level3">
<h3 class="anchored" data-anchor-id="using-loc-and-iloc-functions-for-selecting-ranges-in-a-dataframe">Using loc and iloc functions for selecting ranges in a DataFrame</h3>
<p>loc() is a label-based data selecting method which means that we have to pass the name of the row or column that we want to select. This method includes the last element of the range passed in it.</p>
<p>The syntax can be simplified below:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb9-1">loc[row_label, column_label]</span></code></pre></div>
<p>iloc() is an indexed-based selecting method which means that we have to pass integer index in the method to select a specific row/column. This method does not include the last element of the range passed in it.</p>
<p>The syntax can be simplified below:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode py code-with-copy"><code class="sourceCode python"><span id="cb10-1">iloc[row_index, column_index]</span></code></pre></div>
</section>
<section id="performing-arithmetic-on-pandas-dataframes" class="level3">
<h3 class="anchored" data-anchor-id="performing-arithmetic-on-pandas-dataframes">Performing arithmetic on pandas DataFrames</h3>
<p>pandas allows for easy arithmetic on DataFrames with different labels by providing the union of the dataframes. For example:</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.</span>).reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)), columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcd"</span>),</span>
<span id="cb11-2">                      index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kaduna"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kano"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Katsina"</span>])</span>
<span id="cb11-3"></span>
<span id="cb11-4">df2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.</span>).reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)), columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bde"</span>),</span>
<span id="cb11-5">                      index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sokoto"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kano"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kaduna"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kebbi"</span>])</span>
<span id="cb11-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df1,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           b    c    d
Kaduna   0.0  1.0  2.0
Kano     3.0  4.0  5.0
Katsina  6.0  7.0  8.0 

          b     d     e
Sokoto  0.0   1.0   2.0
Kano    3.0   4.0   5.0
Kaduna  6.0   7.0   8.0
Kebbi   9.0  10.0  11.0</code></pre>
</div>
</div>
<p>The beauty of pandas is that it aligns on both the rows and columns and provide the sum for where the rows or columns appear in both DataFrames and returns NA for those that are not in both as shown below:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">c</th>
<th data-quarto-table-cell-role="th">d</th>
<th data-quarto-table-cell-role="th">e</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Kaduna</td>
<td>6.0</td>
<td>NaN</td>
<td>9.0</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Kano</td>
<td>6.0</td>
<td>NaN</td>
<td>9.0</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Katsina</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Kebbi</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Sokoto</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>In addition, pandas has some flexible arithmetic methods for calculations in DataFrames and series. These include:</p>
<ol type="1">
<li>add, radd</li>
<li>sub, rsub</li>
<li>div, rdiv etc</li>
</ol>
<p>Operations between DataFrames and series are also supported, just like broadcasting in NumPy.</p>
</section>
<section id="computing-descriptive-statistics" class="level3">
<h3 class="anchored" data-anchor-id="computing-descriptive-statistics">Computing descriptive statistics</h3>
<p>pandas objects have built-in methods for computing descriptive statistics on DataFrames and series. For instance: - Calling DataFrame’s sum method returns a Series containing column sums, passing axis=“columns” or axis=1 sums across the columns instead:</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>0    100001
1     80002
2     50003
3     60004
dtype: int64</code></pre>
</div>
</div>
<ul>
<li>Same can be done to get the column means or row means (axis = 1):</li>
</ul>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>]].mean()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Salary    72500.0
ID            2.5
dtype: float64</code></pre>
</div>
</div>
<ul>
<li>Describe method produces multiple summary statistics all at once for all the columns</li>
</ul>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">df.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ID</th>
<th data-quarto-table-cell-role="th">Salary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>4.000000</td>
<td>4.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>2.500000</td>
<td>72500.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>1.290994</td>
<td>22173.557826</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>1.000000</td>
<td>50000.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>1.750000</td>
<td>57500.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>2.500000</td>
<td>70000.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>3.250000</td>
<td>85000.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>4.000000</td>
<td>100000.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>There are various other methods for obtaining specific summary statistics in a DataFrame. The aim here is just to provide a taste of the possibilities, as with my NumPy article.</p>
<p>In conclusion, pandas is a powerful library with useful tools for data analysis and in this article, I attempted to provide a glimpse of what can be achieved with pandas. The pandas documentation is a useful resource alongside an individual’s inquisitiveness and willingness to explore different datasets using pandas. In addition, I found Python for Data Analysis by Wes McKinney quite useful as it gave an intuition into data analysis with Python.</p>


</section>

 ]]></description>
  <category>pandas</category>
  <category>python</category>
  <category>data analysis</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/pandas/index.html</guid>
  <pubDate>Mon, 13 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/pandas/pandas.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>NumPy ndarrays: Introduction to a Powerful Tool for Scientific Computing in Python</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/numpy/index.html</link>
  <description><![CDATA[ 




<p>NumPy which is short for Numerical Python is the one of the most foundational tools for scientific computing with Python today. It is so important that many other tools like pandas utilise NumPy array objects as their basis. The most important tool in NumPy is the ndarray which is usually a fixed-size multidimensional container of items of the same type and size. Other useful tools in NumPy are the mathematical functions that support fast operations on the ndarrays without using loops as required in pure Python, and even a C API that connects NumPy with libraries written in C, C ++ or FORTRAN.</p>
<p>In this short piece, I attempt to highlight some important NumPy features that may be useful to individuals interested in scientific computing.</p>
<p>First before using NumPy, it is important to install it first, after installing Python of course. This can be done using conda or pip. The specific codes can be found in the documentation and is dependent on the individual’s setup eg windows, linux, Mac etc. After installation, NumPy can be imported in the following way before it can be used:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</div>
<p>There are other ways of importing NumPy but the syntax above is the most widely accepted and it is advisable as it can foster collaboration. To check the package version, the following can be used:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'numpy:'</span>, np.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>numpy: 1.22.3</code></pre>
</div>
</div>
<section id="the-numpy-array-object-the-basis-of-numpy" class="level2">
<h2 class="anchored" data-anchor-id="the-numpy-array-object-the-basis-of-numpy">The NumPy array object, the basis of NumPy</h2>
<p>N-dimensional array object, or ndarray, is a fast, flexible container for large datasets in Python. Arrays enable performance of mathematical operations on whole blocks of data using similar syntax to the equivalent operations between scalar elements. It enables one to perform computations on indivudual elements of an ndarray without the need for a loop or list comprehension as may be required while trying to perform a similar computation using lets say a list in pure python. In addition, computations in NumPy are significantly faster than those in pure Python eg:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Comparing speed with pure Python</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">my_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1_000_000</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5">my_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1_000_000</span>))</span></code></pre></div>
</div>
<p>An ndarray and a list of the same size are declared and the below, I time a similar computation on the array and the list.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit my_arr2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> my_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit my_list2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> my_list]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.08 ms ± 22.4 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)
52.4 ms ± 786 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>The result above shows that the computation on the array is many times faster than same on the list and this is due to the power of NumPy.</p>
<p>Continuing the discussion on the ndarray, it contains elements of the same data type. In addition, every array has a shape which is a tuple that gives the dimensions of the array (ie size of each dimension) , and also a dtype (data type, since the array has the same data type).</p>
<section id="creating-ndarrays" class="level3">
<h3 class="anchored" data-anchor-id="creating-ndarrays">Creating ndarrays</h3>
<p>ndarrays can be created by using the array function and they can be initiated from lists or other data structures as shown below</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from lists</span></span>
<span id="cb7-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb7-3">arr1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(data)</span>
<span id="cb7-4">arr1</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([1, 2, 3, 4, 5, 6])</code></pre>
</div>
</div>
<p>This creates an array object that contains the elements in the data list.</p>
<p>We can also input the elements directly as a list as follows:</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">arr2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb9-2">arr2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>array([1, 2, 3, 4, 5, 6])</code></pre>
</div>
</div>
<p>Same array object will be created as arr1 above.</p>
<p>The functions and methods available in NumPy can be accessed by the following code:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(np)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assuming numpy is imported as np</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>['ALLOW_THREADS',
 'AxisError',
 'BUFSIZE',
 'CLIP',
 'ComplexWarning',
 'DataSource',
 'ERR_CALL',
 'ERR_DEFAULT',
 'ERR_IGNORE',
 'ERR_LOG',
 'ERR_PRINT',
 'ERR_RAISE',
 'ERR_WARN',
 'FLOATING_POINT_SUPPORT',
 'FPE_DIVIDEBYZERO',
 'FPE_INVALID',
 'FPE_OVERFLOW',
 'FPE_UNDERFLOW',
 'False_',
 'Inf',
 'Infinity',
 'MAXDIMS',
 'MAY_SHARE_BOUNDS',
 'MAY_SHARE_EXACT',
 'ModuleDeprecationWarning',
 'NAN',
 'NINF',
 'NZERO',
 'NaN',
 'PINF',
 'PZERO',
 'RAISE',
 'RankWarning',
 'SHIFT_DIVIDEBYZERO',
 'SHIFT_INVALID',
 'SHIFT_OVERFLOW',
 'SHIFT_UNDERFLOW',
 'ScalarType',
 'Tester',
 'TooHardError',
 'True_',
 'UFUNC_BUFSIZE_DEFAULT',
 'UFUNC_PYVALS_NAME',
 'VisibleDeprecationWarning',
 'WRAP',
 '_CopyMode',
 '_NoValue',
 '_UFUNC_API',
 '__NUMPY_SETUP__',
 '__all__',
 '__builtins__',
 '__cached__',
 '__config__',
 '__deprecated_attrs__',
 '__dir__',
 '__doc__',
 '__expired_functions__',
 '__file__',
 '__getattr__',
 '__git_version__',
 '__loader__',
 '__name__',
 '__package__',
 '__path__',
 '__spec__',
 '__version__',
 '_add_newdoc_ufunc',
 '_distributor_init',
 '_financial_names',
 '_from_dlpack',
 '_globals',
 '_mat',
 '_pytesttester',
 '_version',
 'abs',
 'absolute',
 'add',
 'add_docstring',
 'add_newdoc',
 'add_newdoc_ufunc',
 'alen',
 'all',
 'allclose',
 'alltrue',
 'amax',
 'amin',
 'angle',
 'any',
 'append',
 'apply_along_axis',
 'apply_over_axes',
 'arange',
 'arccos',
 'arccosh',
 'arcsin',
 'arcsinh',
 'arctan',
 'arctan2',
 'arctanh',
 'argmax',
 'argmin',
 'argpartition',
 'argsort',
 'argwhere',
 'around',
 'array',
 'array2string',
 'array_equal',
 'array_equiv',
 'array_repr',
 'array_split',
 'array_str',
 'asanyarray',
 'asarray',
 'asarray_chkfinite',
 'ascontiguousarray',
 'asfarray',
 'asfortranarray',
 'asmatrix',
 'asscalar',
 'atleast_1d',
 'atleast_2d',
 'atleast_3d',
 'average',
 'bartlett',
 'base_repr',
 'binary_repr',
 'bincount',
 'bitwise_and',
 'bitwise_not',
 'bitwise_or',
 'bitwise_xor',
 'blackman',
 'block',
 'bmat',
 'bool8',
 'bool_',
 'broadcast',
 'broadcast_arrays',
 'broadcast_shapes',
 'broadcast_to',
 'busday_count',
 'busday_offset',
 'busdaycalendar',
 'byte',
 'byte_bounds',
 'bytes0',
 'bytes_',
 'c_',
 'can_cast',
 'cast',
 'cbrt',
 'cdouble',
 'ceil',
 'cfloat',
 'char',
 'character',
 'chararray',
 'choose',
 'clip',
 'clongdouble',
 'clongfloat',
 'column_stack',
 'common_type',
 'compare_chararrays',
 'compat',
 'complex128',
 'complex256',
 'complex64',
 'complex_',
 'complexfloating',
 'compress',
 'concatenate',
 'conj',
 'conjugate',
 'convolve',
 'copy',
 'copysign',
 'copyto',
 'core',
 'corrcoef',
 'correlate',
 'cos',
 'cosh',
 'count_nonzero',
 'cov',
 'cross',
 'csingle',
 'ctypeslib',
 'cumprod',
 'cumproduct',
 'cumsum',
 'datetime64',
 'datetime_as_string',
 'datetime_data',
 'deg2rad',
 'degrees',
 'delete',
 'deprecate',
 'deprecate_with_doc',
 'diag',
 'diag_indices',
 'diag_indices_from',
 'diagflat',
 'diagonal',
 'diff',
 'digitize',
 'disp',
 'divide',
 'divmod',
 'dot',
 'double',
 'dsplit',
 'dstack',
 'dtype',
 'e',
 'ediff1d',
 'einsum',
 'einsum_path',
 'emath',
 'empty',
 'empty_like',
 'equal',
 'errstate',
 'euler_gamma',
 'exp',
 'exp2',
 'expand_dims',
 'expm1',
 'expm1x',
 'extract',
 'eye',
 'fabs',
 'fastCopyAndTranspose',
 'fft',
 'fill_diagonal',
 'find_common_type',
 'finfo',
 'fix',
 'flatiter',
 'flatnonzero',
 'flexible',
 'flip',
 'fliplr',
 'flipud',
 'float128',
 'float16',
 'float32',
 'float64',
 'float_',
 'float_power',
 'floating',
 'floor',
 'floor_divide',
 'fmax',
 'fmin',
 'fmod',
 'format_float_positional',
 'format_float_scientific',
 'format_parser',
 'frexp',
 'frombuffer',
 'fromfile',
 'fromfunction',
 'fromiter',
 'frompyfunc',
 'fromregex',
 'fromstring',
 'full',
 'full_like',
 'gcd',
 'generic',
 'genfromtxt',
 'geomspace',
 'get_array_wrap',
 'get_include',
 'get_printoptions',
 'getbufsize',
 'geterr',
 'geterrcall',
 'geterrobj',
 'gradient',
 'greater',
 'greater_equal',
 'half',
 'hamming',
 'hanning',
 'heaviside',
 'histogram',
 'histogram2d',
 'histogram_bin_edges',
 'histogramdd',
 'hsplit',
 'hstack',
 'hypot',
 'i0',
 'identity',
 'iinfo',
 'imag',
 'in1d',
 'index_exp',
 'indices',
 'inexact',
 'inf',
 'info',
 'infty',
 'inner',
 'insert',
 'int0',
 'int16',
 'int32',
 'int64',
 'int8',
 'int_',
 'intc',
 'integer',
 'interp',
 'intersect1d',
 'intp',
 'invert',
 'is_busday',
 'isclose',
 'iscomplex',
 'iscomplexobj',
 'isfinite',
 'isfortran',
 'isin',
 'isinf',
 'isnan',
 'isnat',
 'isneginf',
 'isposinf',
 'isreal',
 'isrealobj',
 'isscalar',
 'issctype',
 'issubclass_',
 'issubdtype',
 'issubsctype',
 'iterable',
 'ix_',
 'kaiser',
 'kernel_version',
 'kron',
 'lcm',
 'ldexp',
 'left_shift',
 'less',
 'less_equal',
 'lexsort',
 'lib',
 'linalg',
 'linspace',
 'little_endian',
 'load',
 'loadtxt',
 'log',
 'log10',
 'log1p',
 'log2',
 'logaddexp',
 'logaddexp2',
 'logical_and',
 'logical_not',
 'logical_or',
 'logical_xor',
 'logspace',
 'longcomplex',
 'longdouble',
 'longfloat',
 'longlong',
 'lookfor',
 'ma',
 'mask_indices',
 'mat',
 'math',
 'matmul',
 'matrix',
 'matrixlib',
 'max',
 'maximum',
 'maximum_sctype',
 'may_share_memory',
 'mean',
 'median',
 'memmap',
 'meshgrid',
 'mgrid',
 'min',
 'min_scalar_type',
 'minimum',
 'mintypecode',
 'mod',
 'modf',
 'moveaxis',
 'msort',
 'multiply',
 'nan',
 'nan_to_num',
 'nanargmax',
 'nanargmin',
 'nancumprod',
 'nancumsum',
 'nanmax',
 'nanmean',
 'nanmedian',
 'nanmin',
 'nanpercentile',
 'nanprod',
 'nanquantile',
 'nanstd',
 'nansum',
 'nanvar',
 'nbytes',
 'ndarray',
 'ndenumerate',
 'ndim',
 'ndindex',
 'nditer',
 'negative',
 'nested_iters',
 'newaxis',
 'nextafter',
 'nonzero',
 'not_equal',
 'numarray',
 'number',
 'obj2sctype',
 'object0',
 'object_',
 'ogrid',
 'oldnumeric',
 'ones',
 'ones_like',
 'os',
 'outer',
 'packbits',
 'pad',
 'partition',
 'percentile',
 'pi',
 'piecewise',
 'place',
 'poly',
 'poly1d',
 'polyadd',
 'polyder',
 'polydiv',
 'polyfit',
 'polyint',
 'polymul',
 'polynomial',
 'polysub',
 'polyval',
 'positive',
 'power',
 'printoptions',
 'prod',
 'product',
 'promote_types',
 'ptp',
 'put',
 'put_along_axis',
 'putmask',
 'quantile',
 'r_',
 'rad2deg',
 'radians',
 'random',
 'ravel',
 'ravel_multi_index',
 'real',
 'real_if_close',
 'rec',
 'recarray',
 'recfromcsv',
 'recfromtxt',
 'reciprocal',
 'record',
 'remainder',
 'repeat',
 'require',
 'reshape',
 'resize',
 'result_type',
 'right_shift',
 'rint',
 'roll',
 'rollaxis',
 'roots',
 'rot90',
 'round',
 'round_',
 'row_stack',
 's_',
 'safe_eval',
 'save',
 'savetxt',
 'savez',
 'savez_compressed',
 'sctype2char',
 'sctypeDict',
 'sctypes',
 'searchsorted',
 'select',
 'set_numeric_ops',
 'set_printoptions',
 'set_string_function',
 'setbufsize',
 'setdiff1d',
 'seterr',
 'seterrcall',
 'seterrobj',
 'setxor1d',
 'shape',
 'shares_memory',
 'short',
 'show_config',
 'sign',
 'signbit',
 'signedinteger',
 'sin',
 'sinc',
 'single',
 'singlecomplex',
 'sinh',
 'size',
 'sometrue',
 'sort',
 'sort_complex',
 'source',
 'spacing',
 'split',
 'sqrt',
 'square',
 'squeeze',
 'stack',
 'std',
 'str0',
 'str_',
 'string_',
 'subtract',
 'sum',
 'swapaxes',
 'sys',
 'take',
 'take_along_axis',
 'tan',
 'tanh',
 'tensordot',
 'test',
 'testing',
 'tile',
 'timedelta64',
 'trace',
 'tracemalloc_domain',
 'transpose',
 'trapz',
 'tri',
 'tril',
 'tril_indices',
 'tril_indices_from',
 'trim_zeros',
 'triu',
 'triu_indices',
 'triu_indices_from',
 'true_divide',
 'trunc',
 'typecodes',
 'typename',
 'ubyte',
 'ufunc',
 'uint',
 'uint0',
 'uint16',
 'uint32',
 'uint64',
 'uint8',
 'uintc',
 'uintp',
 'ulonglong',
 'unicode_',
 'union1d',
 'unique',
 'unpackbits',
 'unravel_index',
 'unsignedinteger',
 'unwrap',
 'use_hugepage',
 'ushort',
 'vander',
 'var',
 'vdot',
 'vectorize',
 'version',
 'void',
 'void0',
 'vsplit',
 'vstack',
 'warnings',
 'where',
 'who',
 'zeros',
 'zeros_like']</code></pre>
</div>
</div>
<p>Using the dir function is a handy way of finding the methods and functions associated with a package or even an object.</p>
</section>
<section id="data-types-for-ndarrays" class="level3">
<h3 class="anchored" data-anchor-id="data-types-for-ndarrays">Data types for ndarrays</h3>
<p>It has been established that elements in an ndarray are usually of the same data type. As such, the data type of an array can be declared while creating the array as follows:</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>], dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.float64)</span>
<span id="cb13-2">arr</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>array([4., 3., 5., 6., 7.])</code></pre>
</div>
</div>
<p>Also, conversion of data types can also be done:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">int_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr.astype(np.int64)</span>
<span id="cb15-2">int_arr</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>array([4, 3, 5, 6, 7])</code></pre>
</div>
</div>
<p>The following is a list of NumPy data types: 1. int 2. float 3. bool 4. complex 5. object 6. string 7. unicode We can also specify the number of bits for some of them e.g.&nbsp;int8, int32, float64, complex64 etc.</p>
</section>
<section id="mathematical-calculations-in-numpy" class="level3">
<h3 class="anchored" data-anchor-id="mathematical-calculations-in-numpy">Mathematical Calculations in NumPy</h3>
<p>NumPy has two features on ndarrays that reflect the powerful nature of the library, vectorization and broadcasting. These are not available on traditional data structures like Python lists. Vectorization to refers to element-wise calculations done on entire arrays by using simple syntax same as will be used for scalar calculations:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>], [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.</span>]])</span>
<span id="cb17-2">arr</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>array([[1., 2., 3.],
       [4., 5., 6.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> arr </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>array([[ 1.,  4.,  9.],
       [16., 25., 36.]])</code></pre>
</div>
</div>
<p>Arithmetic with scalars propagates the scalar to each element in the array:</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> arr</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>array([[1.        , 0.5       , 0.33333333],
       [0.25      , 0.2       , 0.16666667]])</code></pre>
</div>
</div>
<p>In the above, 1 is divided by each of the elements in arr to return a new array of the same size as arr. This is the beauty of NumPy.</p>
<p>Apart from regular calculations, NumPy also supports ufuncs (universal functions) that allow element-wise computations on ndarrays. Examples include numpy.sqrt and numpy.exp. Ufuncs can be unary (acts on elements of a single array) eg numpy.sqrt or binary (takes two arrays as arguments) eg numpy.multiply, numpy.mod etc. Ufuncs are powerful and I have seen them used in a simple implementation of logistic regression.</p>
</section>
<section id="indexing-ndarrays" class="level3">
<h3 class="anchored" data-anchor-id="indexing-ndarrays">Indexing ndarrays</h3>
<p>There are a variety of ways to index NumPy arrays but in the basic form, indexing one dimensional arrays is very similar to indexing lists in pure Python. However, since the dimensions of an ndarray can be multidimensional, it becomes more complex with increase in dimension. In addition, numpy allows for boolean indexing (using a conditional) and fancy indexing (using integer arrays). Both are not available in pure Python. An important first distinction from Python’s built-in lists is that array slices are views on the original array. This means that the data is not copied, and any modifications to the view will be reflected in the source array.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In conclusion, NumPy provides powerful tools that can be harnessed for scientific computing and this is an attempt to provide a brief intro. As I begin my data science journey, I try to document my learnings and this is one of such attempts at documentation. This is a very skeletal view of the potential possibilities with NumPy. I have barely begun to scratch the surface. I recommend checking the NumPy documentation and also practicing the concepts as we learn.</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/numpy/index.html</guid>
  <pubDate>Fri, 10 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/numpy/numpy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Web Scraping a Daily Trust Article using Requests and Beautiful Soup Libraries</title>
  <dc:creator>Lukman Aliyu Jibril</dc:creator>
  <link>https://lukmanaj.github.io/ailearningloop/posts/web-scraping/index.html</link>
  <description><![CDATA[ 




<p>Web scraping is a key skill all data scientists should have. This is why day 22 of our ongoing Arewa Data Science Academy fellowship covered web scraping using BeautifulSoup. In this article, I try to explain and practice this important skill by scraping a daily trust <a href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/">page</a> that contains an article related to the just concluded Nigerian presidential election.&nbsp; Firstly, for this task, one needs the following: - A Python installation -I have Python 3.10 installed,&nbsp; - requests <a href="https://docs.python-requests.org/en/v2.9.1/">library</a> - BeautifulSoup4 <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">library</a></p>
<p>Both libraries can be installed using pip, or if one uses a conda environment - like I do - the libraries can be installed using conda install <library_name>. In addition, the documentation for both libraries, which are hyperlinked above, provide description for how to install the libraries.&nbsp; For the purpose of this article, I used a colab Jupyter notebook, which is free from google and only requires a google account and an internet connection. There’s no need to install anything else.&nbsp; We first begin by importing the two required libraries</library_name></p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span></code></pre></div>
</div>
<p>Requests library enables us to get the content of the page as a html and BeautifulSoup allows us to parse the html.&nbsp;</p>
<p>We then create a beautifulSoup object that we can use to navigate the content of the page as follows:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/'</span></span>
<span id="cb2-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb2-3">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.content,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html.parser'</span>)</span>
<span id="cb2-4">soup.prettify()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>'&lt;!DOCTYPE html&gt;\n&lt;html lang="en-GB"&gt;\n &lt;head&gt;\n  &lt;style&gt;\n   img.lazy{min-height:1px}\n  &lt;/style&gt;\n  &lt;link as="script" href="https://dailytrust.com/wp-content/plugins/w3-total-cache/pub/js/lazyload.min.js" rel="preload"/&gt;\n  &lt;meta charset="utf-8"/&gt;\n  &lt;meta content="IE=edge" httpequiv="X-UA-Compatible"/&gt;\n  &lt;style id="" media="all"&gt;\n   @font-face {\n  font-family: \'Caveat\';\n  font-style: normal;\n  font-weight: 400;\n  font-display: swap;\n  src: url(/fonts.gstatic.com/s/caveat/v17/WnznHAc5bAfYB2QRah7pcpNvOx-pjfJ9SII.ttf) format(\'truetype\');\n}\n  &lt;/style&gt;\n  &lt;meta content="minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no, user-scalable=yes, viewport-fit=cover" name="viewport"/&gt;\n  &lt;link href="/manifest.json" rel="manifest"/&gt;\n  &lt;meta content="#000000" name="theme-color"/&gt;\n  &lt;title&gt;\n   Last Saturday polls raised issues that require immediate solutions – INEC - Daily Trust\n  &lt;/title&gt;\n  &lt;meta content="max-image-preview:large" name="robots"/&gt;\n  &lt;link href="//www.googletagmanager.com" rel="dns-prefetch"/&gt;\n  &lt;link href="//stats.wp.com" rel="dns-prefetch"/&gt;\n  &lt;link href="//widgets.wp.com" rel="dns-prefetch"/&gt;\n  &lt;link href="//s0.wp.com" rel="dns-prefetch"/&gt;\n  &lt;link href="//0.gravatar.com" rel="dns-prefetch"/&gt;\n  &lt;link href="//1.gravatar.com" rel="dns-prefetch"/&gt;\n  &lt;link href="//2.gravatar.com" rel="dns-prefetch"/&gt;\n  &lt;link href="//pagead2.googlesyndication.com" rel="dns-prefetch"/&gt;\n  &lt;link href="https://dailytrust.com/wp-content/cache/minify/19c28.css" media="all" rel="stylesheet"/&gt;\n  &lt;style id="global-styles-inline-css"&gt;\n   /*&lt;![CDATA[*/body{--wp--preset--color--black:#000;--wp--preset--color--cyan-bluish-gray:#abb8c3;--wp--preset--color--white:#fff;--wp--preset--color--pale-pink:#f78da7;--wp--preset--color--vivid-red:#cf2e2e;--wp--preset--color--luminous-vivid-orange:#ff6900;--wp--preset--color--luminous-vivid-amber:#fcb900;--wp--preset--color--light-green-cyan:#7bdcb5;--wp--preset--color--vivid-green-cyan:#00d084;--wp--preset--color--pale-cyan-blue:#8ed1fc;--wp--preset--color--vivid-cyan-blue:#0693e3;--wp--preset--color--vivid-purple:#9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple:linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan:linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange:linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red:linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray:linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum:linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple:linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux:linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk:linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean:linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass:linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight:linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--duotone--dark-grayscale:url(\'#wp-duotone-dark-grayscale\');--wp--preset--duotone--grayscale:url(\'#wp-duotone-grayscale\');--wp--preset--duotone--purple-yellow:url(\'#wp-duotone-purple-yellow\');--wp--preset--duotone--blue-red:url(\'#wp-duotone-blue-red\');--wp--preset--duotone--midnight:url(\'#wp-duotone-midnight\');--wp--preset--duotone--magenta-yellow:url(\'#wp-duotone-magenta-yellow\');--wp--preset--duotone--purple-green:url(\'#wp-duotone-purple-green\');--wp--preset--duotone--blue-orange:url(\'#wp-duotone-blue-orange\');--wp--preset--font-size--small:13px;--wp--preset--font-size--medium:20px;--wp--preset--font-size--large:36px;--wp--preset--font-size--x-large:42px;--wp--preset--spacing--20:0.44rem;--wp--preset--spacing--30:0.67rem;--wp--preset--spacing--40:1rem;--wp--preset--spacing--50:1.5rem;--wp--preset--spacing--60:2.25rem;--wp--preset--spacing--70:3.38rem;--wp--preset--spacing--80:5.06rem;--wp--preset--shadow--natural:6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep:12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp:6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined:6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp:6px 6px 0px rgba(0, 0, 0, 1)}:where(.is-layout-flex){gap:0.5em}body .is-layout-flow&gt;.alignleft{float:left;margin-inline-start:0;margin-inline-end:2em}body .is-layout-flow&gt;.alignright{float:right;margin-inline-start:2em;margin-inline-end:0}body .is-layout-flow&gt;.aligncenter{margin-left:auto !important;margin-right:auto !important}body .is-layout-constrained&gt;.alignleft{float:left;margin-inline-start:0;margin-inline-end:2em}body .is-layout-constrained&gt;.alignright{float:right;margin-inline-start:2em;margin-inline-end:0}body .is-layout-constrained&gt;.aligncenter{margin-left:auto !important;margin-right:auto !important}body .is-layout-constrained&gt;:where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width:var(--wp--style--global--content-size);margin-left:auto !important;margin-right:auto !important}body .is-layout-constrained&gt;.alignwide{max-width:var(--wp--style--global--wide-size)}body .is-layout-flex{display:flex}body .is-layout-flex{flex-wrap:wrap;align-items:center}body .is-layout-flex&gt;*{margin:0}:where(.wp-block-columns.is-layout-flex){gap:2em}.has-black-color{color:var(--wp--preset--color--black) !important}.has-cyan-bluish-gray-color{color:var(--wp--preset--color--cyan-bluish-gray) !important}.has-white-color{color:var(--wp--preset--color--white) !important}.has-pale-pink-color{color:var(--wp--preset--color--pale-pink) !important}.has-vivid-red-color{color:var(--wp--preset--color--vivid-red) !important}.has-luminous-vivid-orange-color{color:var(--wp--preset--color--luminous-vivid-orange) !important}.has-luminous-vivid-amber-color{color:var(--wp--preset--color--luminous-vivid-amber) !important}.has-light-green-cyan-color{color:var(--wp--preset--color--light-green-cyan) !important}.has-vivid-green-cyan-color{color:var(--wp--preset--color--vivid-green-cyan) !important}.has-pale-cyan-blue-color{color:var(--wp--preset--color--pale-cyan-blue) !important}.has-vivid-cyan-blue-color{color:var(--wp--preset--color--vivid-cyan-blue) !important}.has-vivid-purple-color{color:var(--wp--preset--color--vivid-purple) !important}.has-black-background-color{background-color:var(--wp--preset--color--black) !important}.has-cyan-bluish-gray-background-color{background-color:var(--wp--preset--color--cyan-bluish-gray) !important}.has-white-background-color{background-color:var(--wp--preset--color--white) !important}.has-pale-pink-background-color{background-color:var(--wp--preset--color--pale-pink) !important}.has-vivid-red-background-color{background-color:var(--wp--preset--color--vivid-red) !important}.has-luminous-vivid-orange-background-color{background-color:var(--wp--preset--color--luminous-vivid-orange) !important}.has-luminous-vivid-amber-background-color{background-color:var(--wp--preset--color--luminous-vivid-amber) !important}.has-light-green-cyan-background-color{background-color:var(--wp--preset--color--light-green-cyan) !important}.has-vivid-green-cyan-background-color{background-color:var(--wp--preset--color--vivid-green-cyan) !important}.has-pale-cyan-blue-background-color{background-color:var(--wp--preset--color--pale-cyan-blue) !important}.has-vivid-cyan-blue-background-color{background-color:var(--wp--preset--color--vivid-cyan-blue) !important}.has-vivid-purple-background-color{background-color:var(--wp--preset--color--vivid-purple) !important}.has-black-border-color{border-color:var(--wp--preset--color--black) !important}.has-cyan-bluish-gray-border-color{border-color:var(--wp--preset--color--cyan-bluish-gray) !important}.has-white-border-color{border-color:var(--wp--preset--color--white) !important}.has-pale-pink-border-color{border-color:var(--wp--preset--color--pale-pink) !important}.has-vivid-red-border-color{border-color:var(--wp--preset--color--vivid-red) !important}.has-luminous-vivid-orange-border-color{border-color:var(--wp--preset--color--luminous-vivid-orange) !important}.has-luminous-vivid-amber-border-color{border-color:var(--wp--preset--color--luminous-vivid-amber) !important}.has-light-green-cyan-border-color{border-color:var(--wp--preset--color--light-green-cyan) !important}.has-vivid-green-cyan-border-color{border-color:var(--wp--preset--color--vivid-green-cyan) !important}.has-pale-cyan-blue-border-color{border-color:var(--wp--preset--color--pale-cyan-blue) !important}.has-vivid-cyan-blue-border-color{border-color:var(--wp--preset--color--vivid-cyan-blue) !important}.has-vivid-purple-border-color{border-color:var(--wp--preset--color--vivid-purple) !important}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background:var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background:var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background:var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background:var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background:var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important}.has-cool-to-warm-spectrum-gradient-background{background:var(--wp--preset--gradient--cool-to-warm-spectrum) !important}.has-blush-light-purple-gradient-background{background:var(--wp--preset--gradient--blush-light-purple) !important}.has-blush-bordeaux-gradient-background{background:var(--wp--preset--gradient--blush-bordeaux) !important}.has-luminous-dusk-gradient-background{background:var(--wp--preset--gradient--luminous-dusk) !important}.has-pale-ocean-gradient-background{background:var(--wp--preset--gradient--pale-ocean) !important}.has-electric-grass-gradient-background{background:var(--wp--preset--gradient--electric-grass) !important}.has-midnight-gradient-background{background:var(--wp--preset--gradient--midnight) !important}.has-small-font-size{font-size:var(--wp--preset--font-size--small) !important}.has-medium-font-size{font-size:var(--wp--preset--font-size--medium) !important}.has-large-font-size{font-size:var(--wp--preset--font-size--large) !important}.has-x-large-font-size{font-size:var(--wp--preset--font-size--x-large) !important}.wp-block-navigation a:where(:not(.wp-element-button)){color:inherit}:where(.wp-block-columns.is-layout-flex){gap:2em}.wp-block-pullquote{font-size:1.5em;line-height:1.6}/*]]&gt;*/\n  &lt;/style&gt;\n  &lt;link href="https://dailytrust.com/wp-content/cache/minify/9e8c0.css" media="all" rel="stylesheet"/&gt;\n  &lt;script id="jetpack_related-posts-js-extra"&gt;\n   var related_posts_js_options={"post_heading":"h4"};\n  &lt;/script&gt;\n  &lt;script src="https://dailytrust.com/wp-content/cache/minify/8efe6.js"&gt;\n  &lt;/script&gt;\n  &lt;script async="" id="google_gtagjs-js" src="https://www.googletagmanager.com/gtag/js?id=G-PH182QF6V1"&gt;\n  &lt;/script&gt;\n  &lt;script id="google_gtagjs-js-after"&gt;\n   window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}\ngtag(\'set\',\'linker\',{"domains":["dailytrust.com"]});gtag("js",new Date());gtag("set","developer_id.dZTNiMT",true);gtag("config","G-PH182QF6V1");\n  &lt;/script&gt;\n  &lt;link href="https://dailytrust.com/wp-json/" rel="https://api.w.org/"/&gt;\n  &lt;link href="https://dailytrust.com/wp-json/wp/v2/posts/1208528" rel="alternate" type="application/json"/&gt;\n  &lt;link href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/" rel="canonical"/&gt;\n  &lt;link href="https://wp.me/pepE4n-54oo" rel="shortlink"/&gt;\n  &lt;link href="https://dailytrust.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdailytrust.com%2Flast-saturday-polls-raised-issues-that-require-immediate-solutions-inec%2F" rel="alternate" type="application/json+oembed"/&gt;\n  &lt;link href="https://dailytrust.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdailytrust.com%2Flast-saturday-polls-raised-issues-that-require-immediate-solutions-inec%2F&amp;amp;format=xml" rel="alternate" type="text/xml+oembed"/&gt;\n  &lt;meta content="Site Kit by Google 1.105.0" name="generator"/&gt;\n  &lt;meta content="yrq0u56l49i44ggzu9lnvhpt3n85ye" name="facebook-domain-verification"/&gt;\n  &lt;script async="" src="https://www.googletagmanager.com/gtag/js?id=AW-11061949242"&gt;\n  &lt;/script&gt;\n  &lt;script&gt;\n   window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag(\'js\',new Date());gtag(\'config\',\'AW-11061949242\');\n  &lt;/script&gt;\n  &lt;script async="" id="ebx" src="//applets.ebxcdn.com/ebx.js"&gt;\n  &lt;/script&gt;\n  &lt;script&gt;\n   gtag(\'event\',\'conversion\',{\'send_to\':\'AW-11061949242/XkLgCMrVzYcYELrm35op\'});\n  &lt;/script&gt;\n  &lt;script&gt;\n   !function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version=\'2.0\';n.queue=[];t=b.createElement(e);t.async=!0;t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,document,\'script\',\'https://connect.facebook.net/en_US/fbevents.js\');fbq(\'init\',\'1226941774766934\');fbq(\'track\',\'PageView\');\n  &lt;/script&gt;\n  &lt;noscript&gt;\n   &lt;img class="lazy" data-src="https://www.facebook.com/tr?id=1226941774766934&amp;amp;ev=PageView&amp;amp;noscript=1" height="1" src="data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201%201\'%3E%3C/svg%3E" style="display:none" width="1"/&gt;\n  &lt;/noscript&gt;\n  &lt;script&gt;\n   fbq(\'track\',\'InitiateCheckout\',{value:1200,});\n  &lt;/script&gt;\n  &lt;script&gt;\n   fbq(\'track\',\'ViewContent\');\n  &lt;/script&gt;\n  &lt;meta content="yrq0u56l49i44ggzu9lnvhpt3n85ye" name="facebook-domain-verification"/&gt;\n  &lt;style&gt;\n   img#wpstats{display:none}\n  &lt;/style&gt;\n  &lt;meta content="ca-host-pub-2644536267352236" name="google-adsense-platform-account"/&gt;\n  &lt;meta content="sitekit.withgoogle.com" name="google-adsense-platform-domain"/&gt;\n  &lt;meta content="The Independent National Electoral Commission (INEC) has admitted that the last Saturday presidential and National Assembly elections raises a number of issues that require immediate, medium and long-term solutions. INEC Chairman, Prof. Mahmood Yakubu, said this on Saturday in Abuja at a meeting with the Resident Electoral commissioners (RECs) held at the INEC headquarters, Abuja.…" name="description"/&gt;\n  &lt;ins class="adsbymahimeta" data-size="Native_Widget" id="mMTag_NativeWidget_48482158" style="display:inline-block;"&gt;\n   &lt;script&gt;\n    var cachebuster=Math.round(new Date().getTime()/1000);var mMTagScript=document.createElement(\'script\');mMTagScript.src=\'//mahimeta.com/networks/tag.js?cache=\'+cachebuster;document.getElementsByTagName("head")[0].appendChild(mMTagScript);\n   &lt;/script&gt;\n  &lt;/ins&gt;\n  &lt;style&gt;\n   .dt-grid{display:flex;align-content:center;justify-content:space-around;margin:0;padding:0;width:100%}dt-row{width:100%}.col-1{width:8.33333333333333%}.col-2{width:16.6666666666667%}.col-3{width:25%}.col-4{width:33.3333333333333%}.col-5{width:41.6666666666667%}.col-6{width:50%}.col-7{width:58.3333333333333%}.col-8{width:66.6666666666667%}.col-9{width:75%}.col-10{width:83.3333333333333%}.col-11{width:91.6666666666667%}.col-12{width:100%}.hidden-desktop{display:none}.hidden-mobile{display:block !important}@media screen and (max-width:428px){.dt-grid{flex-direction:column}.col-1.col-sm-1,.col-2.col-sm-1,.col-3.col-sm-1,.col-4.col-sm-1,.col-5.col-sm-1,.col-6.col-sm-1,.col-7.col-sm-1,.col-8.col-sm-1,.col-9.col-sm-1,.col-10.col-sm-1,.col-11.col-sm-1,.col-12.col-sm-1,.col-sm-1{width:8.33333333333333% !important}.col-sm-2{width:16.6666666666667%}.col-sm-3{width:25%}.col-sm-4{width:33.3333333333333%}.col-sm-5{width:41.6666666666667%}.col-sm-6{width:50%}.col-sm-7{width:58.3333333333333%}.col-sm-8{width:66.6666666666667%}.col-sm-9{width:75%}.col-sm-10{width:83.3333333333333%}.col-1.col-sm-11,.col-2.col-sm-11,.col-3.col-sm-11,.col-4.col-sm-11,.col-5.col-sm-11,.col-6.col-sm-11,.col-7.col-sm-11,.col-8.col-sm-11,.col-9.col-sm-11,.col-10.col-sm-11,.col-11.col-sm-11,.col-12.col-sm-11,.col-sm-11{width:91.6666666666667%}.col-1.col-sm-12,.col-2.col-sm-12,.col-3.col-sm-12,.col-4.col-sm-12,.col-5.col-sm-12,.col-6.col-sm-12,.col-7.col-sm-12,.col-8.col-sm-12,.col-9.col-sm-12,.col-10.col-sm-12,.col-11.col-sm-12,.col-12.col-sm-12,.col-sm-12{width:100% !important}.hidden-mobile{display:none !important}.hidden-desktop{display:block}}.dt-election-pc-iframe{margin:0;padding:0;border:0;width:100%;height:140px;overflow-x:hidden;overflow-y:hidden;overflow-wrap:break-word}dt-text-center{text-align:center}.gbg{margin:1em\nauto;display:block;-webkit-appearance:none;border:6px\nsolid rgba(255, 255, 255, 0.45);border-radius:50px;padding:1em\n3em;background-repeat:no-repeat;background-size:100%;background-clip:padding-box;position:relative;color:#FFF;text-decoration:none;font-weight:bold}.gbg:before{content:"";width:100%;height:100%;position:absolute;top:3px;left:3px;border-radius:50px;z-index:-1;filter:blur(14px)}.gbg:after{content:"";width:100%;height:100%;position:absolute;top:3px;right:3px;border-radius:50px;z-index:-1;filter:blur(14px)}.gbg1{background-image:linear-gradient(90deg, #7b81ec, #3bd1d3)}.gbg1:before{background-image:linear-gradient(90deg, #7b81ec, transparent)}.gbg1:after{background-image:linear-gradient(90deg, transparent, #3bd1d3)}.gbg2{background-image:linear-gradient(90deg, #fa80d2, #fed757)}.gbg2:before{background-image:linear-gradient(90deg, #fa80d2, transparent)}.gbg2:after{background-image:linear-gradient(90deg, transparent, #fed757)}.gbg3{background-image:linear-gradient(90deg, #18e37a, #06c12b)}.gbg3:before{background-image:linear-gradient(90deg, #95f4aa, transparent)}.gbg3:after{background-image:linear-gradient(90deg, transparent, #79f391)}.gbg4{background-image:linear-gradient(90deg, #525a69, #898dda)}.gbg4:before{background-image:linear-gradient(90deg, #525a69, transparent)}.gbg4:after{background-image:linear-gradient(90deg, transparent, #898dda)}\n  &lt;/style&gt;\n  &lt;script async="" crossorigin="anonymous" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7943548946436796&amp;amp;host=ca-host-pub-2644536267352236"&gt;\n  &lt;/script&gt;\n  &lt;meta content="article" property="og:type"/&gt;\n  &lt;meta content="Last Saturday polls raised issues that require immediate solutions – INEC - Daily Trust" property="og:title"/&gt;\n  &lt;meta content="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/" property="og:url"/&gt;\n  &lt;meta content="The Independent National Electoral Commission (INEC) has admitted that the last Saturday presidential and National Assembly elections raises a number of issues that require immediate, medium and lo…" property="og:description"/&gt;\n  &lt;meta content="2023-03-04T13:43:04+00:00" property="article:published_time"/&gt;\n  &lt;meta content="2023-03-04T13:43:04+00:00" property="article:modified_time"/&gt;\n  &lt;meta content="Daily Trust" property="og:site_name"/&gt;\n  &lt;meta content="https://dailytrust.com/wp-content/uploads/2021/05/INEC-Chairman.jpg" property="og:image"/&gt;\n  &lt;meta content="791" property="og:image:width"/&gt;\n  &lt;meta content="445" property="og:image:height"/&gt;\n  &lt;meta content="INEC Chairman, INEC Chairman, Prof. Mahmood Yakubu" property="og:image:alt"/&gt;\n  &lt;meta content="en_US" property="og:locale"/&gt;\n  &lt;meta content="@daily_trust" name="twitter:site"/&gt;\n  &lt;meta content="Last Saturday polls raised issues that require immediate solutions – INEC" name="twitter:text:title"/&gt;\n  &lt;meta content="https://dailytrust.com/wp-content/uploads/2021/05/INEC-Chairman.jpg?w=640" name="twitter:image"/&gt;\n  &lt;meta content="INEC Chairman, INEC Chairman, Prof. Mahmood Yakubu" name="twitter:image:alt"/&gt;\n  &lt;meta content="summary_large_image" name="twitter:card"/&gt;\n  &lt;link href="https://dailytrust.com/wp-content/uploads/2022/06/cropped-Daily-Trust-Icon-03-32x32.png" rel="icon" sizes="32x32"/&gt;\n  &lt;link href="https://dailytrust.com/wp-content/uploads/2022/06/cropped-Daily-Trust-Icon-03-192x192.png" rel="icon" sizes="192x192"/&gt;\n  &lt;link href="https://dailytrust.com/wp-content/uploads/2022/06/cropped-Daily-Trust-Icon-03-180x180.png" rel="apple-touch-icon"/&gt;\n  &lt;meta content="https://dailytrust.com/wp-content/uploads/2022/06/cropped-Daily-Trust-Icon-03-270x270.png" name="msapplication-TileImage"/&gt;\n  &lt;script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-45673018-1"&gt;\n  &lt;/script&gt;\n  &lt;script&gt;\n   window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}\ngtag(\'js\',new Date());gtag(\'config\',\'UA-45673018-1\');\n  &lt;/script&gt;\n  &lt;script async="" src="https://www.googletagmanager.com/gtag/js?id=G-PH182QF6V1"&gt;\n  &lt;/script&gt;\n  &lt;script&gt;\n   window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}\ngtag(\'js\',new Date());gtag(\'config\',\'G-PH182QF6V1\');\n  &lt;/script&gt;\n  &lt;script async="" defer="" src="https://securepubads.g.doubleclick.net/tag/js/gpt.js"&gt;\n  &lt;/script&gt;\n  &lt;script&gt;\n   window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_masthead_468_60\',[[728,90],[468,60]],\'div-gpt-ad-1668623512083-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust_home_hero_left\',[[250,250],[300,250]],\'div-gpt-ad-1668624668292-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust_home_hero_right\',[[250,250],[300,250]],\'div-gpt-ad-1668624841493-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust_homepage_leaderboard1\',[[728,90],\'fluid\',[468,60]],\'div-gpt-ad-1668625663864-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust_homepage_leaderboard2\',[\'fluid\',[468,60],[728,90]],\'div-gpt-ad-1668626014062-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust_homepage_leaderboard3\',[[728,90],[468,60],\'fluid\'],\'div-gpt-ad-1668626123585-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_article_right_sidebar_top\',[[300,250],\'fluid\'],\'div-gpt-ad-1668847848292-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_article_right_sidebar_bottom\',[[250,250],[300,250],\'fluid\'],\'div-gpt-ad-1668848350673-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_300_600_article_right\',[\'fluid\',[300,600]],\'div-gpt-ad-1668848575614-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});\n  &lt;/script&gt;\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;svg focusable="false" height="0" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" viewbox="0 0 0 0" width="0" xmlns="http://www.w3.org/2000/svg"&gt;\n   &lt;defs&gt;\n    &lt;filter id="wp-duotone-dark-grayscale"&gt;\n     &lt;fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "&gt;\n     &lt;/fecolormatrix&gt;\n     &lt;fecomponenttransfer color-interpolation-filters="sRGB"&gt;\n      &lt;fefuncr tablevalues="0 0.49803921568627" type="table"&gt;\n      &lt;/fefuncr&gt;\n      &lt;fefuncg tablevalues="0 0.49803921568627" type="table"&gt;\n      &lt;/fefuncg&gt;\n      &lt;fefuncb tablevalues="0 0.49803921568627" type="table"&gt;\n      &lt;/fefuncb&gt;\n      &lt;fefunca tablevalues="1 1" type="table"&gt;\n      &lt;/fefunca&gt;\n     &lt;/fecomponenttransfer&gt;\n     &lt;fecomposite in2="SourceGraphic" operator="in"&gt;\n     &lt;/fecomposite&gt;\n    &lt;/filter&gt;\n   &lt;/defs&gt;\n  &lt;/svg&gt;\n  &lt;svg focusable="false" height="0" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" viewbox="0 0 0 0" width="0" xmlns="http://www.w3.org/2000/svg"&gt;\n   &lt;defs&gt;\n    &lt;filter id="wp-duotone-grayscale"&gt;\n     &lt;fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "&gt;\n     &lt;/fecolormatrix&gt;\n     &lt;fecomponenttransfer color-interpolation-filters="sRGB"&gt;\n      &lt;fefuncr tablevalues="0 1" type="table"&gt;\n      &lt;/fefuncr&gt;\n      &lt;fefuncg tablevalues="0 1" type="table"&gt;\n      &lt;/fefuncg&gt;\n      &lt;fefuncb tablevalues="0 1" type="table"&gt;\n      &lt;/fefuncb&gt;\n      &lt;fefunca tablevalues="1 1" type="table"&gt;\n      &lt;/fefunca&gt;\n     &lt;/fecomponenttransfer&gt;\n     &lt;fecomposite in2="SourceGraphic" operator="in"&gt;\n     &lt;/fecomposite&gt;\n    &lt;/filter&gt;\n   &lt;/defs&gt;\n  &lt;/svg&gt;\n  &lt;svg focusable="false" height="0" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" viewbox="0 0 0 0" width="0" xmlns="http://www.w3.org/2000/svg"&gt;\n   &lt;defs&gt;\n    &lt;filter id="wp-duotone-purple-yellow"&gt;\n     &lt;fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "&gt;\n     &lt;/fecolormatrix&gt;\n     &lt;fecomponenttransfer color-interpolation-filters="sRGB"&gt;\n      &lt;fefuncr tablevalues="0.54901960784314 0.98823529411765" type="table"&gt;\n      &lt;/fefuncr&gt;\n      &lt;fefuncg tablevalues="0 1" type="table"&gt;\n      &lt;/fefuncg&gt;\n      &lt;fefuncb tablevalues="0.71764705882353 0.25490196078431" type="table"&gt;\n      &lt;/fefuncb&gt;\n      &lt;fefunca tablevalues="1 1" type="table"&gt;\n      &lt;/fefunca&gt;\n     &lt;/fecomponenttransfer&gt;\n     &lt;fecomposite in2="SourceGraphic" operator="in"&gt;\n     &lt;/fecomposite&gt;\n    &lt;/filter&gt;\n   &lt;/defs&gt;\n  &lt;/svg&gt;\n  &lt;svg focusable="false" height="0" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" viewbox="0 0 0 0" width="0" xmlns="http://www.w3.org/2000/svg"&gt;\n   &lt;defs&gt;\n    &lt;filter id="wp-duotone-blue-red"&gt;\n     &lt;fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "&gt;\n     &lt;/fecolormatrix&gt;\n     &lt;fecomponenttransfer color-interpolation-filters="sRGB"&gt;\n      &lt;fefuncr tablevalues="0 1" type="table"&gt;\n      &lt;/fefuncr&gt;\n      &lt;fefuncg tablevalues="0 0.27843137254902" type="table"&gt;\n      &lt;/fefuncg&gt;\n      &lt;fefuncb tablevalues="0.5921568627451 0.27843137254902" type="table"&gt;\n      &lt;/fefuncb&gt;\n      &lt;fefunca tablevalues="1 1" type="table"&gt;\n      &lt;/fefunca&gt;\n     &lt;/fecomponenttransfer&gt;\n     &lt;fecomposite in2="SourceGraphic" operator="in"&gt;\n     &lt;/fecomposite&gt;\n    &lt;/filter&gt;\n   &lt;/defs&gt;\n  &lt;/svg&gt;\n  &lt;svg focusable="false" height="0" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" viewbox="0 0 0 0" width="0" xmlns="http://www.w3.org/2000/svg"&gt;\n   &lt;defs&gt;\n    &lt;filter id="wp-duotone-midnight"&gt;\n     &lt;fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "&gt;\n     &lt;/fecolormatrix&gt;\n     &lt;fecomponenttransfer color-interpolation-filters="sRGB"&gt;\n      &lt;fefuncr tablevalues="0 0" type="table"&gt;\n      &lt;/fefuncr&gt;\n      &lt;fefuncg tablevalues="0 0.64705882352941" type="table"&gt;\n      &lt;/fefuncg&gt;\n      &lt;fefuncb tablevalues="0 1" type="table"&gt;\n      &lt;/fefuncb&gt;\n      &lt;fefunca tablevalues="1 1" type="table"&gt;\n      &lt;/fefunca&gt;\n     &lt;/fecomponenttransfer&gt;\n     &lt;fecomposite in2="SourceGraphic" operator="in"&gt;\n     &lt;/fecomposite&gt;\n    &lt;/filter&gt;\n   &lt;/defs&gt;\n  &lt;/svg&gt;\n  &lt;svg focusable="false" height="0" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" viewbox="0 0 0 0" width="0" xmlns="http://www.w3.org/2000/svg"&gt;\n   &lt;defs&gt;\n    &lt;filter id="wp-duotone-magenta-yellow"&gt;\n     &lt;fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "&gt;\n     &lt;/fecolormatrix&gt;\n     &lt;fecomponenttransfer color-interpolation-filters="sRGB"&gt;\n      &lt;fefuncr tablevalues="0.78039215686275 1" type="table"&gt;\n      &lt;/fefuncr&gt;\n      &lt;fefuncg tablevalues="0 0.94901960784314" type="table"&gt;\n      &lt;/fefuncg&gt;\n      &lt;fefuncb tablevalues="0.35294117647059 0.47058823529412" type="table"&gt;\n      &lt;/fefuncb&gt;\n      &lt;fefunca tablevalues="1 1" type="table"&gt;\n      &lt;/fefunca&gt;\n     &lt;/fecomponenttransfer&gt;\n     &lt;fecomposite in2="SourceGraphic" operator="in"&gt;\n     &lt;/fecomposite&gt;\n    &lt;/filter&gt;\n   &lt;/defs&gt;\n  &lt;/svg&gt;\n  &lt;svg focusable="false" height="0" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" viewbox="0 0 0 0" width="0" xmlns="http://www.w3.org/2000/svg"&gt;\n   &lt;defs&gt;\n    &lt;filter id="wp-duotone-purple-green"&gt;\n     &lt;fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "&gt;\n     &lt;/fecolormatrix&gt;\n     &lt;fecomponenttransfer color-interpolation-filters="sRGB"&gt;\n      &lt;fefuncr tablevalues="0.65098039215686 0.40392156862745" type="table"&gt;\n      &lt;/fefuncr&gt;\n      &lt;fefuncg tablevalues="0 1" type="table"&gt;\n      &lt;/fefuncg&gt;\n      &lt;fefuncb tablevalues="0.44705882352941 0.4" type="table"&gt;\n      &lt;/fefuncb&gt;\n      &lt;fefunca tablevalues="1 1" type="table"&gt;\n      &lt;/fefunca&gt;\n     &lt;/fecomponenttransfer&gt;\n     &lt;fecomposite in2="SourceGraphic" operator="in"&gt;\n     &lt;/fecomposite&gt;\n    &lt;/filter&gt;\n   &lt;/defs&gt;\n  &lt;/svg&gt;\n  &lt;svg focusable="false" height="0" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" viewbox="0 0 0 0" width="0" xmlns="http://www.w3.org/2000/svg"&gt;\n   &lt;defs&gt;\n    &lt;filter id="wp-duotone-blue-orange"&gt;\n     &lt;fecolormatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "&gt;\n     &lt;/fecolormatrix&gt;\n     &lt;fecomponenttransfer color-interpolation-filters="sRGB"&gt;\n      &lt;fefuncr tablevalues="0.098039215686275 1" type="table"&gt;\n      &lt;/fefuncr&gt;\n      &lt;fefuncg tablevalues="0 0.66274509803922" type="table"&gt;\n      &lt;/fefuncg&gt;\n      &lt;fefuncb tablevalues="0.84705882352941 0.41960784313725" type="table"&gt;\n      &lt;/fefuncb&gt;\n      &lt;fefunca tablevalues="1 1" type="table"&gt;\n      &lt;/fefunca&gt;\n     &lt;/fecomponenttransfer&gt;\n     &lt;fecomposite in2="SourceGraphic" operator="in"&gt;\n     &lt;/fecomposite&gt;\n    &lt;/filter&gt;\n   &lt;/defs&gt;\n  &lt;/svg&gt;\n  &lt;div class="sidenav" id="mySidenav"&gt;\n   &lt;a class="menu_menu_item__1uvRI"&gt;\n    &lt;span onclick="closeNav()" style="color:#fff;cursor:pointer; font-weight:bold"&gt;\n     ✕ CLOSE\n    &lt;/span&gt;\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/online-special"&gt;\n    Online Special\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/city-news" id="1"&gt;\n    City News\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/entrepreneurship" id="3"&gt;\n    Entrepreneurship\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/environment" id="4"&gt;\n    Environment\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/factcheck" id="5"&gt;\n    Factcheck\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/everything-woman" id="6"&gt;\n    Everything Woman\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/home-front" id="7"&gt;\n    Home Front\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/islamic-forum" id="8"&gt;\n    Islamic Forum\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/life-xtra" id="9"&gt;\n    Life Xtra\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/property" id="10"&gt;\n    Property\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/travel-leisure" id="11"&gt;\n    Travel &amp;amp;amp; Leisure\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/viewpoint" id="12"&gt;\n    Viewpoint\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/vox-pop" id="13"&gt;\n    Vox Pop\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/women-in-business" id="14"&gt;\n    Women In Business\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/art-and-ideas" id="15"&gt;\n    Art and Ideas\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/bookshelf" id="16"&gt;\n    Bookshelf\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/labour" id="17"&gt;\n    Labour\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/law" id="18"&gt;\n    Law\n   &lt;/a&gt;\n   &lt;a class="menu_menu_item__1uvRI" href="/topics/letters" id="19"&gt;\n    Letters\n   &lt;/a&gt;\n  &lt;/div&gt;\n  &lt;main id="main" style="background: white; position: relative; z-index: 10; display: flex; flex-direction: column; min-height: 100vh;"&gt;\n   &lt;style&gt;\n    @media screen and (max-width:620px){.top__menu__wrap{text-align:center}.top__menu__item{border-right:1px solid #c0c0c0;text-align:center;padding-right:5px;align-content:center;justify-content:space-between}.top__menu__item&gt;a{font-size:9px;text-align:center;color:navy}#blink-link-image{width:80px !important;height:35px !important}}@media screen and (max-width:350px){.top__menu__item{padding-right:1px}.top__menu__item&gt;a{font-size:7px}#blink-link-image{width:60px !important;height:30px !important}}@keyframes\nblink{0%{opacity:1}49%{opacity:1}50%{opacity:0}100%{opacity:0}}#blink-link-image{width:150px;height:80px;vertical-align:bottom;animation:blink 1s;animation-iteration-count:infinite}\n   &lt;/style&gt;\n   &lt;header class="header" id="masthead"&gt;\n    &lt;section class="top__menu"&gt;\n     &lt;div class="container"&gt;\n      &lt;ul class="top__menu__wrap"&gt;\n       &lt;li class="top__menu__item"&gt;\n        &lt;a href="https://trustcheck.dailytrust.com/" rel="noopener noreferrer" target="_trustcheck" title="Fact Check"&gt;\n         Fact Check\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li class="top__menu__item"&gt;\n        &lt;a href="https://dailytrust.com/change-of-name/" rel="noopener noreferrer" target="_changeofname" title="Change Of Name"&gt;\n         Change Of Name\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li class="top__menu__item"&gt;\n        &lt;a href="https://membership.dailytrust.com/" rel="noopener noreferrer" target="_blank" title="Membership"&gt;\n         Trust+\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li class="top__menu__item"&gt;\n        &lt;a href="https://aminiya.dailytrust.com/" rel="noopener noreferrer" target="_blank" title="Aminiya"&gt;\n         Aminiya\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li class="top__menu__item"&gt;\n        &lt;a href="https://epaper.dailytrust.com/" rel="noopener noreferrer" target="_blank" title="e-Paper"&gt;\n         E-Paper\n        &lt;/a&gt;\n        &lt;li class="top__menu__item"&gt;\n         &lt;li class="top__menu__item"&gt;\n          &lt;a href="https://trusttv.com/" rel="noopener noreferrer" target="trusttv" title="Trust-Tv"&gt;\n           TV-Live\n          &lt;/a&gt;\n         &lt;/li&gt;\n        &lt;/li&gt;\n       &lt;/li&gt;\n      &lt;/ul&gt;\n     &lt;/div&gt;\n    &lt;/section&gt;\n    &lt;div class="header__advert"&gt;\n     &lt;div class="ad_container"&gt;\n      &lt;div id="div-gpt-ad-1668623512083-0" style="min-width: 468px; min-height: 60px;"&gt;\n       &lt;script&gt;\n        googletag.cmd.push(function(){googletag.display(\'div-gpt-ad-1668623512083-0\');});\n       &lt;/script&gt;\n      &lt;/div&gt;\n     &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;section class="main"&gt;\n     &lt;div class="container inner"&gt;\n      &lt;div class="left"&gt;\n       &lt;a aria-label="Search dailytrust" href="/search" title="Search"&gt;\n        &lt;div class="search"&gt;\n         &lt;svg fill="#000000" height="20px" viewbox="0 0 50 50" width="20px" xmlns="http://www.w3.org/2000/svg"&gt;\n          &lt;path d="M 21 3 C 11.621094 3 4 10.621094 4 20 C 4 29.378906 11.621094 37 21 37 C 24.710938 37 28.140625 35.804688 30.9375 33.78125 L 44.09375 46.90625 L 46.90625 44.09375 L 33.90625 31.0625 C 36.460938 28.085938 38 24.222656 38 20 C 38 10.621094 30.378906 3 21 3 Z M 21 5 C 29.296875 5 36 11.703125 36 20 C 36 28.296875 29.296875 35 21 35 C 12.703125 35 6 28.296875 6 20 C 6 11.703125 12.703125 5 21 5 Z"&gt;\n          &lt;/path&gt;\n         &lt;/svg&gt;\n        &lt;/div&gt;\n        &lt;span&gt;\n         Search\n        &lt;/span&gt;\n       &lt;/a&gt;\n      &lt;/div&gt;\n      &lt;div class="logo"&gt;\n       &lt;a aria-label="Dailytrust" href="/" title="Dailytrust"&gt;\n        &lt;img alt="Dailytrust" aria-label="Dailytrust" class="lazy" data-src="https://dailytrust.com/dailytrust.svg" src="data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201%201\'%3E%3C/svg%3E"/&gt;\n       &lt;/a&gt;\n      &lt;/div&gt;\n      &lt;div class="right"&gt;\n       &lt;a class="subscribe" href="https://epaper.dailytrust.com/" rel="noopener noreferrer" target="_blank" title="E-Paper Subscription"&gt;\n        Subscribe\n       &lt;/a&gt;\n      &lt;/div&gt;\n     &lt;/div&gt;\n    &lt;/section&gt;\n    &lt;nav class="menu" id="site-navigation"&gt;\n     &lt;ul class="container"&gt;\n      &lt;li&gt;\n       &lt;a class="active" href="/"&gt;\n        Home\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/news"&gt;\n        News\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/2023-elections" title="Nigeria 2023 General Elections"&gt;\n        2023 Elections\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/business"&gt;\n        Business\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/politics"&gt;\n        Politics\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/podcast"&gt;\n        Podcast\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/videos"&gt;\n        Videos\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/agriculture"&gt;\n        Agriculture\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/sports"&gt;\n        Sports\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/opinion"&gt;\n        Opinion\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/education"&gt;\n        Education\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/entertainment"&gt;\n        Entertainment\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;a href="/topics/international"&gt;\n        International\n       &lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n       &lt;span onclick="openNav()" style="color:#ffffff;cursor:pointer;font-size:25px"&gt;\n        ☰\n       &lt;/span&gt;\n      &lt;/li&gt;\n     &lt;/ul&gt;\n    &lt;/nav&gt;\n   &lt;/header&gt;\n   &lt;div class="mytuner-widget" data-autoplay="false" data-hidehistory="true" data-requires_initialization="true" data-target="494909" id="wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==" style="width: 100%; max-width: 100%; overflow: hidden; max-height: 500px; border: 1px solid rgb(249, 240, 107); border-radius: 6px;"&gt;\n    &lt;style&gt;\n     .mytuner-widget{all:initial;display:block;color:#fff}.mytuner-widget, .mytuner-widget\n*{box-sizing:border-box;font-family:sans-serif}.main-play-button{padding:5px;border-radius:20px;width:40px;height:40px;float:left;margin-left:10px;margin-right:15px;margin-top:12.5px;cursor:pointer;background-color:#FFF;box-shadow:1px 2px 6px -3px black;display:inline-block}.main-play-button:hover{background-color:#EEE}.main-play-button.disabled{filter:grayscale(1);cursor:not-allowed}.main-play-button\ndiv{background:url("https://mytuner-radio.com/static/icons/widgets/BT_Play/BT_Play@2x.png") no-repeat center;background-size:16px;width:28px;height:28px;margin-left:3px}.main-play-button.loading\ndiv{background:url("https://static2.mytuner.mobi/static/images/sprite-loading.gif") no-repeat center;filter:grayscale(1);background-size:28px;margin-left:2px}.main-play-button.playing\ndiv{background:url("https://mytuner-radio.com/static/icons/widgets/BT_Pause/BT_Pause@2x.png") no-repeat center;background-size:16px;margin-left:2px}.main-play-button.error\ndiv{background:url("https://mytuner-radio.com/static/icons/widgets/BT_Error/erro@2x.png") no-repeat center;background-size:16px;margin-left:0}.play-button{background:url("https://mytuner-radio.com/static/icons/widgets/BT_Play/BT_Play.png") no-repeat center;width:40px;height:40px;cursor:pointer;display:inline-flex;align-items:center;margin:auto 4px auto 19px}.play-button.loading{background:url("https://static2.mytuner.mobi/static/images/sprite-loading.gif") no-repeat center;filter:grayscale(1);background-size:28px}.play-button.playing{background:url("https://mytuner-radio.com/static/icons/widgets/BT_Pause/BT_Pause.png") no-repeat center}.play-button.error{background:url("https://mytuner-radio.com/static/icons/widgets/BT_Error/erro.png") no-repeat center;background-size:15px}.play-button.disabled{opacity:0.3}.play-button.disabled:hover{cursor:not-allowed}input[type=range][orient=vertical]{writing-mode:bt-lr;-webkit-appearance:slider-vertical;width:8px;padding:0\n5px}.volume-controls{width:35px;height:35px;display:inline-block;position:absolute;margin-left:5px;margin-top:14px;padding-top:0;border-radius:20px;box-sizing:content-box !important;z-index:10;border:1px\nsolid transparent;transition:background 0.5s, padding 0.5s, margin 0.5s, border 0.5s;overflow:hidden}.volume-controls:hover{padding-top:140px;margin-top:-126px;background-color:#F2F2F2;border:1px\nsolid grey;transition:background 0.5s, padding 0.5s, margin 0.5s}.volume-controls:hover&gt;.volume-control{display:block}.volume-controls .volume-control{opacity:0;margin-top:-126px;margin-left:13px;position:absolute;transition:0.5s all}.volume-controls:hover .volume-control{opacity:1}.volume-controls .volume-indicator{cursor:pointer;display:block}.player-radio-link{width:calc(100% - 65px - 84px - 37px - 12px)}.player-radio-name{width:calc(100% - 74px - 10px)}.player-mytuner-logo{margin-left:47px}@media (max-width: 480px){.player-radio-link{width:calc(100% - 65px - 84px - 12px)}.player-mytuner-logo{margin-left:10px}.volume-controls{display:none}}\n    &lt;/style&gt;\n    &lt;div id="wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==top-bar" style="background: rgb(153, 193, 241); height: 75px; width: 100%; display: block; padding: 5px; line-height: 65px;"&gt;\n     &lt;div class="main-play-button disabled" data-id="wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==" id="wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==play-button"&gt;\n      &lt;div class="play-image"&gt;\n      &lt;/div&gt;\n     &lt;/div&gt;\n     &lt;a class="player-radio-link" href="http://mytuner-radio.com/radio/trust-radio-494909/?utm_source=widget&amp;amp;utm_medium=player" rel="noopener" style="height: 100%; display: inline-block; line-height: 65px; cursor: pointer;" target="_blank"&gt;\n      &lt;img alt="Trust Radio Live" class="lazy" data-src="https://static2.mytuner.mobi/media/tvos_radios/u24fKacN9K.png" src="data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201%201\'%3E%3C/svg%3E" style="float: left; height: 74px; margin-top: -5px; box-shadow: black 0px 0px 3px -1px;"/&gt;\n      &lt;span class="player-radio-name" style="margin-left: 10px; color: rgb(255, 255, 255); font-weight: bold; font-size: 20px; float: left; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"&gt;\n       Trust Radio Live\n      &lt;/span&gt;\n     &lt;/a&gt;\n     &lt;div class="volume-controls"&gt;\n      &lt;input class="volume-control slider" id="wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==volume-control" max="100" min="1" orient="vertical" type="range" value="100"/&gt;\n      &lt;svg class="volume-indicator" height="30" id="wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==volume-indicator" style="fill: grey; margin: 2px;" viewbox="0 0 24 24" width="30" xmlns="http://www.w3.org/2000/svg"&gt;\n       &lt;path d="M3 10v4c0 .55.45 1 1 1h3l3.29 3.29c.63.63 1.71.18 1.71-.71V6.41c0-.89-1.08-1.34-1.71-.71L7 9H4c-.55 0-1 .45-1 1zm13.5 2c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 4.45v.2c0 .38.25.71.6.85C17.18 6.53 19 9.06 19 12s-1.82 5.47-4.4 6.5c-.36.14-.6.47-.6.85v.2c0 .63.63 1.07 1.21.85C18.6 19.11 21 15.84 21 12s-2.4-7.11-5.79-8.4c-.58-.23-1.21.22-1.21.85z"&gt;\n       &lt;/path&gt;\n      &lt;/svg&gt;\n     &lt;/div&gt;\n     &lt;a class="player-mytuner-logo" href="https://mytuner-radio.com?utm_source=widget&amp;amp;utm_medium=player" rel="noopener" style="display: inline-block; vertical-align: top;" target="_blank"&gt;\n      &lt;img alt="Listen on myTuner radio!" class="lazy" data-src="https://mytuner-radio.com/static/icons/widgets/MyTuner_Logo/MyTunerLogo_White.png" src="data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201%201\'%3E%3C/svg%3E" style="height: 36px; width: 84px; vertical-align: middle;"/&gt;\n     &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;ul data-border="1" data-bordercolor="#817f80" id="wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==song-history" style="width: 100%; background-color: rgb(238, 238, 238); max-height: calc(415px); padding: 0px; margin: 0px; overflow-y: scroll;"&gt;\n    &lt;/ul&gt;\n    &lt;script&gt;\n     var mytuner_scripts=mytuner_scripts||{};mytuner_scripts["player-v1.js_queue"]=mytuner_scripts["player-v1.js_queue"]||[];if(mytuner_scripts["player-v1.js-imported"]==undefined){mytuner_scripts["player-v1.js-imported"]=false;mytuner_scripts["player-v1.js"]=function(){};var s=document.createElement("script");s.type="text/javascript";s.src="https://mytuner-radio.com/static/js/widgets/player-v1.js";s.defer=true;if(s.readyState){s.onreadystatechange=function(){if(s.readyState=="loaded"||s.readyState=="complete"){s.onreadystatechange=null;runQueue();}};}else{s.onload=function(){runQueue();};}\ndocument.getElementsByTagName(\'head\')[0].appendChild(s);function runQueue(){mytuner_scripts["player-v1.js_queue"].forEach(function(func){func();});}\nmytuner_scripts["player-v1.js_queue"].push(function(){mytuner_scripts["player-v1.js"]("wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==")});}else{let widget=document.getElementById("wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==");if(widget&amp;&amp;widget.dataset.requires_initialization==="true"){if(mytuner_scripts["player-v1.js-imported"]){mytuner_scripts["player-v1.js"]("wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==");widget.dataset.requires_initialization="false";}else{mytuner_scripts["player-v1.js_queue"].push(function(){mytuner_scripts["player-v1.js"]("wq/DusOzPWIxwrzDtHhjU3g7wrVDRzdHIsOybA==");widget.dataset.requires_initialization="false";});}}}\n    &lt;/script&gt;\n    &lt;script&gt;\n     var mytuner_scripts=mytuner_scripts||{};if(mytuner_scripts["widget-player-v1.js-imported"]==undefined){mytuner_scripts["widget-player-v1.js-imported"]=false;var s=document.createElement("script");s.type="text/javascript";s.src="https://mytuner-radio.com/static/js/widgets/widget-player-v1.js";s.defer=true;document.getElementsByTagName(\'head\')[0].appendChild(s);}\n    &lt;/script&gt;\n   &lt;/div&gt;\n   &lt;main class="post-container row"&gt;\n    &lt;div class="post-middle article-container post"&gt;\n     &lt;script defer=""&gt;\n      window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_300_600_article_right\',[\'fluid\',[300,600]],\'div-gpt-ad-1669708905704-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});\n     &lt;/script&gt;\n     &lt;script&gt;\n      window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_inarticle-1\',[[250,250],[300,250],[728,90],[168,42],[960,90],[120,30],[168,28],[120,20],[120,60],[200,200],[950,90],[750,200]],\'div-gpt-ad-1669272607411-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.pubads().collapseEmptyDivs();googletag.enableServices();});\n     &lt;/script&gt;\n     &lt;script defer=""&gt;\n      window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_inarticle-2\',[[120,30],[120,20],[960,90],[234,60],[970,90],[250,250],[300,250],[750,100],[320,50],[200,200],[980,90],[300,100],\'fluid\',[120,90],[750,300],[728,90],[300,75],[750,200],[950,90],[300,50],[300,31],[120,60],[970,66]],\'div-gpt-ad-1669291431753-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.pubads().collapseEmptyDivs();googletag.enableServices();});\n     &lt;/script&gt;\n     &lt;script defer=""&gt;\n      window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_inarticle-3\',[[950,90],[200,200],[320,100],[300,50],[292,30],[300,31],[120,30],\'fluid\',[234,60],[300,75],[750,200],[320,50],[750,100],[320,480],[300,100],[980,90],[120,20],[960,90],[970,90],[250,250],[300,250],[728,90]],\'div-gpt-ad-1669291045016-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.pubads().collapseEmptyDivs();googletag.enableServices();});\n     &lt;/script&gt;\n     &lt;script defer=""&gt;\n      window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust_article_bottom\',[[640,360],[468,60],[300,250],[400,300],[728,90]],\'div-gpt-ad-1670511529037-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});\n     &lt;/script&gt;\n     &lt;script defer=""&gt;\n      window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust_article_bottom\',[[640,360],[468,60],[400,300],[728,90],[300,250]],\'div-gpt-ad-1670932839695-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});\n     &lt;/script&gt;\n     &lt;script async="" src="https://securepubads.g.doubleclick.net/tag/js/gpt.js"&gt;\n     &lt;/script&gt;\n     &lt;script&gt;\n      window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_article_right_sidebar_top\',[[300,250],\'fluid\'],\'div-gpt-ad-1685451176264-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});\n     &lt;/script&gt;\n     &lt;script async="" src="https://securepubads.g.doubleclick.net/tag/js/gpt.js"&gt;\n     &lt;/script&gt;\n     &lt;script&gt;\n      window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_300_600_article_right\',[[300,600],\'fluid\'],\'div-gpt-ad-1685451004084-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});\n     &lt;/script&gt;\n     &lt;section class="title-header"&gt;\n      &lt;div style="margin-bottom:10"&gt;\n       &lt;div class="categoty__title"&gt;\n        &lt;a aria-label="News" href="https://dailytrust.com/topics/news/" title="News"&gt;\n         News\n        &lt;/a&gt;\n       &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;h1 class="h1v1"&gt;\n       Last Saturday polls raised issues that require immediate solutions – INEC\n      &lt;/h1&gt;\n      &lt;p class="excerpt"&gt;\n       The Independent National Electoral Commission (INEC) has admitted that the last Saturday presidential and National Assembly elections raises a number of issues that require immediate,…\n      &lt;/p&gt;\n     &lt;/section&gt;\n     &lt;section class="featured-image"&gt;\n      &lt;div class="post-thumbnail"&gt;\n       &lt;img alt="INEC Chairman, INEC Chairman, Prof. Mahmood Yakubu" class="attachment-post-thumbnail size-post-thumbnail wp-post-image lazy" data-sizes="(max-width: 791px) 100vw, 791px" data-src="https://dailytrust.com/wp-content/uploads/2021/05/INEC-Chairman.jpg" data-srcset="https://dailytrust.com/wp-content/uploads/2021/05/INEC-Chairman.jpg 791w, https://dailytrust.com/wp-content/uploads/2021/05/INEC-Chairman-600x338.jpg 600w, https://dailytrust.com/wp-content/uploads/2021/05/INEC-Chairman-711x400.jpg 711w, https://dailytrust.com/wp-content/uploads/2021/05/INEC-Chairman-768x432.jpg 768w" decoding="async" height="445" src="data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20791%20445\'%3E%3C/svg%3E" width="791"/&gt;\n      &lt;/div&gt;\n      &lt;figcaption class="caption"&gt;\n       &lt;span&gt;\n        INEC Chairman, INEC Chairman, Prof. Mahmood Yakubu\n       &lt;/span&gt;\n      &lt;/figcaption&gt;\n     &lt;/section&gt;\n     &lt;section class="post-author"&gt;\n      &lt;div class="wraper flow"&gt;\n       &lt;ul class="names"&gt;\n        &lt;span style="margin-right:6px"&gt;\n         By\n        &lt;/span&gt;\n        &lt;a href="https://dailytrust.com/author/Abbas Jimoh"&gt;\n         Abbas Jimoh\n        &lt;/a&gt;\n       &lt;/ul&gt;\n      &lt;/div&gt;\n     &lt;/section&gt;\n     &lt;section class="author__share"&gt;\n      &lt;div class="post-time"&gt;\n       Sat, 4 Mar 2023 14:43:04 WAT\n      &lt;/div&gt;\n      &lt;ul class="share small dark"&gt;\n       &lt;li&gt;\n        &lt;a href="https://wa.me/?text=https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/" rel="noopener noreferrer" target="_blank"&gt;\n         &lt;svg height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"&gt;\n          &lt;path d="M12.031 6.172c-3.181 0-5.767 2.586-5.768 5.766-.001 1.298.38 2.27 1.019 3.287l-.582 2.128 2.182-.573c.978.58 1.911.928 3.145.929 3.178 0 5.767-2.587 5.768-5.766.001-3.187-2.575-5.77-5.764-5.771zm3.392 8.244c-.144.405-.837.774-1.17.824-.299.045-.677.063-1.092-.069-.252-.08-.575-.187-.988-.365-1.739-.751-2.874-2.502-2.961-2.617-.087-.116-.708-.94-.708-1.793s.448-1.273.607-1.446c.159-.173.346-.217.462-.217l.332.006c.106.005.249-.04.39.298.144.347.491 1.2.534 1.287.043.087.072.188.014.304-.058.116-.087.188-.173.289l-.26.304c-.087.086-.177.18-.076.354.101.174.449.741.964 1.201.662.591 1.221.774 1.394.86s.274.072.376-.043c.101-.116.433-.506.549-.68.116-.173.231-.145.39-.087s1.011.477 1.184.564.289.13.332.202c.045.072.045.419-.1.824zm-3.423-14.416c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm.029 18.88c-1.161 0-2.305-.292-3.318-.844l-3.677.964.984-3.595c-.607-1.052-.927-2.246-.926-3.468.001-3.825 3.113-6.937 6.937-6.937 1.856.001 3.598.723 4.907 2.034 1.31 1.311 2.031 3.054 2.03 4.908-.001 3.825-3.113 6.938-6.937 6.938z"&gt;\n          &lt;/path&gt;\n         &lt;/svg&gt;\n        &lt;/a&gt;\n        &lt;li&gt;\n         &lt;a href="https://www.facebook.com/sharer/sharer.php?u=https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/" rel="noopener noreferrer" target="_blank"&gt;\n          &lt;svg height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"&gt;\n           &lt;path d="M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm3 8h-1.35c-.538 0-.65.221-.65.778v1.222h2l-.209 2h-1.791v7h-3v-7h-2v-2h2v-2.308c0-1.769.931-2.692 3.029-2.692h1.971v3z"&gt;\n           &lt;/path&gt;\n          &lt;/svg&gt;\n         &lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n         &lt;a href="https://twitter.com/intent/tweet?text=https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/" rel="noopener noreferrer" target="_blank"&gt;\n          &lt;svg height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"&gt;\n           &lt;path d="M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6.066 9.645c.183 4.04-2.83 8.544-8.164 8.544-1.622 0-3.131-.476-4.402-1.291 1.524.18 3.045-.244 4.252-1.189-1.256-.023-2.317-.854-2.684-1.995.451.086.895.061 1.298-.049-1.381-.278-2.335-1.522-2.304-2.853.388.215.83.344 1.301.359-1.279-.855-1.641-2.544-.889-3.835 1.416 1.738 3.533 2.881 5.92 3.001-.419-1.796.944-3.527 2.799-3.527.825 0 1.572.349 2.096.907.654-.128 1.27-.368 1.824-.697-.215.671-.67 1.233-1.263 1.589.581-.07 1.135-.224 1.649-.453-.384.578-.87 1.084-1.433 1.489z"&gt;\n           &lt;/path&gt;\n          &lt;/svg&gt;\n         &lt;/a&gt;\n        &lt;/li&gt;\n       &lt;/li&gt;\n      &lt;/ul&gt;\n     &lt;/section&gt;\n     &lt;article class="body article__body"&gt;\n      &lt;p&gt;\n       &lt;strong&gt;\n        The Independent National Electoral Commission (INEC) has admitted that the last Saturday presidential and National Assembly elections raises a number of issues that require immediate, medium and long-term solutions.\n       &lt;/strong&gt;\n      &lt;/p&gt;\n      &lt;p&gt;\n       INEC Chairman, Prof. Mahmood Yakubu, said this on Saturday in Abuja at a meeting with the Resident Electoral commissioners (RECs) held at the INEC headquarters, Abuja.\n      &lt;/p&gt;\n      &lt;div id="v-dailytrust"&gt;\n      &lt;/div&gt;\n      &lt;script&gt;\n       (function(v,d,o,ai){ai=d.createElement(\'script\');ai.defer=true;ai.async=true;ai.src=v.location.protocol+o;d.head.appendChild(ai);})(window,document,\'//a.vdo.ai/core/v-dailytrust/vdo.ai.js\');\n      &lt;/script&gt;\n      &lt;p&gt;\n       He said, “It is imperative to review performance and assess preparations. No doubt, last week’s national elections raised a number of issues that require immediate, medium, and long-term solutions.\n      &lt;/p&gt;\n      &lt;p&gt;\n       “The planning for the election was painstakingly done. However, its implementation came with challenges, some of them unforeseen. The issues of logistics, election technology, behaviour of some election personnel at different levels, attitude of some party agents and supporters added to the extremely challenging environment in which elections are usually held in Nigeria.”\n      &lt;/p&gt;\n      &lt;div id="div-gpt-ad-1669272607411-0" style="min-width: 120px; min-height: 20px;"&gt;\n       &lt;script&gt;\n        googletag.cmd.push(function(){googletag.display(\'div-gpt-ad-1669272607411-0\');});\n       &lt;/script&gt;\n      &lt;/div&gt;\n      &lt;p&gt;\n       &lt;a href="https://dailytrust.com/breaking-inec-bars-negligent-staff-from-governorship-polls-issues-stern-warning-to-recs/"&gt;\n        BREAKING: INEC bars negligent staff from governorship polls, issues stern warning to RECs\n       &lt;/a&gt;\n      &lt;/p&gt;\n      &lt;p&gt;\n       &lt;a href="https://dailytrust.com/court-grants-atiku-obis-request-to-inspect-election-materials/"&gt;\n        Court grants Atiku, Obi&amp;amp;#8217;s request to inspect election materials\n       &lt;/a&gt;\n      &lt;/p&gt;\n      &lt;p&gt;\n       The INEC boss said he appreciated the sacrifice and doggedness of Nigerians and the dignity and maturity displayed by political leaders even in the context of divergent views about the election.\n      &lt;/p&gt;\n      &lt;p&gt;\n       Yakubu said that a lot of lessons had been learnt and of immediate concern to the commission is how the identified challenges can be addressed ahead of the next Saturday’s governorship and state houses of aassembly elections in 28 states.\n      &lt;/p&gt;\n      &lt;script async="" crossorigin="anonymous" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7943548946436796"&gt;\n      &lt;/script&gt;\n      &lt;ins class="adsbygoogle" data-ad-client="ca-pub-7943548946436796" data-ad-format="auto" data-ad-slot="4569210792" data-full-width-responsive="true" style="display:block"&gt;\n      &lt;/ins&gt;\n      &lt;script&gt;\n       (adsbygoogle=window.adsbygoogle||[]).push({});\n      &lt;/script&gt;\n      &lt;p&gt;\n       The chairman also said that for the last Saturday’s elections, winners had been declared for 423 national legislative seats while supplementary elections would be held in 46 constituencies.\n      &lt;/p&gt;\n      &lt;p&gt;\n       According to him, in the Senate, 98 out of 109 seats had been declared, with seven political parties winning senatorial seats while in the House of Representatives, 325 out of 360 seats had been won by eight political parties.\n      &lt;/p&gt;\n      &lt;p&gt;\n       He noted that in terms of party representation, this is the most diverse National Assembly since 1999.\n      &lt;/p&gt;\n      &lt;p&gt;\n       He said that in the Senate APC has\xa0 57 seats, APGA 1, LP 6, NNPP 2, PDP 29, SDP 2, YPP 1; while in the House of Representatives, ADC 2, APC 162, APGA 4, LP 34, NNPP 18, PDP 102, SDP 2, YPP 1.\n      &lt;/p&gt;\n      &lt;p&gt;\n       He said, “Certificates of Return will be presented to Senators-elect on Tuesday 7th March 2023 at 11.00am at the National Collation Centre (the International Conference Centre), Abuja, while Members of the House of Representatives-elect will receive theirs the following day, Wednesday 8th March 2023, at 11.00am at the same venue.\n      &lt;/p&gt;\n      &lt;script async="" crossorigin="anonymous" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7005578050454879"&gt;\n      &lt;/script&gt;\n      &lt;ins class="adsbygoogle" data-ad-client="ca-pub-7005578050454879" data-ad-format="auto" data-ad-slot="3639709870" data-full-width-responsive="true" style="display:block"&gt;\n      &lt;/ins&gt;\n      &lt;script&gt;\n       (adsbygoogle=window.adsbygoogle||[]).push({});\n      &lt;/script&gt;\n      &lt;p&gt;\n       “However, for effective crowd management, each Senator/Member-elect should be accompanied by a maximum of two guests.”\n      &lt;/p&gt;\n      &lt;div id="div-gpt-ad-1669291045016-0" style="min-width: 120px; min-height: 20px;"&gt;\n       &lt;script&gt;\n        googletag.cmd.push(function(){googletag.display(\'div-gpt-ad-1669291045016-0\');});\n       &lt;/script&gt;\n      &lt;/div&gt;\n      &lt;a href="https://dailytrust.com/nigerians-can-now-get-paid-monthly-in-us-dollars/" rel="noopener" target="_blank"&gt;\n       &lt;div style="border: 1px dashed red; padding: 2rem"&gt;\n        &lt;p&gt;\n         Dollar payments are now available for ALL Nigerians. Our clients earn about $5,000 - $10,000 acquiring premium domains. Read testimonials from others who have benefited. Click here to start\n        &lt;/p&gt;\n       &lt;/div&gt;\n      &lt;/a&gt;\n      &lt;a href="https://app.expertnaire.com/product/6592959075/7169283889/" rel="noopener" target="_blank"&gt;\n       &lt;div style="border: 1px dashed red; padding: 2rem"&gt;\n        &lt;p&gt;\n         Learn How to Relocate to Canada &amp;amp; Become a Permanent Resident With Your Family. No Need for IELTS &amp;amp; Agent Wahala. Click to Learn More\n        &lt;/p&gt;\n       &lt;/div&gt;\n      &lt;/a&gt;\n      &lt;a href="https://app.expertnaire.com/product/6592959075/7669096392/" rel="noopener" target="_blank"&gt;\n       &lt;div style="border: 1px dashed red; padding: 2rem"&gt;\n        &lt;p&gt;\n         I Made N1 Million Naira Monthly Using this WhatsApp Marketing Strategy. Follow My Steps &amp;amp; Make More Sales. Click to Learn More\n        &lt;/p&gt;\n       &lt;/div&gt;\n      &lt;/a&gt;\n      &lt;div class="sharedaddy sd-sharing-enabled"&gt;\n       &lt;div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"&gt;\n        &lt;h3 class="sd-title"&gt;\n         Share this:\n        &lt;/h3&gt;\n        &lt;div class="sd-content"&gt;\n         &lt;ul&gt;\n          &lt;li class="share-twitter"&gt;\n           &lt;a class="share-twitter sd-button share-icon" data-shared="sharing-twitter-1208528" href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/?share=twitter" rel="nofollow noopener noreferrer" target="_blank" title="Click to share on Twitter"&gt;\n            &lt;span&gt;\n             Twitter\n            &lt;/span&gt;\n           &lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li class="share-facebook"&gt;\n           &lt;a class="share-facebook sd-button share-icon" data-shared="sharing-facebook-1208528" href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/?share=facebook" rel="nofollow noopener noreferrer" target="_blank" title="Click to share on Facebook"&gt;\n            &lt;span&gt;\n             Facebook\n            &lt;/span&gt;\n           &lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li class="share-jetpack-whatsapp"&gt;\n           &lt;a class="share-jetpack-whatsapp sd-button share-icon" data-shared="" href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/?share=jetpack-whatsapp" rel="nofollow noopener noreferrer" target="_blank" title="Click to share on WhatsApp"&gt;\n            &lt;span&gt;\n             WhatsApp\n            &lt;/span&gt;\n           &lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li class="share-linkedin"&gt;\n           &lt;a class="share-linkedin sd-button share-icon" data-shared="sharing-linkedin-1208528" href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/?share=linkedin" rel="nofollow noopener noreferrer" target="_blank" title="Click to share on LinkedIn"&gt;\n            &lt;span&gt;\n             LinkedIn\n            &lt;/span&gt;\n           &lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li class="share-pinterest"&gt;\n           &lt;a class="share-pinterest sd-button share-icon" data-shared="sharing-pinterest-1208528" href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/?share=pinterest" rel="nofollow noopener noreferrer" target="_blank" title="Click to share on Pinterest"&gt;\n            &lt;span&gt;\n             Pinterest\n            &lt;/span&gt;\n           &lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li class="share-telegram"&gt;\n           &lt;a class="share-telegram sd-button share-icon" data-shared="" href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/?share=telegram" rel="nofollow noopener noreferrer" target="_blank" title="Click to share on Telegram"&gt;\n            &lt;span&gt;\n             Telegram\n            &lt;/span&gt;\n           &lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li&gt;\n           &lt;a class="sharing-anchor sd-button share-more" href="#"&gt;\n            &lt;span&gt;\n             More\n            &lt;/span&gt;\n           &lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li class="share-end"&gt;\n          &lt;/li&gt;\n         &lt;/ul&gt;\n         &lt;div class="sharing-hidden"&gt;\n          &lt;div class="inner" style="display: none;"&gt;\n           &lt;ul&gt;\n            &lt;li class="share-mastodon"&gt;\n             &lt;a class="share-mastodon sd-button share-icon" data-shared="sharing-mastodon-1208528" href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/?share=mastodon" rel="nofollow noopener noreferrer" target="_blank" title="Click to share on Mastodon"&gt;\n              &lt;span&gt;\n               Mastodon\n              &lt;/span&gt;\n             &lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li class="share-email"&gt;\n             &lt;a class="share-email sd-button share-icon" data-email-share-error-text="If you\'re having problems sharing via email, you might not have email set up for your browser. You may need to create a new email yourself." data-email-share-error-title="Do you have email set up?" data-email-share-nonce="15664b4253" data-email-share-track-url="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/?share=email" data-shared="" href="/cdn-cgi/l/email-protection#447b3731262e21273079617106172c25362120617674142b373061710061767408253730617674172530313620253d617674342b28283761767436252d3721206176742d3737312137617674302c2530617674362135312d36216176742d292921202d253021617674372b2831302d2b2a37617674696176740d0a010762262b203d792c3030343761770561760261760220252d283d30363137306a272b296176022825373069372530313620253d69342b2828376936252d372120692d373731213769302c253069362135312d3621692d292921202d25302169372b2831302d2b2a37692d2a212761760262372c253621792129252d28" rel="nofollow noopener noreferrer" target="_blank" title="Click to email a link to a friend"&gt;\n              &lt;span&gt;\n               Email\n              &lt;/span&gt;\n             &lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li class="share-reddit"&gt;\n             &lt;a class="share-reddit sd-button share-icon" data-shared="" href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/?share=reddit" rel="nofollow noopener noreferrer" target="_blank" title="Click to share on Reddit"&gt;\n              &lt;span&gt;\n               Reddit\n              &lt;/span&gt;\n             &lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li class="share-pocket"&gt;\n             &lt;a class="share-pocket sd-button share-icon" data-shared="" href="https://dailytrust.com/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec/?share=pocket" rel="nofollow noopener noreferrer" target="_blank" title="Click to share on Pocket"&gt;\n              &lt;span&gt;\n               Pocket\n              &lt;/span&gt;\n             &lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li class="share-end"&gt;\n            &lt;/li&gt;\n           &lt;/ul&gt;\n          &lt;/div&gt;\n         &lt;/div&gt;\n        &lt;/div&gt;\n       &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" data-name="like-post-frame-212980935-1208528-64be182e2d24c" data-src="https://widgets.wp.com/likes/#blog_id=212980935&amp;amp;post_id=1208528&amp;amp;origin=dailytrust.com&amp;amp;obj_id=212980935-1208528-64be182e2d24c" data-title="Like or Reblog" id="like-post-wrapper-212980935-1208528-64be182e2d24c"&gt;\n       &lt;h3 class="sd-title"&gt;\n        Like this:\n       &lt;/h3&gt;\n       &lt;div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"&gt;\n        &lt;span class="button"&gt;\n         &lt;span&gt;\n          Like\n         &lt;/span&gt;\n        &lt;/span&gt;\n        &lt;span class="loading"&gt;\n         Loading...\n        &lt;/span&gt;\n       &lt;/div&gt;\n       &lt;span class="sd-text-color"&gt;\n       &lt;/span&gt;\n       &lt;a class="sd-link-color"&gt;\n       &lt;/a&gt;\n      &lt;/div&gt;\n      &lt;div class="jp-relatedposts" id="jp-relatedposts"&gt;\n       &lt;h3 class="jp-relatedposts-headline"&gt;\n        &lt;em&gt;\n         Related\n        &lt;/em&gt;\n       &lt;/h3&gt;\n      &lt;/div&gt;\n     &lt;/article&gt;\n     &lt;div class="article-footer ad-container"&gt;\n      &lt;section class="widget_text widget widget_custom_html" id="custom_html-2"&gt;\n       &lt;div class="textwidget custom-html-widget"&gt;\n        &lt;div class="JC-WIDGET-DMROOT" data-widget-id="c3de7bbf2df2eb66be45312bc808b557"&gt;\n        &lt;/div&gt;\n        &lt;script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"&gt;\n        &lt;/script&gt;\n        &lt;script async="async" src="https://static.jubnaadserve.com/api/widget.js"&gt;\n        &lt;/script&gt;\n       &lt;/div&gt;\n      &lt;/section&gt;\n     &lt;/div&gt;\n     &lt;div class="post-tags"&gt;\n      &lt;ul&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/tag/immediate-solutions/" rel="tag"&gt;\n         immediate solutions\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/tag/inec/" rel="tag"&gt;\n         INEC\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/tag/issues/" rel="tag"&gt;\n         issues\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/tag/polls/" rel="tag"&gt;\n         polls\n        &lt;/a&gt;\n       &lt;/li&gt;\n      &lt;/ul&gt;\n     &lt;/div&gt;\n     &lt;div class="related"&gt;\n      &lt;div class="post-tags"&gt;\n       &lt;div class="section__title"&gt;\n        More Stories\n       &lt;/div&gt;\n       &lt;div&gt;\n        &lt;li class="list_list"&gt;\n         &lt;div class="list_card"&gt;\n          &lt;div class="list_body list_compact"&gt;\n           &lt;div class="list_category"&gt;\n            &lt;span class="list_time"&gt;\n             &lt;svg aria-label="Clock24 icon" height="14" viewbox="0 0 24 24" width="14" xmlns="http://www.w3.org/2000/svg"&gt;\n              &lt;path d="M11.5 2a10.5 10.5 0 1 1 0 21 10.5 10.5 0 0 1 0-21zm0 1a9.5 9.5 0 1 0 0 19 9.5 9.5 0 0 0 0-19zm0 4c.28 0 .5.22.5.5v5.3l5.34-1.77a.5.5 0 1 1 .32.94l-6 2a.5.5 0 0 1-.66-.47v-6c0-.28.22-.5.5-.5z" fillrule="evenodd"&gt;\n              &lt;/path&gt;\n             &lt;/svg&gt;\n             2 days ago\n            &lt;/span&gt;\n           &lt;/div&gt;\n           &lt;a href="/2023-polls-inec-expresses-worry-over-result-management-crisis"&gt;\n            2023 polls: INEC expresses worry over result management crisis\n           &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;a href="/2023-polls-inec-expresses-worry-over-result-management-crisis"&gt;\n           &lt;div class="desktop__image" style="min-width: 80px; height: 80px; background: #ccc; display: block; position:relative"&gt;\n            &lt;img alt="" class="attachment-80x80x10vwximg size-80x80x10vwximg wp-post-image lazy" data-src="https://dailytrust.com/wp-content/uploads/2023/03/INEC-150x150.jpg" decoding="async" height="80" src="data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%2080%2080\'%3E%3C/svg%3E" width="80"/&gt;\n           &lt;/div&gt;\n          &lt;/a&gt;\n         &lt;/div&gt;\n        &lt;/li&gt;\n        &lt;li class="list_list"&gt;\n         &lt;div class="list_card"&gt;\n          &lt;div class="list_body list_compact"&gt;\n           &lt;div class="list_category"&gt;\n            &lt;span class="list_time"&gt;\n             &lt;svg aria-label="Clock24 icon" height="14" viewbox="0 0 24 24" width="14" xmlns="http://www.w3.org/2000/svg"&gt;\n              &lt;path d="M11.5 2a10.5 10.5 0 1 1 0 21 10.5 10.5 0 0 1 0-21zm0 1a9.5 9.5 0 1 0 0 19 9.5 9.5 0 0 0 0-19zm0 4c.28 0 .5.22.5.5v5.3l5.34-1.77a.5.5 0 1 1 .32.94l-6 2a.5.5 0 0 1-.66-.47v-6c0-.28.22-.5.5-.5z" fillrule="evenodd"&gt;\n              &lt;/path&gt;\n             &lt;/svg&gt;\n             3 days ago\n            &lt;/span&gt;\n           &lt;/div&gt;\n           &lt;a href="/kano-govship-tribunal-inec-closes-case-presents-no-witness"&gt;\n            Kano gov’ship tribunal: INEC closes case, presents no witness\n           &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;a href="/kano-govship-tribunal-inec-closes-case-presents-no-witness"&gt;\n           &lt;div class="desktop__image" style="min-width: 80px; height: 80px; background: #ccc; display: block; position:relative"&gt;\n            &lt;img alt="" class="attachment-80x80x10vwximg size-80x80x10vwximg wp-post-image lazy" data-src="https://dailytrust.com/wp-content/uploads/2023/02/INEC-150x150.webp" decoding="async" height="80" src="data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%2080%2080\'%3E%3C/svg%3E" width="80"/&gt;\n           &lt;/div&gt;\n          &lt;/a&gt;\n         &lt;/div&gt;\n        &lt;/li&gt;\n        &lt;li class="list_list"&gt;\n         &lt;div class="list_card"&gt;\n          &lt;div class="list_body list_compact"&gt;\n           &lt;div class="list_category"&gt;\n            &lt;span class="list_time"&gt;\n             &lt;svg aria-label="Clock24 icon" height="14" viewbox="0 0 24 24" width="14" xmlns="http://www.w3.org/2000/svg"&gt;\n              &lt;path d="M11.5 2a10.5 10.5 0 1 1 0 21 10.5 10.5 0 0 1 0-21zm0 1a9.5 9.5 0 1 0 0 19 9.5 9.5 0 0 0 0-19zm0 4c.28 0 .5.22.5.5v5.3l5.34-1.77a.5.5 0 1 1 .32.94l-6 2a.5.5 0 0 1-.66-.47v-6c0-.28.22-.5.5-.5z" fillrule="evenodd"&gt;\n              &lt;/path&gt;\n             &lt;/svg&gt;\n             4 days ago\n            &lt;/span&gt;\n           &lt;/div&gt;\n           &lt;a href="/just-in-inec-registers-new-party"&gt;\n            INEC registers new party\n           &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;a href="/just-in-inec-registers-new-party"&gt;\n           &lt;div class="desktop__image" style="min-width: 80px; height: 80px; background: #ccc; display: block; position:relative"&gt;\n            &lt;img alt="" class="attachment-80x80x10vwximg size-80x80x10vwximg wp-post-image lazy" data-src="https://dailytrust.com/wp-content/uploads/2023/03/INEC-150x150.jpg" decoding="async" height="80" src="data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%2080%2080\'%3E%3C/svg%3E" width="80"/&gt;\n           &lt;/div&gt;\n          &lt;/a&gt;\n         &lt;/div&gt;\n        &lt;/li&gt;\n        &lt;li class="list_list"&gt;\n         &lt;div class="list_card"&gt;\n          &lt;div class="list_body list_compact"&gt;\n           &lt;div class="list_category"&gt;\n            &lt;span class="list_time"&gt;\n             &lt;svg aria-label="Clock24 icon" height="14" viewbox="0 0 24 24" width="14" xmlns="http://www.w3.org/2000/svg"&gt;\n              &lt;path d="M11.5 2a10.5 10.5 0 1 1 0 21 10.5 10.5 0 0 1 0-21zm0 1a9.5 9.5 0 1 0 0 19 9.5 9.5 0 0 0 0-19zm0 4c.28 0 .5.22.5.5v5.3l5.34-1.77a.5.5 0 1 1 .32.94l-6 2a.5.5 0 0 1-.66-.47v-6c0-.28.22-.5.5-.5z" fillrule="evenodd"&gt;\n              &lt;/path&gt;\n             &lt;/svg&gt;\n             5 days ago\n            &lt;/span&gt;\n           &lt;/div&gt;\n           &lt;a href="/photos-inec-continues-review-of-2023-elections"&gt;\n            PHOTOS: INEC continues review of 2023 elections\n           &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;a href="/photos-inec-continues-review-of-2023-elections"&gt;\n           &lt;div class="desktop__image" style="min-width: 80px; height: 80px; background: #ccc; display: block; position:relative"&gt;\n            &lt;img alt="" class="attachment-80x80x10vwximg size-80x80x10vwximg wp-post-image lazy" data-src="https://dailytrust.com/wp-content/uploads/2023/07/IMG-20230719-WA0007-150x150.jpg" decoding="async" height="80" src="data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%2080%2080\'%3E%3C/svg%3E" width="80"/&gt;\n           &lt;/div&gt;\n          &lt;/a&gt;\n         &lt;/div&gt;\n        &lt;/li&gt;\n       &lt;/div&gt;\n      &lt;/div&gt;\n     &lt;/div&gt;\n     &lt;div id="disqus_thread"&gt;\n     &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;aside class="widget-area post-right" id="primary"&gt;\n     &lt;section class="widget_text widget widget_custom_html" id="custom_html-6"&gt;\n      &lt;div class="textwidget custom-html-widget"&gt;\n       &lt;div id="div-gpt-ad-1685451176264-0" style="min-width: 300px; min-height: 250px;"&gt;\n        &lt;script&gt;\n         googletag.cmd.push(function(){googletag.display(\'div-gpt-ad-1685451176264-0\');});\n        &lt;/script&gt;\n       &lt;/div&gt;\n      &lt;/div&gt;\n     &lt;/section&gt;\n     &lt;section class="widget widget_block" id="block-3"&gt;\n      &lt;script async="" src="https://securepubads.g.doubleclick.net/tag/js/gpt.js"&gt;\n      &lt;/script&gt;\n      &lt;script&gt;\n       window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_article_right_sidebar_bottom\',[\'fluid\',[250,250],[300,250]],\'div-gpt-ad-1687524185525-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});\n      &lt;/script&gt;\n      &lt;div id="div-gpt-ad-1687524185525-0" style="min-width: 250px; min-height: 250px;"&gt;\n       &lt;script&gt;\n        googletag.cmd.push(function(){googletag.display(\'div-gpt-ad-1687524185525-0\');});\n       &lt;/script&gt;\n      &lt;/div&gt;\n     &lt;/section&gt;\n     &lt;section class="widget widget_block" id="block-4"&gt;\n      &lt;script async="" src="https://securepubads.g.doubleclick.net/tag/js/gpt.js"&gt;\n      &lt;/script&gt;\n      &lt;script&gt;\n       window.googletag=window.googletag||{cmd:[]};googletag.cmd.push(function(){googletag.defineSlot(\'/113471580/dailytrust.com_300_600_article_right\',[[300,600],\'fluid\'],\'div-gpt-ad-1689177188515-0\').addService(googletag.pubads());googletag.pubads().enableSingleRequest();googletag.enableServices();});\n      &lt;/script&gt;\n      &lt;div id="div-gpt-ad-1689177188515-0" style="min-width: 300px; min-height: 600px;"&gt;\n       &lt;script&gt;\n        googletag.cmd.push(function(){googletag.display(\'div-gpt-ad-1689177188515-0\');});\n       &lt;/script&gt;\n      &lt;/div&gt;\n     &lt;/section&gt;\n     &lt;section class="widget_text widget widget_custom_html" id="custom_html-4"&gt;\n      &lt;div class="textwidget custom-html-widget"&gt;\n       &lt;div id="div-gpt-ad-1685451004084-0" style="min-width: 300px; min-height: 600px;"&gt;\n        &lt;script&gt;\n         googletag.cmd.push(function(){googletag.display(\'div-gpt-ad-1685451004084-0\');});\n        &lt;/script&gt;\n       &lt;/div&gt;\n      &lt;/div&gt;\n     &lt;/section&gt;\n     &lt;section class="widget widget_twitter_timeline" id="twitter_timeline-2"&gt;\n      &lt;h2 class="widget-title"&gt;\n       Follow us on Twitter\n      &lt;/h2&gt;\n      &lt;a class="twitter-timeline" data-border-color="#f0f0f1" data-chrome="noscrollbar" data-lang="EN" data-partner="jetpack" data-theme="light" data-tweet-limit="3" data-width="300" href="https://twitter.com/@daily_trust"&gt;\n       My Tweets\n      &lt;/a&gt;\n     &lt;/section&gt;\n    &lt;/aside&gt;\n   &lt;/main&gt;\n   &lt;footer class="footer"&gt;\n    &lt;div class="footer__top footer__wrapper container"&gt;\n     &lt;div class="footer__social"&gt;\n      &lt;h4 class="f_title"&gt;\n       Follow\n       &lt;span&gt;\n        Dailytrust\n       &lt;/span&gt;\n      &lt;/h4&gt;\n      &lt;div class="f_menu"&gt;\n      &lt;/div&gt;\n     &lt;/div&gt;\n     &lt;div class="footer__menu"&gt;\n      &lt;ul class="f_menu"&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com" target="_home"&gt;\n         Home\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/about-us" target="_about_us"&gt;\n         About Us\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/contact-us" target="_contact"&gt;\n         Contact Us\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://career.dailytrust.com" target="_career"&gt;\n         Careers\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://membership.dailytrust.com" target="_membership"&gt;\n         Trust +\n        &lt;/a&gt;\n       &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;ul class="f_menu"&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/advertise" target="_advert"&gt;\n         Advertise With Us\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/privacy-policy" target="_advert"&gt;\n         Privacy Policy\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/terms-of-use" target="_advert"&gt;\n         Terms of Use\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://businessdirectory.dailytrust.com" target="_businessdirectory"&gt;\n         Business Directory\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/change-of-name/" target="_changeofname"&gt;\n         Change Of Name\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/loss-of-document/" target="_changeofname"&gt;\n         Lost Of Document\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="https://dailytrust.com/registration-of-trustees/" target="_registrationoftrustees"&gt;\n         Registration Of Trustee\n        &lt;/a&gt;\n       &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;ul class="menu__addr f_menu"&gt;\n       &lt;li&gt;\n        &lt;a href="https://goo.gl/maps/28L1JUVF4setF9mi9" rel="noopener noreferrer" target="_blank"&gt;\n         20 P.O.W Mafemi Crescent, Utako District, Abuja\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="tel:+2347001777577" rel="noopener" target="_blank"&gt;\n         700-177-7577\n        &lt;/a&gt;\n       &lt;/li&gt;\n       &lt;li&gt;\n        &lt;a href="/cdn-cgi/l/email-protection#7d14131b123d191c141104090f080e09531e1210" rel="noopener" target="_blank"&gt;\n         &lt;span class="__cf_email__" data-cfemail="ee87808881ae8a8f8782979a9c"&gt;\n          [email\xa0protected]\n         &lt;/span&gt;\n         ust.com\n        &lt;/a&gt;\n       &lt;/li&gt;\n      &lt;/ul&gt;\n     &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;section class="footer__bottom"&gt;\n     &lt;div class="footer__wrapper container" style="justify-content: space-between;"&gt;\n      &lt;div style="opacity: 0.6;"&gt;\n       1998 - 2021 Media Trust Limited. All rights reserved.\n      &lt;/div&gt;\n     &lt;/div&gt;\n    &lt;/section&gt;\n   &lt;/footer&gt;\n  &lt;/main&gt;\n  &lt;script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"&gt;\n  &lt;/script&gt;\n  &lt;script async="" src="//lib.wtg-ads.com/publisher/dailytrust.com/bf209a17d532927284fd.js"&gt;\n  &lt;/script&gt;\n  &lt;script&gt;\n   window.WPCOM_sharing_counts={"https:\\/\\/dailytrust.com\\/last-saturday-polls-raised-issues-that-require-immediate-solutions-inec\\/":1208528};\n  &lt;/script&gt;\n  &lt;script src="https://dailytrust.com/wp-content/cache/minify/1c044.js"&gt;\n  &lt;/script&gt;\n  &lt;script defer="" id="jetpack-stats-js" src="https://stats.wp.com/e-202330.js"&gt;\n  &lt;/script&gt;\n  &lt;script id="jetpack-stats-js-after"&gt;\n   _stq=window._stq||[];_stq.push(["view",{v:\'ext\',blog:\'212980935\',post:\'1208528\',tz:\'1\',srv:\'dailytrust.com\',j:\'1:12.3\'}]);_stq.push(["clickTrackerInit","212980935","1208528"]);\n  &lt;/script&gt;\n  &lt;script src="https://dailytrust.com/wp-content/cache/minify/4347a.js"&gt;\n  &lt;/script&gt;\n  &lt;script id="sharing-js-js-extra"&gt;\n   var sharing_js_options={"lang":"en","counts":"1","is_stats_active":"1"};\n  &lt;/script&gt;\n  &lt;script src="https://dailytrust.com/wp-content/cache/minify/d6089.js"&gt;\n  &lt;/script&gt;\n  &lt;script id="sharing-js-js-after"&gt;\n   var windowOpen;(function(){function matches(el,sel){return!!(el.matches&amp;&amp;el.matches(sel)||el.msMatchesSelector&amp;&amp;el.msMatchesSelector(sel));}\ndocument.body.addEventListener(\'click\',function(event){if(!event.target){return;}\nvar el;if(matches(event.target,\'a.share-twitter\')){el=event.target;}else if(event.target.parentNode&amp;&amp;matches(event.target.parentNode,\'a.share-twitter\')){el=event.target.parentNode;}\nif(el){event.preventDefault();if(typeof windowOpen!==\'undefined\'){windowOpen.close();}\nwindowOpen=window.open(el.getAttribute(\'href\'),\'wpcomtwitter\',\'menubar=1,resizable=1,width=600,height=350\');return false;}});})();var windowOpen;(function(){function matches(el,sel){return!!(el.matches&amp;&amp;el.matches(sel)||el.msMatchesSelector&amp;&amp;el.msMatchesSelector(sel));}\ndocument.body.addEventListener(\'click\',function(event){if(!event.target){return;}\nvar el;if(matches(event.target,\'a.share-facebook\')){el=event.target;}else if(event.target.parentNode&amp;&amp;matches(event.target.parentNode,\'a.share-facebook\')){el=event.target.parentNode;}\nif(el){event.preventDefault();if(typeof windowOpen!==\'undefined\'){windowOpen.close();}\nwindowOpen=window.open(el.getAttribute(\'href\'),\'wpcomfacebook\',\'menubar=1,resizable=1,width=600,height=400\');return false;}});})();var windowOpen;(function(){function matches(el,sel){return!!(el.matches&amp;&amp;el.matches(sel)||el.msMatchesSelector&amp;&amp;el.msMatchesSelector(sel));}\ndocument.body.addEventListener(\'click\',function(event){if(!event.target){return;}\nvar el;if(matches(event.target,\'a.share-linkedin\')){el=event.target;}else if(event.target.parentNode&amp;&amp;matches(event.target.parentNode,\'a.share-linkedin\')){el=event.target.parentNode;}\nif(el){event.preventDefault();if(typeof windowOpen!==\'undefined\'){windowOpen.close();}\nwindowOpen=window.open(el.getAttribute(\'href\'),\'wpcomlinkedin\',\'menubar=1,resizable=1,width=580,height=450\');return false;}});})();var windowOpen;(function(){function matches(el,sel){return!!(el.matches&amp;&amp;el.matches(sel)||el.msMatchesSelector&amp;&amp;el.msMatchesSelector(sel));}\ndocument.body.addEventListener(\'click\',function(event){if(!event.target){return;}\nvar el;if(matches(event.target,\'a.share-telegram\')){el=event.target;}else if(event.target.parentNode&amp;&amp;matches(event.target.parentNode,\'a.share-telegram\')){el=event.target.parentNode;}\nif(el){event.preventDefault();if(typeof windowOpen!==\'undefined\'){windowOpen.close();}\nwindowOpen=window.open(el.getAttribute(\'href\'),\'wpcomtelegram\',\'menubar=1,resizable=1,width=450,height=450\');return false;}});})();var windowOpen;(function(){function matches(el,sel){return!!(el.matches&amp;&amp;el.matches(sel)||el.msMatchesSelector&amp;&amp;el.msMatchesSelector(sel));}\ndocument.body.addEventListener(\'click\',function(event){if(!event.target){return;}\nvar el;if(matches(event.target,\'a.share-mastodon\')){el=event.target;}else if(event.target.parentNode&amp;&amp;matches(event.target.parentNode,\'a.share-mastodon\')){el=event.target.parentNode;}\nif(el){event.preventDefault();if(typeof windowOpen!==\'undefined\'){windowOpen.close();}\nwindowOpen=window.open(el.getAttribute(\'href\'),\'wpcommastodon\',\'menubar=1,resizable=1,width=460,height=400\');return false;}});})();var windowOpen;(function(){function matches(el,sel){return!!(el.matches&amp;&amp;el.matches(sel)||el.msMatchesSelector&amp;&amp;el.msMatchesSelector(sel));}\ndocument.body.addEventListener(\'click\',function(event){if(!event.target){return;}\nvar el;if(matches(event.target,\'a.share-pocket\')){el=event.target;}else if(event.target.parentNode&amp;&amp;matches(event.target.parentNode,\'a.share-pocket\')){el=event.target.parentNode;}\nif(el){event.preventDefault();if(typeof windowOpen!==\'undefined\'){windowOpen.close();}\nwindowOpen=window.open(el.getAttribute(\'href\'),\'wpcompocket\',\'menubar=1,resizable=1,width=450,height=450\');return false;}});})();\n  &lt;/script&gt;\n  &lt;iframe id="likes-master" name="likes-master" scrolling="no" src="https://widgets.wp.com/likes/master.html?ver=202330#ver=202330" style="display:none;"&gt;\n  &lt;/iframe&gt;\n  &lt;div id="likes-other-gravatars"&gt;\n   &lt;div class="likes-text"&gt;\n    &lt;span&gt;\n     %d\n    &lt;/span&gt;\n    bloggers like this:\n   &lt;/div&gt;\n   &lt;ul class="wpl-avatars sd-like-gravatars"&gt;\n   &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;script&gt;\n   function openNav(){const wid=document.getElementById("mySidenav").style.width;if(wid==\'220px\'){document.getElementById("mySidenav").style.width="0px";document.getElementById("main").style.marginRight="0px";}else{document.getElementById("mySidenav").style.width="220px";document.getElementById("main").style.marginRight="220px";}}\nfunction closeNav(){const wid=document.getElementById("mySidenav").style.width;document.getElementById("mySidenav").style.width="0px";document.getElementById("main").style.marginRight="0px";}\n  &lt;/script&gt;\n  &lt;script&gt;\n   window.w3tc_lazyload=1,window.lazyLoadOptions={elements_selector:".lazy",callback_loaded:function(t){var e;try{e=new CustomEvent("w3tc_lazyload_loaded",{detail:{e:t}})}catch(a){(e=document.createEvent("CustomEvent")).initCustomEvent("w3tc_lazyload_loaded",!1,!1,{e:t})}window.dispatchEvent(e)}}\n  &lt;/script&gt;\n  &lt;script async="" src="https://dailytrust.com/wp-content/cache/minify/1615d.js"&gt;\n  &lt;/script&gt;\n  &lt;script crossorigin="anonymous" data-cf-beacon=\'{"rayId":"7eba0ec02b66b88e","version":"2023.4.0","b":1,"token":"61e9828cd12c41eebd5ea34170988570","si":100}\' defer="" integrity="sha512-DI3rPuZDcpH/mSGyN22erN5QFnhl760f50/te7FTIYxodEF8jJnSFnfnmG/c+osmIQemvUrnBtxnMpNdzvx1/g==" src="https://static.cloudflareinsights.com/beacon.min.js/v2cb3a2ab87c5498db5ce7e6608cf55231689030342039"&gt;\n  &lt;/script&gt;\n &lt;/body&gt;\n&lt;/html&gt;'</code></pre>
</div>
</div>
<p>The url of the page is first declared, then the response object is created using the get method of requests. Afterwards, the content attribute of the response object is passed to BeautifulSoup to create a soup object that we can use to navigate through the content of the web page. The prettify method is used to show the basic structure of the web page as this can help in pinpointing the exact content needed, in our case, the paragraphs.&nbsp;</p>
<p>To keep things simple for now, this is the approach I followed:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">paragraphs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>)</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(soup.title)</span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> paragraph <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> paragraphs:</span>
<span id="cb4-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> paragraph.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>):</span>
<span id="cb4-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(paragraph.get_text())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;title&gt;Last Saturday polls raised issues that require immediate solutions – INEC - Daily Trust&lt;/title&gt;
The Independent National Electoral Commission (INEC) has admitted that the last Saturday presidential and National Assembly elections raises a number of issues that require immediate,…
The Independent National Electoral Commission (INEC) has admitted that the last Saturday presidential and National Assembly elections raises a number of issues that require immediate, medium and long-term solutions.
INEC Chairman, Prof. Mahmood Yakubu, said this on Saturday in Abuja at a meeting with the Resident Electoral commissioners (RECs) held at the INEC headquarters, Abuja.
He said, “It is imperative to review performance and assess preparations. No doubt, last week’s national elections raised a number of issues that require immediate, medium, and long-term solutions.
“The planning for the election was painstakingly done. However, its implementation came with challenges, some of them unforeseen. The issues of logistics, election technology, behaviour of some election personnel at different levels, attitude of some party agents and supporters added to the extremely challenging environment in which elections are usually held in Nigeria.”
The INEC boss said he appreciated the sacrifice and doggedness of Nigerians and the dignity and maturity displayed by political leaders even in the context of divergent views about the election.
Yakubu said that a lot of lessons had been learnt and of immediate concern to the commission is how the identified challenges can be addressed ahead of the next Saturday’s governorship and state houses of aassembly elections in 28 states.
The chairman also said that for the last Saturday’s elections, winners had been declared for 423 national legislative seats while supplementary elections would be held in 46 constituencies.
According to him, in the Senate, 98 out of 109 seats had been declared, with seven political parties winning senatorial seats while in the House of Representatives, 325 out of 360 seats had been won by eight political parties.
He noted that in terms of party representation, this is the most diverse National Assembly since 1999.
He said that in the Senate APC has&nbsp; 57 seats, APGA 1, LP 6, NNPP 2, PDP 29, SDP 2, YPP 1; while in the House of Representatives, ADC 2, APC 162, APGA 4, LP 34, NNPP 18, PDP 102, SDP 2, YPP 1.
He said, “Certificates of Return will be presented to Senators-elect on Tuesday 7th March 2023 at 11.00am at the National Collation Centre (the International Conference Centre), Abuja, while Members of the House of Representatives-elect will receive theirs the following day, Wednesday 8th March 2023, at 11.00am at the same venue.
“However, for effective crowd management, each Senator/Member-elect should be accompanied by a maximum of two guests.”
Dollar payments are now available for ALL Nigerians. Our clients earn about $5,000 - $10,000 acquiring premium domains. Read testimonials from others who have benefited. Click here to start
Learn How to Relocate to Canada &amp; Become a Permanent Resident With Your Family. No Need for IELTS &amp; Agent Wahala. Click to Learn More
I Made N1 Million Naira Monthly Using this WhatsApp Marketing Strategy. Follow My Steps &amp; Make More Sales. Click to Learn More</code></pre>
</div>
</div>
<p>First, the find_all() method is used to get all the p tags as a list and this is assigned to the paragraphs variable. Then for the main target of this article, I print the title attribute of the soup object and then loop through each item in the paragraphs variable and print, this gives the entire content of the article. I discovered that the hyperlinked titles of related articles where included and I removed them by excluding all p tags that contained a tags.&nbsp;</p>
<p>In conclusion, web scraping is highly useful to a data scientist as it automates getting content from the internet. One does not have to cut and paste long pieces of text or other contents.</p>



 ]]></description>
  <category>python</category>
  <category>requests</category>
  <category>web scraping</category>
  <guid>https://lukmanaj.github.io/ailearningloop/posts/web-scraping/index.html</guid>
  <pubDate>Fri, 03 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://lukmanaj.github.io/ailearningloop/posts/web-scraping/requests.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
