{
  "hash": "3ebee48ebd7304fc4facbba3b05e4cb6",
  "result": {
    "markdown": "---\ntitle: \"Matrix Multiplication in Python and R\"\nauthor: \"Lukman Aliyu Jibril\"\ndate: \"2023-08-15\"\ncategories: [python,r,matrices,mathematics]\ndraft: True\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nrmatmul <- function(a,b){\n    rows_mat1 <- nrow(a)\n    cols_mat1 <- ncol(a)\n    cols_mat2 <- ncol(b)\n    # initialize result matrix\n    c <- matrix(0,nrow=rows_mat1,ncol = cols_mat2)\n    # perform the matrix multiplication using nested loops\n    for (i in 1:rows_mat1){\n        for (j in 1:cols_mat2){\n            for (k in 1:cols_mat1){\n                c[i,j] <- c[i,j] + a[i,k] * b[k,j]\n            }\n        }\n    }\n c\n}\n```\n:::\n\n\nWe can now test out our new matmul function by multiplying a simple matrix with itself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(seq(1:4),nrow=2)\nb <- rmatmul(a,a)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    7   15\n[2,]   10   22\n```\n:::\n:::\n\n\nNow we perform R regular matrix multiplication to test out the function\n\n\n::: {.cell}\n\n```{.r .cell-code}\na %*% a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    7   15\n[2,]   10   22\n```\n:::\n:::\n\n\nAnd the results are the same\n\n\nNow we move to Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\ndef npmatmul(a,b):\n    # Get the dimensions of the matrices\n    rows1, cols1 = a.shape\n    rows2,cols2 = b.shape\n    # Check if matrix multiplication is possible\n    if cols1 != rows2:\n        print(\"Matrix multiplication is not possible\")\n    else: \n\n    # define a matrix for the multiplication product\n        c = np.zeros((rows1,cols2))\n\n        for i in range(rows1):\n            for j in range(cols2):\n                for k in range(cols1):\n                    c[i,j] += a[i,k] * b[k,j]\n        \n    \n    return c\n```\n:::\n\n\nNow it's time to test out the numpy matmul function alongside the regular numpy matrix multiplication function, `np.matmul()`:\n\n::: {.cell}\n\n```{.python .cell-code}\n#  New matrix\na = np.array([[1,2],[3,4]])\nc = npmatmul(a,a)\nprint(\"\\n\", c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n [[ 7. 10.]\n [15. 22.]]\n```\n:::\n\n```{.python .cell-code}\nnp.matmul(a,a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[ 7, 10],\n       [15, 22]])\n```\n:::\n:::\n\n            \n\nWork in progress. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}