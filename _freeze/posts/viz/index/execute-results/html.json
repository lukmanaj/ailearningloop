{
  "hash": "9c87edee1b708b6af2cff3f44d52612c",
  "result": {
    "markdown": "---\ntitle: \"Creating Beautiful Visualizations with Python: A Guide to Pandas Matplotlib and Seaborn\"\nauthor: \"Lukman Aliyu Jibril\"\ndate: \"2023-03-14\"\ncategories: [python,pandas,matplotlib,seaborn]\nimage: \"pythondataviz.jpg\"\n---\n\nData visualization is a crucial aspect of data analysis as it helps in understanding data better. Python provides several libraries for data visualization, and in this article, we will explore three of the most commonly used libraries for data visualization in Python: pandas, matplotlib, and seaborn.\n\nPandas is a powerful library for data manipulation and analysis. It provides data structures for efficiently storing and manipulating large datasets. One of the primary data structures provided by pandas is the DataFrame, which is a two-dimensional table-like structure with labeled axes. The pandas library also provides a number of methods for data manipulation and cleaning, such as data cleaning, data merging, and data transformation.\n\nMatplotlib is a plotting library for Python that provides a range of 2D plotting capabilities. It provides a high level of customization, making it possible to create complex visualizations with ease. Matplotlib also provides support for a wide range of output formats, including PDF, PNG, and SVG.\n\nSeaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for creating attractive and informative statistical graphics. Seaborn makes it easy to create complex visualizations by providing a range of built-in styles and color palettes.\n\nLet's start by exploring the pandas library.\n\n### Data visualization with pandas\n\nPandas provides a number of methods for data visualization. One of the most commonly used methods is the plot method, which can be used to create a wide range of visualizations, including line plots, scatter plots, bar plots, and histograms.\n\nTo demonstrate the use of pandas for data visualization, let's start by loading a sample dataset. We will use the famous Iris dataset, which contains information about the lengths and widths of petals and sepals for three different species of Iris flowers. I first came across this dataset when I first started learning R's tidyverse.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the iris dataset\niris = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv')\n```\n:::\n\n\nWe can use the plot method to create a scatter plot of the petal length and width for the Iris dataset:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\niris.plot(kind='scatter', x='petal_length', y='petal_width')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=589 height=429}\n:::\n:::\n\n\nAs can be seen from the above, pandas makes it easy to create a scatter plot with just a single line of code. We can also customize the plot by adding labels and a title:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\niris.plot(kind='scatter', x='petal_length', y='petal_width')\nplt.xlabel('Petal Length')\nplt.ylabel('Petal Width')\nplt.title('Iris Petal Length vs. Width')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=589 height=449}\n:::\n:::\n\n\nIn addition to scatter plots, pandas can also be used to create line plots, bar plots, and histograms. Let's create a bar plot of the mean petal length for each of the three species of Iris:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\niris.groupby('species')['petal_length'].mean().plot(kind='bar')\nplt.ylabel('Petal Length')\nplt.title('Mean Petal Length for Each Species of Iris')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=576 height=502}\n:::\n:::\n\n\n### Data visualization with matplotlib\n\nWhile pandas provides a number of convenient methods for data visualization, matplotlib provides a more low-level interface for creating visualizations. This makes it possible to create highly customized visualizations, but it requires a bit more effort. Let's see how we can use matplotlib to create a scatter plot of the petal length and width for the Iris dataset.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n# Create a scatter plot of petal length vs. petal width\nplt.scatter(iris['petal_length'], iris['petal_width'])\n# Add labels and a title\nplt.xlabel('Petal Length')\nplt.ylabel('Petal Width')\nplt.title('Iris Petal Length vs. Width')\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=589 height=449}\n:::\n:::\n\n\nFrom the above, it can be seen that creating a scatter plot with matplotlib requires a bit more code than with pandas, but it provides a high level of customization. We can also create a line plot of the mean petal length for each of the three species of Iris:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np\n# Get the mean petal length for each species\nsetosa_mean = iris[iris['species'] == 'setosa']['petal_length'].mean()\nversicolor_mean = iris[iris['species'] == 'versicolor']['petal_length'].mean()\nvirginica_mean = iris[iris['species'] == 'virginica']['petal_length'].mean()\n# Create a bar chart of the mean petal length\nplt.bar(['setosa', 'versicolor', 'virginica'], [setosa_mean, versicolor_mean, virginica_mean])\n# Add a horizontal line at the overall mean petal length\nplt.axhline(y=iris['petal_length'].mean(), color='gray', linestyle='--')\n# Add labels and a title\nplt.xlabel('Species')\nplt.ylabel('Mean Petal Length')\nplt.title('Mean Petal Length for Each Species of Iris')\n# Show the plot\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=576 height=449}\n:::\n:::\n\n\nFrom the above plot, matplotlib provides a lot of flexibility for creating customized visualizations.\n\n### Data visualization with seaborn\n\nSeaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for creating attractive and informative statistical graphics. Seaborn makes it easy to create complex visualizations by providing a range of built-in styles and color palettes.\n\nTo create a scatter plot of the petal length and width for the Iris dataset with seaborn, we can use the scatterplot function:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport seaborn as sns\n# Create a scatter plot of petal length vs. petal width\nsns.scatterplot(data=iris, x='petal_length', y='petal_width')\n# Add labels and a title\nplt.xlabel('Petal Length')\nplt.ylabel('Petal Width')\nplt.title('Iris Petal Length vs. Width')\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=589 height=449}\n:::\n:::\n\n\nFrom the above plot, seaborn provides a clean and attractive visualization with just a single line of code. \n\nWe can also create a line plot of the mean petal length for each of the three species of Iris with the lineplot function:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Create a line plot of the mean petal length for each species\nsns.lineplot(data=iris, x='species', y='petal_length', estimator=np.mean)\n# Add labels and a title\nplt.xlabel('Species')\nplt.ylabel('Mean Petal Length')\nplt.title('Mean Petal Length for Each Species of Iris')\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=581 height=449}\n:::\n:::\n\n\nFrom the above plot, provides a more polished and informative visualization than matplotlib with very little code.\n\nSeaborn also provides many other types of visualizations, including heatmaps, histograms, and violin plots, that can be used to explore relationships in your data.\n\n#### Conclusion\n\nIn this article, we have seen how to use Python libraries such as pandas, matplotlib, and seaborn for data visualization. Data visualization is an essential part of the data analysis process because it allows us to explore and understand our data more effectively.\n\nPandas provides a convenient interface for creating basic visualizations such as scatter plots and bar charts. Matplotlib provides a high level of customization and control over the appearance of your visualizations, but requires more code to create them. Seaborn provides a high-level interface for creating attractive and informative statistical graphics with minimal code.\n\nAs with any tool, it is important to choose the right visualization library for your specific needs. If you need to create simple visualizations quickly and easily, pandas may be the best choice. If you need a high level of control over the appearance of your visualizations, matplotlib may be the better option. If you want to create complex statistical graphics quickly and easily, seaborn may be the way to go. Seaborn is my current favourite. \nIn any case, with the power of Python and these visualization libraries, you can create informative and attractive visualizations that help you better understand your data.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}