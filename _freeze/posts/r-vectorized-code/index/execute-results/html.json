{
  "hash": "5444d1b20fc967036c254619c5ec762f",
  "result": {
    "markdown": "---\ntitle: \"The Case for Writing Vectorised Code in R\"\nauthor: \"Lukman Aliyu Jibril\"\ndate: \"2023-07-29\"\ncategories: [r programming, vectorization]\n---\n\n\n## Writing Vectorized Code\nThe first thing is to define vectorized code. According to Garrett Grolemund in his book \"Hands-On Programming with R\", vectorised code has the following qualities:\n\n- Logical tests\n- Subsetting\n- Element-wise execution\n\nAs an illustration, let's look at two functions that do the same thing. One is vectorized and other is not. We will then compare the time it takes for both functions to be executed to determine which technique is more efficient. \n\n###  Not vectorized\n\n\n::: {.cell}\n\n```{.r .cell-code}\nabs_loop <- function(vec){\n  for (i in 1:length(vec)) {\n    if (vec[i] < 0) {\n      vec[i] <- -vec[i]\n    }\n  }\n  vec\n}\n```\n:::\n\n\n\n###  Vectorized implementation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nabs_sets <- function(vec){\n  negs <- vec < 0\n  vec[negs] <- vec[negs] * -1\n  vec\n}\n```\n:::\n\n\nHaving defined the two functions, the next thing is to define the variable that will be passed to the both functions, as shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong <- rep(c(-1, 1), 5000000)\n```\n:::\n\n\n\nFinally, the time it takes for each function to run is calculated and compared\n\n\n# Unvectorized \n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.time(abs_loop(long))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  0.913   0.124   1.047 \n```\n:::\n:::\n\n\n\n# Vectorized\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.time(abs_sets(long))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  0.206   0.140   0.347 \n```\n:::\n:::\n\n\nIt can be seen that the vectorized function (ab_sets()) is about three times faster. The speed advantage increases as the size of the variable (long) increases. \n\nTo be continued. ",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}