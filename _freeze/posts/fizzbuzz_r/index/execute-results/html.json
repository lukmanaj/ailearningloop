{
  "hash": "20ab038617cf172178670e6696b73512",
  "result": {
    "markdown": "---\ntitle: \"Solving the FizzBuzz Problem: Eight Creative Solutions in R Programming\"\nauthor: \"Lukman Aliyu Jibril\"\ndate: \"2023-06-19\"\ncategories: [r programming, fizzbuzz, loops]\n\n---\n\n\n# Introduction\n\nThe FizzBuzz problem is a classic programming exercise that tests a developerâ€™s ability to think logically and solve a simple but often misunderstood challenge. I have written previously about the FizzBuzz challenge here and here. In this article, we will explore ten creative solutions to the FizzBuzz problem using the R programming language. These solutions will demonstrate different approaches, from basic conditional statements to more advanced techniques, showcasing the versatility and power of R.\n\n## Solution 1: Traditional Approach with Conditional Statements:\n\nThis solution follows the traditional FizzBuzz approach, utilizing conditional statements to check divisibility and printing the appropriate output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution 1: Traditional Approach with Conditional Statements\nfor (i in 1:100) {\n  if (i %% 3 == 0 & i %% 5 == 0)\n    print(\"FizzBuzz\")\n  else if (i %% 3 == 0)\n    print(\"Fizz\")\n  else if (i %% 5 == 0)\n    print(\"Buzz\")\n  else\n    print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] \"Fizz\"\n[1] 4\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 7\n[1] 8\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 11\n[1] \"Fizz\"\n[1] 13\n[1] 14\n[1] \"FizzBuzz\"\n[1] 16\n[1] 17\n[1] \"Fizz\"\n[1] 19\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 22\n[1] 23\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 26\n[1] \"Fizz\"\n[1] 28\n[1] 29\n[1] \"FizzBuzz\"\n[1] 31\n[1] 32\n[1] \"Fizz\"\n[1] 34\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 37\n[1] 38\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 41\n[1] \"Fizz\"\n[1] 43\n[1] 44\n[1] \"FizzBuzz\"\n[1] 46\n[1] 47\n[1] \"Fizz\"\n[1] 49\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 52\n[1] 53\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 56\n[1] \"Fizz\"\n[1] 58\n[1] 59\n[1] \"FizzBuzz\"\n[1] 61\n[1] 62\n[1] \"Fizz\"\n[1] 64\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 67\n[1] 68\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 71\n[1] \"Fizz\"\n[1] 73\n[1] 74\n[1] \"FizzBuzz\"\n[1] 76\n[1] 77\n[1] \"Fizz\"\n[1] 79\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 82\n[1] 83\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 86\n[1] \"Fizz\"\n[1] 88\n[1] 89\n[1] \"FizzBuzz\"\n[1] 91\n[1] 92\n[1] \"Fizz\"\n[1] 94\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 97\n[1] 98\n[1] \"Fizz\"\n[1] \"Buzz\"\n```\n:::\n:::\n\n\n## Solution 2: Vectorized Solution using Modulo Operator:\n\nLeveraging the vectorized capabilities of R, this solution employs the modulo operator to check divisibility for multiple inputs simultaneously, resulting in efficient code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution 2: Vectorized Solution using Modulo Operator\nnumbers <- 1:100\nresult <- ifelse(numbers %% 15 == 0, \"FizzBuzz\",\n         ifelse(numbers %% 3 == 0, \"Fizz\",\n           ifelse(numbers %% 5 == 0, \"Buzz\", numbers)))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n  [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n [13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n [19] \"19\"       \"Buzz\"     \"Fizz\"     \"22\"       \"23\"       \"Fizz\"    \n [25] \"Buzz\"     \"26\"       \"Fizz\"     \"28\"       \"29\"       \"FizzBuzz\"\n [31] \"31\"       \"32\"       \"Fizz\"     \"34\"       \"Buzz\"     \"Fizz\"    \n [37] \"37\"       \"38\"       \"Fizz\"     \"Buzz\"     \"41\"       \"Fizz\"    \n [43] \"43\"       \"44\"       \"FizzBuzz\" \"46\"       \"47\"       \"Fizz\"    \n [49] \"49\"       \"Buzz\"     \"Fizz\"     \"52\"       \"53\"       \"Fizz\"    \n [55] \"Buzz\"     \"56\"       \"Fizz\"     \"58\"       \"59\"       \"FizzBuzz\"\n [61] \"61\"       \"62\"       \"Fizz\"     \"64\"       \"Buzz\"     \"Fizz\"    \n [67] \"67\"       \"68\"       \"Fizz\"     \"Buzz\"     \"71\"       \"Fizz\"    \n [73] \"73\"       \"74\"       \"FizzBuzz\" \"76\"       \"77\"       \"Fizz\"    \n [79] \"79\"       \"Buzz\"     \"Fizz\"     \"82\"       \"83\"       \"Fizz\"    \n [85] \"Buzz\"     \"86\"       \"Fizz\"     \"88\"       \"89\"       \"FizzBuzz\"\n [91] \"91\"       \"92\"       \"Fizz\"     \"94\"       \"Buzz\"     \"Fizz\"    \n [97] \"97\"       \"98\"       \"Fizz\"     \"Buzz\"    \n```\n:::\n:::\n\n\n\n## Solution 3: Recursive Function Approach\n\nThis solution showcases the elegance of recursion by defining a recursive function that outputs the FizzBuzz sequence.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution 3: Recursive Function Approach\nfizzbuzz <- function(n) {\n  if (n == 0)\n    return()\n  fizzbuzz(n - 1)\n  if (n %% 3 == 0 & n %% 5 == 0)\n    print(\"FizzBuzz\")\n  else if (n %% 3 == 0)\n    print(\"Fizz\")\n  else if (n %% 5 == 0)\n    print(\"Buzz\")\n  else\n    print(n)\n}\nfizzbuzz(100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] \"Fizz\"\n[1] 4\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 7\n[1] 8\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 11\n[1] \"Fizz\"\n[1] 13\n[1] 14\n[1] \"FizzBuzz\"\n[1] 16\n[1] 17\n[1] \"Fizz\"\n[1] 19\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 22\n[1] 23\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 26\n[1] \"Fizz\"\n[1] 28\n[1] 29\n[1] \"FizzBuzz\"\n[1] 31\n[1] 32\n[1] \"Fizz\"\n[1] 34\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 37\n[1] 38\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 41\n[1] \"Fizz\"\n[1] 43\n[1] 44\n[1] \"FizzBuzz\"\n[1] 46\n[1] 47\n[1] \"Fizz\"\n[1] 49\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 52\n[1] 53\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 56\n[1] \"Fizz\"\n[1] 58\n[1] 59\n[1] \"FizzBuzz\"\n[1] 61\n[1] 62\n[1] \"Fizz\"\n[1] 64\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 67\n[1] 68\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 71\n[1] \"Fizz\"\n[1] 73\n[1] 74\n[1] \"FizzBuzz\"\n[1] 76\n[1] 77\n[1] \"Fizz\"\n[1] 79\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 82\n[1] 83\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 86\n[1] \"Fizz\"\n[1] 88\n[1] 89\n[1] \"FizzBuzz\"\n[1] 91\n[1] 92\n[1] \"Fizz\"\n[1] 94\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 97\n[1] 98\n[1] \"Fizz\"\n[1] \"Buzz\"\n```\n:::\n:::\n\n\n## Solution 4: Ternary Operators for Concise Code:\n\nBy employing the ternary operator, this solution achieves concise code by condensing conditional statements into a single line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution 4: Ternary Operators for Concise Code\nfor (i in 1:100)\n  print(ifelse(i %% 3 == 0 & i %% 5 == 0, \"FizzBuzz\",\n         ifelse(i %% 3 == 0, \"Fizz\",\n           ifelse(i %% 5 == 0, \"Buzz\", i))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] \"Fizz\"\n[1] 4\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 7\n[1] 8\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 11\n[1] \"Fizz\"\n[1] 13\n[1] 14\n[1] \"FizzBuzz\"\n[1] 16\n[1] 17\n[1] \"Fizz\"\n[1] 19\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 22\n[1] 23\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 26\n[1] \"Fizz\"\n[1] 28\n[1] 29\n[1] \"FizzBuzz\"\n[1] 31\n[1] 32\n[1] \"Fizz\"\n[1] 34\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 37\n[1] 38\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 41\n[1] \"Fizz\"\n[1] 43\n[1] 44\n[1] \"FizzBuzz\"\n[1] 46\n[1] 47\n[1] \"Fizz\"\n[1] 49\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 52\n[1] 53\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 56\n[1] \"Fizz\"\n[1] 58\n[1] 59\n[1] \"FizzBuzz\"\n[1] 61\n[1] 62\n[1] \"Fizz\"\n[1] 64\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 67\n[1] 68\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 71\n[1] \"Fizz\"\n[1] 73\n[1] 74\n[1] \"FizzBuzz\"\n[1] 76\n[1] 77\n[1] \"Fizz\"\n[1] 79\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 82\n[1] 83\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 86\n[1] \"Fizz\"\n[1] 88\n[1] 89\n[1] \"FizzBuzz\"\n[1] 91\n[1] 92\n[1] \"Fizz\"\n[1] 94\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 97\n[1] 98\n[1] \"Fizz\"\n[1] \"Buzz\"\n```\n:::\n:::\n\n\n\n## Solution 5: Utilizing the ifelse() Function:\n\nThe ifelse() function in R allows for concise and efficient conditional statements. This solution demonstrates its use to solve the FizzBuzz problem.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution 5: Utilizing the `ifelse()` Function\nfor (i in 1:100) {\n  result <- ifelse(i %% 15 == 0, \"FizzBuzz\",\n              ifelse(i %% 3 == 0, \"Fizz\",\n                ifelse(i %% 5 == 0, \"Buzz\", i)))\n  print(result)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] \"Fizz\"\n[1] 4\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 7\n[1] 8\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 11\n[1] \"Fizz\"\n[1] 13\n[1] 14\n[1] \"FizzBuzz\"\n[1] 16\n[1] 17\n[1] \"Fizz\"\n[1] 19\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 22\n[1] 23\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 26\n[1] \"Fizz\"\n[1] 28\n[1] 29\n[1] \"FizzBuzz\"\n[1] 31\n[1] 32\n[1] \"Fizz\"\n[1] 34\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 37\n[1] 38\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 41\n[1] \"Fizz\"\n[1] 43\n[1] 44\n[1] \"FizzBuzz\"\n[1] 46\n[1] 47\n[1] \"Fizz\"\n[1] 49\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 52\n[1] 53\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 56\n[1] \"Fizz\"\n[1] 58\n[1] 59\n[1] \"FizzBuzz\"\n[1] 61\n[1] 62\n[1] \"Fizz\"\n[1] 64\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 67\n[1] 68\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 71\n[1] \"Fizz\"\n[1] 73\n[1] 74\n[1] \"FizzBuzz\"\n[1] 76\n[1] 77\n[1] \"Fizz\"\n[1] 79\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 82\n[1] 83\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 86\n[1] \"Fizz\"\n[1] 88\n[1] 89\n[1] \"FizzBuzz\"\n[1] 91\n[1] 92\n[1] \"Fizz\"\n[1] 94\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 97\n[1] 98\n[1] \"Fizz\"\n[1] \"Buzz\"\n```\n:::\n:::\n\n\n## Solution 6: Functional Programming Approach with purrr Package\n\nLeveraging the power of functional programming, this solution utilizes the map() function from the purrr package to solve the FizzBuzz problem.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution 6: Functional Programming Approach with `purrr` Package\nlibrary(purrr)\nmap(1:100, function(i) {\n  if (i %% 3 == 0 & i %% 5 == 0)\n    return(\"FizzBuzz\")\n  else if (i %% 3 == 0)\n    return(\"Fizz\")\n  else if (i %% 5 == 0)\n    return(\"Buzz\")\n  else\n    return(i)\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] \"Fizz\"\n\n[[4]]\n[1] 4\n\n[[5]]\n[1] \"Buzz\"\n\n[[6]]\n[1] \"Fizz\"\n\n[[7]]\n[1] 7\n\n[[8]]\n[1] 8\n\n[[9]]\n[1] \"Fizz\"\n\n[[10]]\n[1] \"Buzz\"\n\n[[11]]\n[1] 11\n\n[[12]]\n[1] \"Fizz\"\n\n[[13]]\n[1] 13\n\n[[14]]\n[1] 14\n\n[[15]]\n[1] \"FizzBuzz\"\n\n[[16]]\n[1] 16\n\n[[17]]\n[1] 17\n\n[[18]]\n[1] \"Fizz\"\n\n[[19]]\n[1] 19\n\n[[20]]\n[1] \"Buzz\"\n\n[[21]]\n[1] \"Fizz\"\n\n[[22]]\n[1] 22\n\n[[23]]\n[1] 23\n\n[[24]]\n[1] \"Fizz\"\n\n[[25]]\n[1] \"Buzz\"\n\n[[26]]\n[1] 26\n\n[[27]]\n[1] \"Fizz\"\n\n[[28]]\n[1] 28\n\n[[29]]\n[1] 29\n\n[[30]]\n[1] \"FizzBuzz\"\n\n[[31]]\n[1] 31\n\n[[32]]\n[1] 32\n\n[[33]]\n[1] \"Fizz\"\n\n[[34]]\n[1] 34\n\n[[35]]\n[1] \"Buzz\"\n\n[[36]]\n[1] \"Fizz\"\n\n[[37]]\n[1] 37\n\n[[38]]\n[1] 38\n\n[[39]]\n[1] \"Fizz\"\n\n[[40]]\n[1] \"Buzz\"\n\n[[41]]\n[1] 41\n\n[[42]]\n[1] \"Fizz\"\n\n[[43]]\n[1] 43\n\n[[44]]\n[1] 44\n\n[[45]]\n[1] \"FizzBuzz\"\n\n[[46]]\n[1] 46\n\n[[47]]\n[1] 47\n\n[[48]]\n[1] \"Fizz\"\n\n[[49]]\n[1] 49\n\n[[50]]\n[1] \"Buzz\"\n\n[[51]]\n[1] \"Fizz\"\n\n[[52]]\n[1] 52\n\n[[53]]\n[1] 53\n\n[[54]]\n[1] \"Fizz\"\n\n[[55]]\n[1] \"Buzz\"\n\n[[56]]\n[1] 56\n\n[[57]]\n[1] \"Fizz\"\n\n[[58]]\n[1] 58\n\n[[59]]\n[1] 59\n\n[[60]]\n[1] \"FizzBuzz\"\n\n[[61]]\n[1] 61\n\n[[62]]\n[1] 62\n\n[[63]]\n[1] \"Fizz\"\n\n[[64]]\n[1] 64\n\n[[65]]\n[1] \"Buzz\"\n\n[[66]]\n[1] \"Fizz\"\n\n[[67]]\n[1] 67\n\n[[68]]\n[1] 68\n\n[[69]]\n[1] \"Fizz\"\n\n[[70]]\n[1] \"Buzz\"\n\n[[71]]\n[1] 71\n\n[[72]]\n[1] \"Fizz\"\n\n[[73]]\n[1] 73\n\n[[74]]\n[1] 74\n\n[[75]]\n[1] \"FizzBuzz\"\n\n[[76]]\n[1] 76\n\n[[77]]\n[1] 77\n\n[[78]]\n[1] \"Fizz\"\n\n[[79]]\n[1] 79\n\n[[80]]\n[1] \"Buzz\"\n\n[[81]]\n[1] \"Fizz\"\n\n[[82]]\n[1] 82\n\n[[83]]\n[1] 83\n\n[[84]]\n[1] \"Fizz\"\n\n[[85]]\n[1] \"Buzz\"\n\n[[86]]\n[1] 86\n\n[[87]]\n[1] \"Fizz\"\n\n[[88]]\n[1] 88\n\n[[89]]\n[1] 89\n\n[[90]]\n[1] \"FizzBuzz\"\n\n[[91]]\n[1] 91\n\n[[92]]\n[1] 92\n\n[[93]]\n[1] \"Fizz\"\n\n[[94]]\n[1] 94\n\n[[95]]\n[1] \"Buzz\"\n\n[[96]]\n[1] \"Fizz\"\n\n[[97]]\n[1] 97\n\n[[98]]\n[1] 98\n\n[[99]]\n[1] \"Fizz\"\n\n[[100]]\n[1] \"Buzz\"\n```\n:::\n:::\n\n\n# Solution 7: Creating a Lookup Table\n\nBy creating a lookup table using a data frame or a named vector, this solution simplifies the FizzBuzz logic and enhances code readability.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution 7: Creating a Lookup Table\nlookup_table <- data.frame(number = 1:100, result = as.character(1:100))\nlookup_table$result[lookup_table$number %% 3 == 0] <- \"Fizz\"\nlookup_table$result[lookup_table$number %% 5 == 0] <- \"Buzz\"\nlookup_table$result[lookup_table$number %% 15 == 0] <- \"FizzBuzz\"\nprint(lookup_table$result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n  [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n [13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n [19] \"19\"       \"Buzz\"     \"Fizz\"     \"22\"       \"23\"       \"Fizz\"    \n [25] \"Buzz\"     \"26\"       \"Fizz\"     \"28\"       \"29\"       \"FizzBuzz\"\n [31] \"31\"       \"32\"       \"Fizz\"     \"34\"       \"Buzz\"     \"Fizz\"    \n [37] \"37\"       \"38\"       \"Fizz\"     \"Buzz\"     \"41\"       \"Fizz\"    \n [43] \"43\"       \"44\"       \"FizzBuzz\" \"46\"       \"47\"       \"Fizz\"    \n [49] \"49\"       \"Buzz\"     \"Fizz\"     \"52\"       \"53\"       \"Fizz\"    \n [55] \"Buzz\"     \"56\"       \"Fizz\"     \"58\"       \"59\"       \"FizzBuzz\"\n [61] \"61\"       \"62\"       \"Fizz\"     \"64\"       \"Buzz\"     \"Fizz\"    \n [67] \"67\"       \"68\"       \"Fizz\"     \"Buzz\"     \"71\"       \"Fizz\"    \n [73] \"73\"       \"74\"       \"FizzBuzz\" \"76\"       \"77\"       \"Fizz\"    \n [79] \"79\"       \"Buzz\"     \"Fizz\"     \"82\"       \"83\"       \"Fizz\"    \n [85] \"Buzz\"     \"86\"       \"Fizz\"     \"88\"       \"89\"       \"FizzBuzz\"\n [91] \"91\"       \"92\"       \"Fizz\"     \"94\"       \"Buzz\"     \"Fizz\"    \n [97] \"97\"       \"98\"       \"Fizz\"     \"Buzz\"    \n```\n:::\n:::\n\n\n## Solution 8: Functional Reactive Programming with Shiny\n\nThis solution showcases the power of Shiny, an R package for web application development, by building an interactive FizzBuzz generator.\n\n```r\n# Solution 8: Functional Reactive Programmming with Shiny\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"n\", \"Enter a number:\", min = 1, max = 100, value = 1),\n  verbatimTextOutput(\"result\")\n)\n\nserver <- function(input, output) {\n  output$result <- renderPrint({\n    if (input$n %% 3 == 0 & input$n %% 5 == 0)\n      return(\"FizzBuzz\")\n    else if (input$n %% 3 == 0)\n      return(\"Fizz\")\n    else if (input$n %% 5 == 0)\n      return(\"Buzz\")\n    else\n      return(input$n)\n  })\n}\n\nshinyApp(ui, server)\n```\n\n# Conclusion:\n\nThe FizzBuzz problem provides an excellent opportunity to explore various programming techniques in R, ranging from basic conditional statements to advanced functional programming concepts. By presenting eight diverse solutions, this article aimed to demonstrate the flexibility and creativity that R offers when solving coding challenges. Each approach offers a unique perspective and highlights different aspects of the R language, allowing developers to expand their knowledge and problem-solving skills. Whether you are a beginner or an experienced R programmer, these solutions provide valuable insights into the multiple ways to tackle the FizzBuzz problem in R.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}